
STM32_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088b4  080088b4  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088bc  080088bc  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088bc  080088bc  000188bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088c0  080088c0  000188c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  080088c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00001e4c  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f9c  20001f9c  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fc72  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031c5  00000000  00000000  0002fe35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d00  00000000  00000000  00033000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000099d  00000000  00000000  00033d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023ac7  00000000  00000000  0003469d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000124bc  00000000  00000000  00058164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca051  00000000  00000000  0006a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003878  00000000  00000000  00134674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00137eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800875c 	.word	0x0800875c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800875c 	.word	0x0800875c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fcd2 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f81a 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f8e2 	bl	8000750 <MX_GPIO_Init>
  MX_RTC_Init();
 800058c:	f000 f882 	bl	8000694 <MX_RTC_Init>
  MX_USB_DEVICE_Init();
 8000590:	f006 ff0e 	bl	80073b0 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(&hrtc, &Int_RTC_Time, RTC_FORMAT_BIN);
 8000594:	2200      	movs	r2, #0
 8000596:	4906      	ldr	r1, [pc, #24]	; (80005b0 <main+0x34>)
 8000598:	4806      	ldr	r0, [pc, #24]	; (80005b4 <main+0x38>)
 800059a:	f003 f901 	bl	80037a0 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &Int_RTC_Date, RTC_FORMAT_BIN);
 800059e:	2200      	movs	r2, #0
 80005a0:	4905      	ldr	r1, [pc, #20]	; (80005b8 <main+0x3c>)
 80005a2:	4804      	ldr	r0, [pc, #16]	; (80005b4 <main+0x38>)
 80005a4:	f003 f9df 	bl	8003966 <HAL_RTC_GetDate>
	  HAL_Delay(100);
 80005a8:	2064      	movs	r0, #100	; 0x64
 80005aa:	f000 fd2f 	bl	800100c <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &Int_RTC_Time, RTC_FORMAT_BIN);
 80005ae:	e7f1      	b.n	8000594 <main+0x18>
 80005b0:	2000018c 	.word	0x2000018c
 80005b4:	2000016c 	.word	0x2000016c
 80005b8:	200001a0 	.word	0x200001a0

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f007 fc42 	bl	8007e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b29      	ldr	r3, [pc, #164]	; (800068c <SystemClock_Config+0xd0>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a28      	ldr	r2, [pc, #160]	; (800068c <SystemClock_Config+0xd0>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <SystemClock_Config+0xd0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xd4>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xd4>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0xd4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000618:	2309      	movs	r3, #9
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000634:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fa48 	bl	8002adc <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000652:	f000 f8f7 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000662:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2105      	movs	r1, #5
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fca9 	bl	8002fcc <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000680:	f000 f8e0 	bl	8000844 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	809a      	strh	r2, [r3, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <MX_RTC_Init+0xb4>)
 80006b4:	4a25      	ldr	r2, [pc, #148]	; (800074c <MX_RTC_Init+0xb8>)
 80006b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006b8:	4b23      	ldr	r3, [pc, #140]	; (8000748 <MX_RTC_Init+0xb4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_RTC_Init+0xb4>)
 80006c0:	227f      	movs	r2, #127	; 0x7f
 80006c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006c4:	4b20      	ldr	r3, [pc, #128]	; (8000748 <MX_RTC_Init+0xb4>)
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_RTC_Init+0xb4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_RTC_Init+0xb4>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_RTC_Init+0xb4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006dc:	481a      	ldr	r0, [pc, #104]	; (8000748 <MX_RTC_Init+0xb4>)
 80006de:	f002 ff4f 	bl	8003580 <HAL_RTC_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80006e8:	f000 f8ac 	bl	8000844 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 0x0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0x0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73bb      	strb	r3, [r7, #14]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	480f      	ldr	r0, [pc, #60]	; (8000748 <MX_RTC_Init+0xb4>)
 800070a:	f002 ffaf 	bl	800366c <HAL_RTC_SetTime>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000714:	f000 f896 	bl	8000844 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000718:	2301      	movs	r3, #1
 800071a:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800071c:	2301      	movs	r3, #1
 800071e:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000720:	2301      	movs	r3, #1
 8000722:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000724:	2300      	movs	r3, #0
 8000726:	813b      	strh	r3, [r7, #8]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2201      	movs	r2, #1
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_RTC_Init+0xb4>)
 8000730:	f003 f894 	bl	800385c <HAL_RTC_SetDate>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800073a:	f000 f883 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000016c 	.word	0x2000016c
 800074c:	40002800 	.word	0x40002800

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0x9c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <MX_GPIO_Init+0x9c>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_GPIO_Init+0x9c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a18      	ldr	r2, [pc, #96]	; (80007ec <MX_GPIO_Init+0x9c>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a11      	ldr	r2, [pc, #68]	; (80007ec <MX_GPIO_Init+0x9c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ba:	2301      	movs	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	4808      	ldr	r0, [pc, #32]	; (80007f0 <MX_GPIO_Init+0xa0>)
 80007d0:	f000 fd52 	bl	8001278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2006      	movs	r0, #6
 80007da:	f000 fd16 	bl	800120a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007de:	2006      	movs	r0, #6
 80007e0:	f000 fd2f 	bl	8001242 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020000 	.word	0x40020000

080007f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	80fb      	strh	r3, [r7, #6]
	Int_RTC_Time.Hours=10;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_GPIO_EXTI_Callback+0x44>)
 8000800:	220a      	movs	r2, #10
 8000802:	701a      	strb	r2, [r3, #0]
	Int_RTC_Time.Minutes=10;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_GPIO_EXTI_Callback+0x44>)
 8000806:	220a      	movs	r2, #10
 8000808:	705a      	strb	r2, [r3, #1]
	Int_RTC_Time.Seconds=10;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_GPIO_EXTI_Callback+0x44>)
 800080c:	220a      	movs	r2, #10
 800080e:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &Int_RTC_Time, RTC_FORMAT_BIN);
 8000810:	2200      	movs	r2, #0
 8000812:	4909      	ldr	r1, [pc, #36]	; (8000838 <HAL_GPIO_EXTI_Callback+0x44>)
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <HAL_GPIO_EXTI_Callback+0x48>)
 8000816:	f002 ff29 	bl	800366c <HAL_RTC_SetTime>
	Int_RTC_Date.WeekDay=RTC_WEEKDAY_SUNDAY;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_GPIO_EXTI_Callback+0x4c>)
 800081c:	2207      	movs	r2, #7
 800081e:	701a      	strb	r2, [r3, #0]
	Int_RTC_Date.Month=RTC_MONTH_JANUARY;
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000822:	2201      	movs	r2, #1
 8000824:	705a      	strb	r2, [r3, #1]
	HAL_RTC_SetDate(&hrtc, &Int_RTC_Date, RTC_FORMAT_BIN);
 8000826:	2200      	movs	r2, #0
 8000828:	4905      	ldr	r1, [pc, #20]	; (8000840 <HAL_GPIO_EXTI_Callback+0x4c>)
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <HAL_GPIO_EXTI_Callback+0x48>)
 800082c:	f003 f816 	bl	800385c <HAL_RTC_SetDate>

}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000018c 	.word	0x2000018c
 800083c:	2000016c 	.word	0x2000016c
 8000840:	200001a0 	.word	0x200001a0

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>

0800084e <hexToUint8>:
 * @brief Hexadecimal bir diziyi temsil eden bir char dizisinden uint8_t degeri cikarmak icin kullanilir.
 * @param startIndex: Başlangic indeksi
 * @param hex: Hexadecimal diziyi temsil eden char dizisi
 * @retval uint8_t turunde cikartilan deger
 */
uint8_t hexToUint8(int startIndex, char hex[]) {
 800084e:	b480      	push	{r7}
 8000850:	b085      	sub	sp, #20
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
    uint8_t result = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	73fb      	strb	r3, [r7, #15]
    uint8_t length=2;	// Bir uint8_t icin hexadecimal değer 2 karakterlidir.
 800085c:	2302      	movs	r3, #2
 800085e:	737b      	strb	r3, [r7, #13]

    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	73bb      	strb	r3, [r7, #14]
 8000864:	e052      	b.n	800090c <hexToUint8+0xbe>
        result = result << 4;	// 4 bit sola kaydırma işlemi yapılır.
 8000866:	7bfb      	ldrb	r3, [r7, #15]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	73fb      	strb	r3, [r7, #15]

        if (hex[i] >= '0' && hex[i] <= '9') {
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	683a      	ldr	r2, [r7, #0]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b2f      	cmp	r3, #47	; 0x2f
 8000876:	d912      	bls.n	800089e <hexToUint8+0x50>
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	4413      	add	r3, r2
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b39      	cmp	r3, #57	; 0x39
 8000882:	d80c      	bhi.n	800089e <hexToUint8+0x50>
            result |= hex[i] - '0';			// '0' ile '9' arasındaki karakterleri isler.
 8000884:	7bbb      	ldrb	r3, [r7, #14]
 8000886:	683a      	ldr	r2, [r7, #0]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	3b30      	subs	r3, #48	; 0x30
 800088e:	b2db      	uxtb	r3, r3
 8000890:	b25a      	sxtb	r2, r3
 8000892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000896:	4313      	orrs	r3, r2
 8000898:	b25b      	sxtb	r3, r3
 800089a:	73fb      	strb	r3, [r7, #15]
 800089c:	e033      	b.n	8000906 <hexToUint8+0xb8>
        } else if (hex[i] >= 'A' && hex[i] <= 'F') {
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b40      	cmp	r3, #64	; 0x40
 80008a8:	d912      	bls.n	80008d0 <hexToUint8+0x82>
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	2b46      	cmp	r3, #70	; 0x46
 80008b4:	d80c      	bhi.n	80008d0 <hexToUint8+0x82>
            result |= hex[i] - 'A' + 10;	// 'A' ile 'F' arasındaki karakterleri isler.
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	3b37      	subs	r3, #55	; 0x37
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	b25a      	sxtb	r2, r3
 80008c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	73fb      	strb	r3, [r7, #15]
 80008ce:	e01a      	b.n	8000906 <hexToUint8+0xb8>
        } else if (hex[i] >= 'a' && hex[i] <= 'f') {
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b60      	cmp	r3, #96	; 0x60
 80008da:	d912      	bls.n	8000902 <hexToUint8+0xb4>
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b66      	cmp	r3, #102	; 0x66
 80008e6:	d80c      	bhi.n	8000902 <hexToUint8+0xb4>
            result |= hex[i] - 'a' + 10;	// 'a' ile 'f' arasındaki karakterleri isler.
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3b57      	subs	r3, #87	; 0x57
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	b25a      	sxtb	r2, r3
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b25b      	sxtb	r3, r3
 80008fe:	73fb      	strb	r3, [r7, #15]
 8000900:	e001      	b.n	8000906 <hexToUint8+0xb8>
        } else {
            return -1;						// Gecersiz karakter durumunda -1 dondurulur.
 8000902:	23ff      	movs	r3, #255	; 0xff
 8000904:	e009      	b.n	800091a <hexToUint8+0xcc>
    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 8000906:	7bbb      	ldrb	r3, [r7, #14]
 8000908:	3301      	adds	r3, #1
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	7bba      	ldrb	r2, [r7, #14]
 800090e:	7b79      	ldrb	r1, [r7, #13]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	440b      	add	r3, r1
 8000914:	429a      	cmp	r2, r3
 8000916:	dba6      	blt.n	8000866 <hexToUint8+0x18>

        }
    }

    return result;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <hexToUint16>:
 * @brief Hexadecimal bir diziyi temsil eden bir char dizisinden uint16_t degeri cikarmak icin kullanilir.
 * @param startIndex: Başlangic indeksi
 * @param hex: Hexadecimal diziyi temsil eden char dizisi
 * @retval uint16_t turunde cikartilan deger
 */
uint16_t hexToUint16(int startIndex, char hex[]) {
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
    uint16_t result = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	81fb      	strh	r3, [r7, #14]
    uint8_t length=4;	// Bir uint16_t icin hexadecimal değer 4 karakterlidir.
 8000934:	2304      	movs	r3, #4
 8000936:	733b      	strb	r3, [r7, #12]

    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	737b      	strb	r3, [r7, #13]
 800093c:	e056      	b.n	80009ec <hexToUint16+0xc6>
        result = result << 4;	// 4 bit sola kaydirma islemi yapılır.
 800093e:	89fb      	ldrh	r3, [r7, #14]
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	81fb      	strh	r3, [r7, #14]

        if (hex[i] >= '0' && hex[i] <= '9') {
 8000944:	7b7b      	ldrb	r3, [r7, #13]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b2f      	cmp	r3, #47	; 0x2f
 800094e:	d913      	bls.n	8000978 <hexToUint16+0x52>
 8000950:	7b7b      	ldrb	r3, [r7, #13]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b39      	cmp	r3, #57	; 0x39
 800095a:	d80d      	bhi.n	8000978 <hexToUint16+0x52>
            result |= hex[i] - '0';				// '0' ile '9' arasındaki karakterleri isler.
 800095c:	7b7b      	ldrb	r3, [r7, #13]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b29b      	uxth	r3, r3
 8000966:	3b30      	subs	r3, #48	; 0x30
 8000968:	b29b      	uxth	r3, r3
 800096a:	b21a      	sxth	r2, r3
 800096c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000970:	4313      	orrs	r3, r2
 8000972:	b21b      	sxth	r3, r3
 8000974:	81fb      	strh	r3, [r7, #14]
 8000976:	e036      	b.n	80009e6 <hexToUint16+0xc0>
        } else if (hex[i] >= 'A' && hex[i] <= 'F') {
 8000978:	7b7b      	ldrb	r3, [r7, #13]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	4413      	add	r3, r2
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b40      	cmp	r3, #64	; 0x40
 8000982:	d913      	bls.n	80009ac <hexToUint16+0x86>
 8000984:	7b7b      	ldrb	r3, [r7, #13]
 8000986:	683a      	ldr	r2, [r7, #0]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b46      	cmp	r3, #70	; 0x46
 800098e:	d80d      	bhi.n	80009ac <hexToUint16+0x86>
            result |= hex[i] - 'A' + 10;		// 'A' ile 'F' arasındaki karakterleri isler.
 8000990:	7b7b      	ldrb	r3, [r7, #13]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b29b      	uxth	r3, r3
 800099a:	3b37      	subs	r3, #55	; 0x37
 800099c:	b29b      	uxth	r3, r3
 800099e:	b21a      	sxth	r2, r3
 80009a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	81fb      	strh	r3, [r7, #14]
 80009aa:	e01c      	b.n	80009e6 <hexToUint16+0xc0>
        } else if (hex[i] >= 'a' && hex[i] <= 'f') {
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b60      	cmp	r3, #96	; 0x60
 80009b6:	d913      	bls.n	80009e0 <hexToUint16+0xba>
 80009b8:	7b7b      	ldrb	r3, [r7, #13]
 80009ba:	683a      	ldr	r2, [r7, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b66      	cmp	r3, #102	; 0x66
 80009c2:	d80d      	bhi.n	80009e0 <hexToUint16+0xba>
            result |= hex[i] - 'a' + 10;		// 'a' ile 'f' arasındaki karakterleri isler.
 80009c4:	7b7b      	ldrb	r3, [r7, #13]
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	3b57      	subs	r3, #87	; 0x57
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21b      	sxth	r3, r3
 80009dc:	81fb      	strh	r3, [r7, #14]
 80009de:	e002      	b.n	80009e6 <hexToUint16+0xc0>
        } else {
            return -1;							// Gecersiz karakter durumunda -1 dondurulur.
 80009e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e4:	e009      	b.n	80009fa <hexToUint16+0xd4>
    for (uint8_t i = startIndex; i < startIndex + length; i++) {
 80009e6:	7b7b      	ldrb	r3, [r7, #13]
 80009e8:	3301      	adds	r3, #1
 80009ea:	737b      	strb	r3, [r7, #13]
 80009ec:	7b7a      	ldrb	r2, [r7, #13]
 80009ee:	7b39      	ldrb	r1, [r7, #12]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	440b      	add	r3, r1
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dba2      	blt.n	800093e <hexToUint16+0x18>

        }
    }

    return result;
 80009f8:	89fb      	ldrh	r3, [r7, #14]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <readCommand>:
/**
  * @brief  RTC tarih ve saat bilgilerini okur ve bunları USB araciligiyla iletisim portuna gonderir.
  * @return Islemin basarili olup olmadigini gosteren hata kodu.
  *         - NO_ERROR: Islem basariyla tamamlandi.
  */
int readCommand() {
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af04      	add	r7, sp, #16
	// RTC tarih ve saat bilgilerini iceren bir dizi olustur.
	sprintf(dizi,"\nSistem Saati: %d/%d/%d %d:%d:%d",Int_RTC_Date.Date,Int_RTC_Date.Month,Int_RTC_Date.Year,Int_RTC_Time.Hours,Int_RTC_Time.Minutes,Int_RTC_Time.Seconds);
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <readCommand+0x58>)
 8000a10:	789b      	ldrb	r3, [r3, #2]
 8000a12:	461c      	mov	r4, r3
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <readCommand+0x58>)
 8000a16:	785b      	ldrb	r3, [r3, #1]
 8000a18:	461d      	mov	r5, r3
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <readCommand+0x58>)
 8000a1c:	889b      	ldrh	r3, [r3, #4]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <readCommand+0x5c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <readCommand+0x5c>)
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <readCommand+0x5c>)
 8000a2e:	789b      	ldrb	r3, [r3, #2]
 8000a30:	9303      	str	r3, [sp, #12]
 8000a32:	9002      	str	r0, [sp, #8]
 8000a34:	9101      	str	r1, [sp, #4]
 8000a36:	9200      	str	r2, [sp, #0]
 8000a38:	462b      	mov	r3, r5
 8000a3a:	4622      	mov	r2, r4
 8000a3c:	490a      	ldr	r1, [pc, #40]	; (8000a68 <readCommand+0x60>)
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <readCommand+0x64>)
 8000a40:	f007 f9e8 	bl	8007e14 <siprintf>

	// Olusturulan diziyi USB araciligiyla iletisim portuna gonder
	CDC_Transmit_FS((uint8_t*)dizi, strlen(dizi));
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <readCommand+0x64>)
 8000a46:	f7ff fbc3 	bl	80001d0 <strlen>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <readCommand+0x64>)
 8000a52:	f006 fd83 	bl	800755c <CDC_Transmit_FS>

	// Islem basariyla tamamlandi
    return NO_ERROR;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001a0 	.word	0x200001a0
 8000a64:	2000018c 	.word	0x2000018c
 8000a68:	08008774 	.word	0x08008774
 8000a6c:	200001a8 	.word	0x200001a8

08000a70 <writeCommand>:
  * @param  messageString: Tarih ve saat bilgilerini iceren mesaj dizisinin isaretcisi.
  * @return Islemin basarili olup olmadıgini gosteren hata kodu.
  *         - NO_ERROR: Islem basariyla tamamlandi.
  *         - INVALID_DATE: Mesaj icinde gecersiz tarih veya saat parametreleri.
  */
int writeCommand(char* messageString) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    uint8_t day = hexToUint8(DAY_INDEX, messageString);
 8000a78:	6879      	ldr	r1, [r7, #4]
 8000a7a:	2007      	movs	r0, #7
 8000a7c:	f7ff fee7 	bl	800084e <hexToUint8>
 8000a80:	4603      	mov	r3, r0
 8000a82:	73fb      	strb	r3, [r7, #15]
    uint8_t month = hexToUint8(MONTH_INDEX, messageString);
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	2009      	movs	r0, #9
 8000a88:	f7ff fee1 	bl	800084e <hexToUint8>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73bb      	strb	r3, [r7, #14]
    uint16_t year = hexToUint8(YEAR_INDEX, messageString);
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	200b      	movs	r0, #11
 8000a94:	f7ff fedb 	bl	800084e <hexToUint8>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	81bb      	strh	r3, [r7, #12]
    uint8_t hours = hexToUint8(HOURS_INDEX, messageString);
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	200d      	movs	r0, #13
 8000aa0:	f7ff fed5 	bl	800084e <hexToUint8>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	72fb      	strb	r3, [r7, #11]
    uint8_t minutes = hexToUint8(MINUTES_INDEX, messageString);
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f7ff fecf 	bl	800084e <hexToUint8>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	72bb      	strb	r3, [r7, #10]
    uint8_t seconds = hexToUint8(SECONDS_INDEX, messageString);
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	2011      	movs	r0, #17
 8000ab8:	f7ff fec9 	bl	800084e <hexToUint8>
 8000abc:	4603      	mov	r3, r0
 8000abe:	727b      	strb	r3, [r7, #9]

    // Cikarilan tarih ve saat bilesenlerini dogrula
    if (day > 31 || month > 12 || year > 99 || year < 0 || hours > 23 || minutes > 59 || seconds > 59) {
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	2b1f      	cmp	r3, #31
 8000ac4:	d80e      	bhi.n	8000ae4 <writeCommand+0x74>
 8000ac6:	7bbb      	ldrb	r3, [r7, #14]
 8000ac8:	2b0c      	cmp	r3, #12
 8000aca:	d80b      	bhi.n	8000ae4 <writeCommand+0x74>
 8000acc:	89bb      	ldrh	r3, [r7, #12]
 8000ace:	2b63      	cmp	r3, #99	; 0x63
 8000ad0:	d808      	bhi.n	8000ae4 <writeCommand+0x74>
 8000ad2:	7afb      	ldrb	r3, [r7, #11]
 8000ad4:	2b17      	cmp	r3, #23
 8000ad6:	d805      	bhi.n	8000ae4 <writeCommand+0x74>
 8000ad8:	7abb      	ldrb	r3, [r7, #10]
 8000ada:	2b3b      	cmp	r3, #59	; 0x3b
 8000adc:	d802      	bhi.n	8000ae4 <writeCommand+0x74>
 8000ade:	7a7b      	ldrb	r3, [r7, #9]
 8000ae0:	2b3b      	cmp	r3, #59	; 0x3b
 8000ae2:	d901      	bls.n	8000ae8 <writeCommand+0x78>
        return INVALID_DATE;
 8000ae4:	2305      	movs	r3, #5
 8000ae6:	e035      	b.n	8000b54 <writeCommand+0xe4>
    }
    // RTC tarihini ve saatini ayarla
    globalMessage.payload.timestamp.day=Int_RTC_Date.Date = day;
 8000ae8:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <writeCommand+0xec>)
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	7093      	strb	r3, [r2, #2]
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <writeCommand+0xec>)
 8000af0:	789a      	ldrb	r2, [r3, #2]
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <writeCommand+0xf0>)
 8000af4:	72da      	strb	r2, [r3, #11]
    globalMessage.payload.timestamp.month=Int_RTC_Date.Month = month;
 8000af6:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <writeCommand+0xec>)
 8000af8:	7bbb      	ldrb	r3, [r7, #14]
 8000afa:	7053      	strb	r3, [r2, #1]
 8000afc:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <writeCommand+0xec>)
 8000afe:	785a      	ldrb	r2, [r3, #1]
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <writeCommand+0xf0>)
 8000b02:	729a      	strb	r2, [r3, #10]
    globalMessage.payload.timestamp.year=Int_RTC_Date.Year = year;
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <writeCommand+0xec>)
 8000b06:	89bb      	ldrh	r3, [r7, #12]
 8000b08:	8093      	strh	r3, [r2, #4]
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <writeCommand+0xec>)
 8000b0c:	889b      	ldrh	r3, [r3, #4]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <writeCommand+0xf0>)
 8000b12:	725a      	strb	r2, [r3, #9]
	HAL_RTC_SetDate(&hrtc, &Int_RTC_Date, RTC_FORMAT_BIN);
 8000b14:	2200      	movs	r2, #0
 8000b16:	4911      	ldr	r1, [pc, #68]	; (8000b5c <writeCommand+0xec>)
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <writeCommand+0xf4>)
 8000b1a:	f002 fe9f 	bl	800385c <HAL_RTC_SetDate>

	globalMessage.payload.timestamp.hour=Int_RTC_Time.Hours = hours;
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <writeCommand+0xf8>)
 8000b20:	7afb      	ldrb	r3, [r7, #11]
 8000b22:	7013      	strb	r3, [r2, #0]
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <writeCommand+0xf8>)
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <writeCommand+0xf0>)
 8000b2a:	731a      	strb	r2, [r3, #12]
	globalMessage.payload.timestamp.minute=Int_RTC_Time.Minutes = minutes;
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <writeCommand+0xf8>)
 8000b2e:	7abb      	ldrb	r3, [r7, #10]
 8000b30:	7053      	strb	r3, [r2, #1]
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <writeCommand+0xf8>)
 8000b34:	785a      	ldrb	r2, [r3, #1]
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <writeCommand+0xf0>)
 8000b38:	735a      	strb	r2, [r3, #13]
	globalMessage.payload.timestamp.second=Int_RTC_Time.Seconds = seconds;
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <writeCommand+0xf8>)
 8000b3c:	7a7b      	ldrb	r3, [r7, #9]
 8000b3e:	7093      	strb	r3, [r2, #2]
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <writeCommand+0xf8>)
 8000b42:	789a      	ldrb	r2, [r3, #2]
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <writeCommand+0xf0>)
 8000b46:	739a      	strb	r2, [r3, #14]
    HAL_RTC_SetTime(&hrtc, &Int_RTC_Time, RTC_FORMAT_BIN);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4907      	ldr	r1, [pc, #28]	; (8000b68 <writeCommand+0xf8>)
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <writeCommand+0xf4>)
 8000b4e:	f002 fd8d 	bl	800366c <HAL_RTC_SetTime>

    // Islem basariyla tamamlandi
    return NO_ERROR;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200001a0 	.word	0x200001a0
 8000b60:	20000230 	.word	0x20000230
 8000b64:	2000016c 	.word	0x2000016c
 8000b68:	2000018c 	.word	0x2000018c

08000b6c <parseMessage>:
 * ozel islemleri gerceklestirir (ornegin, belirli bir komut numarasina veya adresine göre kontrol).
 *
 * @param messageString: Analiz edilecek mesaj stringi.
 * @return ErrorCode: Fonksiyonun basarılı olup olmadığını belirten hata kodu.
 */
ErrorCode parseMessage(char* messageString) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    // Başlangıç karakterini kontrol et
    if (messageString[0] != 0xA3) // '£' karakteri kabul etmedigi icin ASCII karsiligi olan hex degerini kullandim.
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2ba3      	cmp	r3, #163	; 0xa3
 8000b7a:	d001      	beq.n	8000b80 <parseMessage+0x14>
    {
        return INVALID_START_CHAR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e060      	b.n	8000c42 <parseMessage+0xd6>
    }


    // Bitiş karakterini kontrol et
    if (messageString[strlen(messageString)-1] != '%') {
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff fb25 	bl	80001d0 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b25      	cmp	r3, #37	; 0x25
 8000b92:	d001      	beq.n	8000b98 <parseMessage+0x2c>
        return INVALID_END_CHAR;
 8000b94:	2302      	movs	r3, #2
 8000b96:	e054      	b.n	8000c42 <parseMessage+0xd6>
    }
    globalMessage.start=messageString[0];
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <parseMessage+0xe0>)
 8000b9e:	701a      	strb	r2, [r3, #0]
    globalMessage.end=messageString[strlen(messageString)-1];
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff fb15 	bl	80001d0 <strlen>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <parseMessage+0xe0>)
 8000bb2:	73da      	strb	r2, [r3, #15]
    if(SLAVE_ADDRESS!=hexToUint16(SLAVE_NUMBER_START_INDEX, messageString))
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff feb5 	bl	8000926 <hexToUint16>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <parseMessage+0xe4>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d001      	beq.n	8000bcc <parseMessage+0x60>
    {
    	return INVALID_SLAVE_ADDRESS;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	e03a      	b.n	8000c42 <parseMessage+0xd6>

    }

    globalMessage.commandType = hexToUint8(COMMAND_TYPE_START_INDEX,messageString);
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	2005      	movs	r0, #5
 8000bd0:	f7ff fe3d 	bl	800084e <hexToUint8>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <parseMessage+0xe0>)
 8000bda:	721a      	strb	r2, [r3, #8]
    if (globalMessage.commandType == READ_COMMAND && strlen(messageString) != READ_Message_Length) {
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <parseMessage+0xe0>)
 8000bde:	7a1b      	ldrb	r3, [r3, #8]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d107      	bne.n	8000bf4 <parseMessage+0x88>
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff faf3 	bl	80001d0 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d001      	beq.n	8000bf4 <parseMessage+0x88>
        return INVALID_DATA_SIZE;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e026      	b.n	8000c42 <parseMessage+0xd6>
    } else if (globalMessage.commandType == WRITE_COMMAND && strlen(messageString) != WRITE_Message_Length) {
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <parseMessage+0xe0>)
 8000bf6:	7a1b      	ldrb	r3, [r3, #8]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d107      	bne.n	8000c0c <parseMessage+0xa0>
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fae7 	bl	80001d0 <strlen>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b14      	cmp	r3, #20
 8000c06:	d001      	beq.n	8000c0c <parseMessage+0xa0>
        return INVALID_DATA_SIZE;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e01a      	b.n	8000c42 <parseMessage+0xd6>
    }

    globalMessage.slaveAddress= hexToUint16(SLAVE_NUMBER_START_INDEX, messageString);
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f7ff fe89 	bl	8000926 <hexToUint16>
 8000c14:	4603      	mov	r3, r0
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <parseMessage+0xe0>)
 8000c1a:	605a      	str	r2, [r3, #4]

    switch (globalMessage.commandType) {
 8000c1c:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <parseMessage+0xe0>)
 8000c1e:	7a1b      	ldrb	r3, [r3, #8]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <parseMessage+0xbe>
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d005      	beq.n	8000c34 <parseMessage+0xc8>
 8000c28:	e00a      	b.n	8000c40 <parseMessage+0xd4>
            case READ_COMMAND:
                return readCommand();
 8000c2a:	f7ff feed 	bl	8000a08 <readCommand>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	e006      	b.n	8000c42 <parseMessage+0xd6>
            case WRITE_COMMAND:
                return writeCommand(messageString);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff1b 	bl	8000a70 <writeCommand>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	e000      	b.n	8000c42 <parseMessage+0xd6>
            default:
                return INVALID_COMMAND_TYPE;
 8000c40:	2306      	movs	r3, #6
        }

}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000230 	.word	0x20000230
 8000c50:	20000000 	.word	0x20000000

08000c54 <parseData>:
 * @brief Analiz edilmis bir mesajin durumuna gore islem yapar ve gerekirse hata mesaji gonderir.
 *
 * @param buffer: Analiz edilmis mesajin string temsilcisi.
 */
void parseData(char *buffer)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	ErrorCode result = parseMessage(buffer);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff85 	bl	8000b6c <parseMessage>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]

	if (result != NO_ERROR) {
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d041      	beq.n	8000cf0 <parseData+0x9c>
	        switch (result) {
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	2b05      	cmp	r3, #5
 8000c72:	d82d      	bhi.n	8000cd0 <parseData+0x7c>
 8000c74:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <parseData+0x28>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000ca9 	.word	0x08000ca9
 8000c80:	08000c95 	.word	0x08000c95
 8000c84:	08000c9f 	.word	0x08000c9f
 8000c88:	08000cbd 	.word	0x08000cbd
 8000c8c:	08000cb3 	.word	0x08000cb3
 8000c90:	08000cc7 	.word	0x08000cc7
	            case INVALID_END_CHAR:
	                sprintf(dizi, "Bitis karakteri hatali!");
 8000c94:	491b      	ldr	r1, [pc, #108]	; (8000d04 <parseData+0xb0>)
 8000c96:	481c      	ldr	r0, [pc, #112]	; (8000d08 <parseData+0xb4>)
 8000c98:	f007 f8bc 	bl	8007e14 <siprintf>
	                break;
 8000c9c:	e019      	b.n	8000cd2 <parseData+0x7e>
	            case INVALID_DATA_SIZE:
	                sprintf(dizi, "Gecersiz veri uzunlugu!");
 8000c9e:	491b      	ldr	r1, [pc, #108]	; (8000d0c <parseData+0xb8>)
 8000ca0:	4819      	ldr	r0, [pc, #100]	; (8000d08 <parseData+0xb4>)
 8000ca2:	f007 f8b7 	bl	8007e14 <siprintf>
	                break;
 8000ca6:	e014      	b.n	8000cd2 <parseData+0x7e>
	            case INVALID_START_CHAR:
	                sprintf(dizi, "Gecersiz baslangic karakteri!");
 8000ca8:	4919      	ldr	r1, [pc, #100]	; (8000d10 <parseData+0xbc>)
 8000caa:	4817      	ldr	r0, [pc, #92]	; (8000d08 <parseData+0xb4>)
 8000cac:	f007 f8b2 	bl	8007e14 <siprintf>
	                break;
 8000cb0:	e00f      	b.n	8000cd2 <parseData+0x7e>
	            case INVALID_DATE:
	                sprintf(dizi, "Gecersiz Tarih!");
 8000cb2:	4918      	ldr	r1, [pc, #96]	; (8000d14 <parseData+0xc0>)
 8000cb4:	4814      	ldr	r0, [pc, #80]	; (8000d08 <parseData+0xb4>)
 8000cb6:	f007 f8ad 	bl	8007e14 <siprintf>
	                break;
 8000cba:	e00a      	b.n	8000cd2 <parseData+0x7e>
	            case INVALID_SLAVE_ADDRESS:
	                sprintf(dizi, "Gecersiz slave addresi!");
 8000cbc:	4916      	ldr	r1, [pc, #88]	; (8000d18 <parseData+0xc4>)
 8000cbe:	4812      	ldr	r0, [pc, #72]	; (8000d08 <parseData+0xb4>)
 8000cc0:	f007 f8a8 	bl	8007e14 <siprintf>
	                break;
 8000cc4:	e005      	b.n	8000cd2 <parseData+0x7e>
	            case INVALID_COMMAND_TYPE:
	            	sprintf(dizi,"Gecersiz emir turu!\n ");
 8000cc6:	4915      	ldr	r1, [pc, #84]	; (8000d1c <parseData+0xc8>)
 8000cc8:	480f      	ldr	r0, [pc, #60]	; (8000d08 <parseData+0xb4>)
 8000cca:	f007 f8a3 	bl	8007e14 <siprintf>
	            	break;
 8000cce:	e000      	b.n	8000cd2 <parseData+0x7e>
	            default:
	                break;
 8000cd0:	bf00      	nop
	        }

	        CDC_Transmit_FS((uint8_t*)dizi, strlen(dizi));
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <parseData+0xb4>)
 8000cd4:	f7ff fa7c 	bl	80001d0 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <parseData+0xb4>)
 8000ce0:	f006 fc3c 	bl	800755c <CDC_Transmit_FS>
	        errorMessageCount++;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <parseData+0xcc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <parseData+0xcc>)
 8000cec:	6013      	str	r3, [r2, #0]
	    } else {
	        successfulMessageCount++;
	    }
}
 8000cee:	e004      	b.n	8000cfa <parseData+0xa6>
	        successfulMessageCount++;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <parseData+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <parseData+0xd0>)
 8000cf8:	6013      	str	r3, [r2, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08008798 	.word	0x08008798
 8000d08:	200001a8 	.word	0x200001a8
 8000d0c:	080087b0 	.word	0x080087b0
 8000d10:	080087c8 	.word	0x080087c8
 8000d14:	080087e8 	.word	0x080087e8
 8000d18:	080087f8 	.word	0x080087f8
 8000d1c:	08008810 	.word	0x08008810
 8000d20:	200001ec 	.word	0x200001ec
 8000d24:	200001e8 	.word	0x200001e8

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	4a0f      	ldr	r2, [pc, #60]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a08      	ldr	r2, [pc, #32]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_MspInit+0x4c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d66:	2007      	movs	r0, #7
 8000d68:	f000 fa44 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a0c      	ldr	r2, [pc, #48]	; (8000dc4 <HAL_RTC_MspInit+0x4c>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d111      	bne.n	8000dbc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fb08 	bl	80033bc <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000db2:	f7ff fd47 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000db6:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_RTC_MspInit+0x50>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40002800 	.word	0x40002800
 8000dc8:	42470e3c 	.word	0x42470e3c

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f8d8 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f000 fbc3 	bl	80015b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <OTG_FS_IRQHandler+0x10>)
 8000e36:	f000 fd23 	bl	8001880 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20001728 	.word	0x20001728

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f006 fff6 	bl	8007e64 <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	20000240 	.word	0x20000240
 8000eac:	20001fa0 	.word	0x20001fa0

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eda:	490e      	ldr	r1, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef0:	4c0b      	ldr	r4, [pc, #44]	; (8000f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ffd7 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f006 ffb5 	bl	8007e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fb39 	bl	800057c <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000f18:	080088c4 	.word	0x080088c4
  ldr r2, =_sbss
 8000f1c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000f20:	20001f9c 	.word	0x20001f9c

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f94f 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff fee4 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f967 	bl	800125e <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f92f 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000008 	.word	0x20000008

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	20000244 	.word	0x20000244

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000244 	.word	0x20000244

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff29 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff3e 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff31 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e16b      	b.n	800156c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 815a 	bne.w	8001566 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d005      	beq.n	80012ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b03      	cmp	r3, #3
 8001336:	d017      	beq.n	8001368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d123      	bne.n	80013bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	69b9      	ldr	r1, [r7, #24]
 80013b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80b4 	beq.w	8001566 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b60      	ldr	r3, [pc, #384]	; (8001584 <HAL_GPIO_Init+0x30c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a5f      	ldr	r2, [pc, #380]	; (8001584 <HAL_GPIO_Init+0x30c>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b5d      	ldr	r3, [pc, #372]	; (8001584 <HAL_GPIO_Init+0x30c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141a:	4a5b      	ldr	r2, [pc, #364]	; (8001588 <HAL_GPIO_Init+0x310>)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_GPIO_Init+0x314>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d02b      	beq.n	800149e <HAL_GPIO_Init+0x226>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a51      	ldr	r2, [pc, #324]	; (8001590 <HAL_GPIO_Init+0x318>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d025      	beq.n	800149a <HAL_GPIO_Init+0x222>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a50      	ldr	r2, [pc, #320]	; (8001594 <HAL_GPIO_Init+0x31c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d01f      	beq.n	8001496 <HAL_GPIO_Init+0x21e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4f      	ldr	r2, [pc, #316]	; (8001598 <HAL_GPIO_Init+0x320>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x21a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4e      	ldr	r2, [pc, #312]	; (800159c <HAL_GPIO_Init+0x324>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x216>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_GPIO_Init+0x328>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x212>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <HAL_GPIO_Init+0x32c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x20e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <HAL_GPIO_Init+0x330>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x20a>
 800147e:	2307      	movs	r3, #7
 8001480:	e00e      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001482:	2308      	movs	r3, #8
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001486:	2306      	movs	r3, #6
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800149e:	2300      	movs	r3, #0
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b0:	4935      	ldr	r1, [pc, #212]	; (8001588 <HAL_GPIO_Init+0x310>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_GPIO_Init+0x334>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_GPIO_Init+0x334>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <HAL_GPIO_Init+0x334>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <HAL_GPIO_Init+0x334>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_GPIO_Init+0x334>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_GPIO_Init+0x334>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3301      	adds	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	f67f ae90 	bls.w	8001294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40021c00 	.word	0x40021c00
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015c8:	88fb      	ldrh	r3, [r7, #6]
 80015ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f910 	bl	80007f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013c00 	.word	0x40013c00

080015e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015e2:	b08f      	sub	sp, #60	; 0x3c
 80015e4:	af0a      	add	r7, sp, #40	; 0x28
 80015e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e10f      	b.n	8001812 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d106      	bne.n	8001612 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f006 f8ed 	bl	80077ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2203      	movs	r2, #3
 8001616:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d102      	bne.n	800162c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fbbc 	bl	8003dae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	687e      	ldr	r6, [r7, #4]
 800163e:	466d      	mov	r5, sp
 8001640:	f106 0410 	add.w	r4, r6, #16
 8001644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800164a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800164c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001650:	e885 0003 	stmia.w	r5, {r0, r1}
 8001654:	1d33      	adds	r3, r6, #4
 8001656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f002 fa93 	bl	8003b84 <USB_CoreInit>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e0d0      	b.n	8001812 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fbaa 	bl	8003dd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e04a      	b.n	8001718 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	333d      	adds	r3, #61	; 0x3d
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	333c      	adds	r3, #60	; 0x3c
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	b298      	uxth	r0, r3
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3344      	adds	r3, #68	; 0x44
 80016be:	4602      	mov	r2, r0
 80016c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	3340      	adds	r3, #64	; 0x40
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80016d6:	7bfa      	ldrb	r2, [r7, #15]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	3348      	adds	r3, #72	; 0x48
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	334c      	adds	r3, #76	; 0x4c
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016fe:	7bfa      	ldrb	r2, [r7, #15]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	3354      	adds	r3, #84	; 0x54
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	3301      	adds	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3af      	bcc.n	8001682 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e044      	b.n	80017b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001728:	7bfa      	ldrb	r2, [r7, #15]
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4413      	add	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800173e:	7bfa      	ldrb	r2, [r7, #15]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4413      	add	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	440b      	add	r3, r1
 800174c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001754:	7bfa      	ldrb	r2, [r7, #15]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4413      	add	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4413      	add	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4413      	add	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	3301      	adds	r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d3b5      	bcc.n	8001728 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	687e      	ldr	r6, [r7, #4]
 80017c4:	466d      	mov	r5, sp
 80017c6:	f106 0410 	add.w	r4, r6, #16
 80017ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80017da:	1d33      	adds	r3, r6, #4
 80017dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017de:	6838      	ldr	r0, [r7, #0]
 80017e0:	f002 fb42 	bl	8003e68 <USB_DevInit>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d005      	beq.n	80017f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2202      	movs	r2, #2
 80017ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00d      	b.n	8001812 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f003 fc91 	bl	8005132 <USB_DevDisconnect>

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800181a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b084      	sub	sp, #16
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_PCD_Start+0x1c>
 8001832:	2302      	movs	r3, #2
 8001834:	e020      	b.n	8001878 <HAL_PCD_Start+0x5e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	2b01      	cmp	r3, #1
 8001844:	d109      	bne.n	800185a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fa94 	bl	8003d8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f003 fc41 	bl	80050f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b08d      	sub	sp, #52	; 0x34
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800188e:	6a3b      	ldr	r3, [r7, #32]
 8001890:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fcff 	bl	800529a <USB_GetMode>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 848a 	bne.w	80021b8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fc63 	bl	8005174 <USB_ReadInterrupts>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8480 	beq.w	80021b6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 fc50 	bl	8005174 <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d107      	bne.n	80018ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f002 0202 	and.w	r2, r2, #2
 80018ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 fc3e 	bl	8005174 <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b10      	cmp	r3, #16
 8001900:	d161      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699a      	ldr	r2, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0210 	bic.w	r2, r2, #16
 8001910:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f003 020f 	and.w	r2, r3, #15
 800191e:	4613      	mov	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	3304      	adds	r3, #4
 8001930:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	0c5b      	lsrs	r3, r3, #17
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	2b02      	cmp	r3, #2
 800193c:	d124      	bne.n	8001988 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d035      	beq.n	80019b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001958:	b29b      	uxth	r3, r3
 800195a:	461a      	mov	r2, r3
 800195c:	6a38      	ldr	r0, [r7, #32]
 800195e:	f003 fa75 	bl	8004e4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	691a      	ldr	r2, [r3, #16]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800196e:	441a      	add	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001980:	441a      	add	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	621a      	str	r2, [r3, #32]
 8001986:	e016      	b.n	80019b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	0c5b      	lsrs	r3, r3, #17
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	2b06      	cmp	r3, #6
 8001992:	d110      	bne.n	80019b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800199a:	2208      	movs	r2, #8
 800199c:	4619      	mov	r1, r3
 800199e:	6a38      	ldr	r0, [r7, #32]
 80019a0:	f003 fa54 	bl	8004e4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	6a1a      	ldr	r2, [r3, #32]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	091b      	lsrs	r3, r3, #4
 80019ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b0:	441a      	add	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0210 	orr.w	r2, r2, #16
 80019c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f003 fbd2 	bl	8005174 <USB_ReadInterrupts>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019da:	f040 80a7 	bne.w	8001b2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fbd7 	bl	800519a <USB_ReadDevAllOutEpInterrupt>
 80019ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80019ee:	e099      	b.n	8001b24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 808e 	beq.w	8001b18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 fbfb 	bl	8005202 <USB_ReadDevOutEPInterrupt>
 8001a0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00c      	beq.n	8001a32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	015a      	lsls	r2, r3, #5
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	4413      	add	r3, r2
 8001a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a24:	461a      	mov	r2, r3
 8001a26:	2301      	movs	r3, #1
 8001a28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fec3 	bl	80027b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00c      	beq.n	8001a56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 ff99 	bl	8002988 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2310      	movs	r3, #16
 8001a70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d030      	beq.n	8001ade <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a84:	2b80      	cmp	r3, #128	; 0x80
 8001a86:	d109      	bne.n	8001a9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	3304      	adds	r3, #4
 8001ab0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	78db      	ldrb	r3, [r3, #3]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f005 ff96 	bl	80079f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad8:	461a      	mov	r2, r3
 8001ada:	2302      	movs	r3, #2
 8001adc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0320 	and.w	r3, r3, #32
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d008      	beq.n	8001afa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af4:	461a      	mov	r2, r3
 8001af6:	2320      	movs	r3, #32
 8001af8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	015a      	lsls	r2, r3, #5
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b10:	461a      	mov	r2, r3
 8001b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	085b      	lsrs	r3, r3, #1
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f47f af62 	bne.w	80019f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f003 fb1f 	bl	8005174 <USB_ReadInterrupts>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b40:	f040 80db 	bne.w	8001cfa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fb40 	bl	80051ce <USB_ReadDevAllInEpInterrupt>
 8001b4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b54:	e0cd      	b.n	8001cf2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80c2 	beq.w	8001ce6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 fb66 	bl	800523e <USB_ReadDevInEPInterrupt>
 8001b72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d057      	beq.n	8001c2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2201      	movs	r2, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69f9      	ldr	r1, [r7, #28]
 8001b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	015a      	lsls	r2, r3, #5
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	4413      	add	r3, r2
 8001baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d132      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	334c      	adds	r3, #76	; 0x4c
 8001bcc:	6819      	ldr	r1, [r3, #0]
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4403      	add	r3, r0
 8001bdc:	3348      	adds	r3, #72	; 0x48
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4419      	add	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4403      	add	r3, r0
 8001bf0:	334c      	adds	r3, #76	; 0x4c
 8001bf2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d113      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x3a2>
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	440b      	add	r3, r1
 8001c08:	3354      	adds	r3, #84	; 0x54
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	f003 fb6d 	bl	80052fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4619      	mov	r1, r3
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f005 fe60 	bl	80078ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	015a      	lsls	r2, r3, #5
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	4413      	add	r3, r2
 8001c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c44:	461a      	mov	r2, r3
 8001c46:	2308      	movs	r3, #8
 8001c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d008      	beq.n	8001c66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c60:	461a      	mov	r2, r3
 8001c62:	2310      	movs	r3, #16
 8001c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2340      	movs	r3, #64	; 0x40
 8001c80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d023      	beq.n	8001cd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c8e:	6a38      	ldr	r0, [r7, #32]
 8001c90:	f002 fa4e 	bl	8004130 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3338      	adds	r3, #56	; 0x38
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	78db      	ldrb	r3, [r3, #3]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d108      	bne.n	8001cc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f005 fead 	bl	8007a1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fcdb 	bl	800269c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	3301      	adds	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f47f af2e 	bne.w	8001b56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fa38 	bl	8005174 <USB_ReadInterrupts>
 8001d04:	4603      	mov	r3, r0
 8001d06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d0e:	d122      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d108      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fec3 	bl	8002ac4 <HAL_PCDEx_LPM_Callback>
 8001d3e:	e002      	b.n	8001d46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f005 fe4b 	bl	80079dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fa0a 	bl	8005174 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d6a:	d112      	bne.n	8001d92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d102      	bne.n	8001d82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f005 fe07 	bl	8007990 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001d90:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 f9ec 	bl	8005174 <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001da6:	f040 80b7 	bne.w	8001f18 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	69fa      	ldr	r2, [r7, #28]
 8001db4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 f9b3 	bl	8004130 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	e046      	b.n	8001e5e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001de2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df4:	0151      	lsls	r1, r2, #5
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	440a      	add	r2, r1
 8001dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e10:	461a      	mov	r2, r3
 8001e12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e28:	0151      	lsls	r1, r2, #5
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	440a      	add	r2, r1
 8001e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e48:	0151      	lsls	r1, r2, #5
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	440a      	add	r2, r1
 8001e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001e52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d3b3      	bcc.n	8001dd0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e76:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001e7a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d016      	beq.n	8001eb2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e94:	f043 030b 	orr.w	r3, r3, #11
 8001e98:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eaa:	f043 030b 	orr.w	r3, r3, #11
 8001eae:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb0:	e015      	b.n	8001ede <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ec0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ec4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ec8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ed8:	f043 030b 	orr.w	r3, r3, #11
 8001edc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001eec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ef0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f02:	461a      	mov	r2, r3
 8001f04:	f003 f9fa 	bl	80052fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695a      	ldr	r2, [r3, #20]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001f16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f003 f929 	bl	8005174 <USB_ReadInterrupts>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f2c:	d124      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f9bf 	bl	80052b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f002 f974 	bl	800422a <USB_GetDevSpeed>
 8001f42:	4603      	mov	r3, r0
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681c      	ldr	r4, [r3, #0]
 8001f4e:	f001 fa29 	bl	80033a4 <HAL_RCC_GetHCLKFreq>
 8001f52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f001 fe73 	bl	8003c48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f005 fceb 	bl	800793e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 f8f9 	bl	8005174 <USB_ReadInterrupts>
 8001f82:	4603      	mov	r3, r0
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f005 fcc8 	bl	8007922 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f002 0208 	and.w	r2, r2, #8
 8001fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 f8e4 	bl	8005174 <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	d122      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	e014      	b.n	8001ff2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fb27 	bl	800263a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	3301      	adds	r3, #1
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d3e5      	bcc.n	8001fc8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f003 f8b7 	bl	8005174 <USB_ReadInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002010:	d13b      	bne.n	800208a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002012:	2301      	movs	r3, #1
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e02b      	b.n	8002070 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3340      	adds	r3, #64	; 0x40
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d115      	bne.n	800206a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800203e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	da12      	bge.n	800206a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002048:	4613      	mov	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	333f      	adds	r3, #63	; 0x3f
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fae8 	bl	800263a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002076:	429a      	cmp	r2, r3
 8002078:	d3ce      	bcc.n	8002018 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695a      	ldr	r2, [r3, #20]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f003 f870 	bl	8005174 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800209a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800209e:	d155      	bne.n	800214c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020a0:	2301      	movs	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
 80020a4:	e045      	b.n	8002132 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d12e      	bne.n	800212c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da2b      	bge.n	800212c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80020e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d121      	bne.n	800212c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002128:	6053      	str	r3, [r2, #4]
            break;
 800212a:	e007      	b.n	800213c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	3301      	adds	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	429a      	cmp	r2, r3
 800213a:	d3b4      	bcc.n	80020a6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800214a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f003 f80f 	bl	8005174 <USB_ReadInterrupts>
 8002156:	4603      	mov	r3, r0
 8002158:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d10a      	bne.n	8002178 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f005 fc6c 	bl	8007a40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002176:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f002 fff9 	bl	8005174 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b04      	cmp	r3, #4
 800218a:	d115      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f005 fc5c 	bl	8007a5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	e000      	b.n	80021b8 <HAL_PCD_IRQHandler+0x938>
      return;
 80021b6:	bf00      	nop
    }
  }
}
 80021b8:	3734      	adds	r7, #52	; 0x34
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}

080021be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b082      	sub	sp, #8
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_PCD_SetAddress+0x1a>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e013      	b.n	8002200 <HAL_PCD_SetAddress+0x42>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 ff57 	bl	80050a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	4608      	mov	r0, r1
 8002212:	4611      	mov	r1, r2
 8002214:	461a      	mov	r2, r3
 8002216:	4603      	mov	r3, r0
 8002218:	70fb      	strb	r3, [r7, #3]
 800221a:	460b      	mov	r3, r1
 800221c:	803b      	strh	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800222a:	2b00      	cmp	r3, #0
 800222c:	da0f      	bge.n	800224e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	3338      	adds	r3, #56	; 0x38
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	3304      	adds	r3, #4
 8002244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	705a      	strb	r2, [r3, #1]
 800224c:	e00f      	b.n	800226e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	f003 020f 	and.w	r2, r3, #15
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	4413      	add	r3, r2
 8002264:	3304      	adds	r3, #4
 8002266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800227a:	883a      	ldrh	r2, [r7, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	78ba      	ldrb	r2, [r7, #2]
 8002284:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	785b      	ldrb	r3, [r3, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002298:	78bb      	ldrb	r3, [r7, #2]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d102      	bne.n	80022a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_PCD_EP_Open+0xaa>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e00e      	b.n	80022d0 <HAL_PCD_EP_Open+0xc8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68f9      	ldr	r1, [r7, #12]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f001 ffd7 	bl	8004274 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80022ce:	7afb      	ldrb	r3, [r7, #11]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	da0f      	bge.n	800230c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	f003 020f 	and.w	r2, r3, #15
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	4413      	add	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	3338      	adds	r3, #56	; 0x38
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	3304      	adds	r3, #4
 8002302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	705a      	strb	r2, [r3, #1]
 800230a:	e00f      	b.n	800232c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	f003 020f 	and.w	r2, r3, #15
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_PCD_EP_Close+0x6e>
 8002342:	2302      	movs	r3, #2
 8002344:	e00e      	b.n	8002364 <HAL_PCD_EP_Close+0x8c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	4618      	mov	r0, r3
 8002356:	f002 f815 	bl	8004384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	460b      	mov	r3, r1
 800237a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	f003 020f 	and.w	r2, r3, #15
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4413      	add	r3, r2
 8002392:	3304      	adds	r3, #4
 8002394:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2200      	movs	r2, #0
 80023ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ae:	7afb      	ldrb	r3, [r7, #11]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	6979      	ldr	r1, [r7, #20]
 80023e0:	f002 faf4 	bl	80049cc <USB_EP0StartXfer>
 80023e4:	e008      	b.n	80023f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	6979      	ldr	r1, [r7, #20]
 80023f4:	f002 f8a2 	bl	800453c <USB_EPStartXfer>
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	f003 020f 	and.w	r2, r3, #15
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002424:	681b      	ldr	r3, [r3, #0]
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
 800243e:	460b      	mov	r3, r1
 8002440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002442:	7afb      	ldrb	r3, [r7, #11]
 8002444:	f003 020f 	and.w	r2, r3, #15
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	3338      	adds	r3, #56	; 0x38
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2201      	movs	r2, #1
 8002470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	b2da      	uxtb	r2, r3
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d102      	bne.n	800248c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800248c:	7afb      	ldrb	r3, [r7, #11]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	2b00      	cmp	r3, #0
 8002494:	d109      	bne.n	80024aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	6979      	ldr	r1, [r7, #20]
 80024a4:	f002 fa92 	bl	80049cc <USB_EP0StartXfer>
 80024a8:	e008      	b.n	80024bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	6979      	ldr	r1, [r7, #20]
 80024b8:	f002 f840 	bl	800453c <USB_EPStartXfer>
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	f003 020f 	and.w	r2, r3, #15
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d901      	bls.n	80024e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e050      	b.n	8002586 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	da0f      	bge.n	800250c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	f003 020f 	and.w	r2, r3, #15
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	3338      	adds	r3, #56	; 0x38
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2201      	movs	r2, #1
 8002508:	705a      	strb	r2, [r3, #1]
 800250a:	e00d      	b.n	8002528 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	3304      	adds	r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2201      	movs	r2, #1
 800252c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_PCD_EP_SetStall+0x82>
 8002544:	2302      	movs	r3, #2
 8002546:	e01e      	b.n	8002586 <HAL_PCD_EP_SetStall+0xc0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fcd0 	bl	8004efc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10a      	bne.n	800257c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	b2d9      	uxtb	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002576:	461a      	mov	r2, r3
 8002578:	f002 fec0 	bl	80052fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	460b      	mov	r3, r1
 8002598:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f003 020f 	and.w	r2, r3, #15
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d901      	bls.n	80025ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e042      	b.n	8002632 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da0f      	bge.n	80025d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	f003 020f 	and.w	r2, r3, #15
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	3338      	adds	r3, #56	; 0x38
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	3304      	adds	r3, #4
 80025ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	705a      	strb	r2, [r3, #1]
 80025d2:	e00f      	b.n	80025f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	f003 020f 	and.w	r2, r3, #15
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_PCD_EP_ClrStall+0x86>
 8002610:	2302      	movs	r3, #2
 8002612:	e00e      	b.n	8002632 <HAL_PCD_EP_ClrStall+0xa4>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 fcd8 	bl	8004fd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800264a:	2b00      	cmp	r3, #0
 800264c:	da0c      	bge.n	8002668 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 020f 	and.w	r2, r3, #15
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	3338      	adds	r3, #56	; 0x38
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	3304      	adds	r3, #4
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	e00c      	b.n	8002682 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002668:	78fb      	ldrb	r3, [r7, #3]
 800266a:	f003 020f 	and.w	r2, r3, #15
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68f9      	ldr	r1, [r7, #12]
 8002688:	4618      	mov	r0, r3
 800268a:	f002 faf7 	bl	8004c7c <USB_EPStopXfer>
 800268e:	4603      	mov	r3, r0
 8002690:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002692:	7afb      	ldrb	r3, [r7, #11]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3338      	adds	r3, #56	; 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a1a      	ldr	r2, [r3, #32]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d901      	bls.n	80026d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e06c      	b.n	80027ae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d902      	bls.n	80026f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	3303      	adds	r3, #3
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026f8:	e02b      	b.n	8002752 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	d902      	bls.n	8002716 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3303      	adds	r3, #3
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	b2da      	uxtb	r2, r3
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800272e:	b2db      	uxtb	r3, r3
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	4603      	mov	r3, r0
 8002734:	6978      	ldr	r0, [r7, #20]
 8002736:	f002 fb4b 	bl	8004dd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	691a      	ldr	r2, [r3, #16]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	441a      	add	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a1a      	ldr	r2, [r3, #32]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	441a      	add	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	429a      	cmp	r2, r3
 8002766:	d809      	bhi.n	800277c <PCD_WriteEmptyTxFifo+0xe0>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1a      	ldr	r2, [r3, #32]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002770:	429a      	cmp	r2, r3
 8002772:	d203      	bcs.n	800277c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1be      	bne.n	80026fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	429a      	cmp	r2, r3
 8002786:	d811      	bhi.n	80027ac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	2201      	movs	r2, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800279c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	6939      	ldr	r1, [r7, #16]
 80027a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027a8:	4013      	ands	r3, r2
 80027aa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	333c      	adds	r3, #60	; 0x3c
 80027d0:	3304      	adds	r3, #4
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d17b      	bne.n	80028e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d015      	beq.n	8002824 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4a61      	ldr	r2, [pc, #388]	; (8002980 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	f240 80b9 	bls.w	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80b3 	beq.w	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281a:	461a      	mov	r2, r3
 800281c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002820:	6093      	str	r3, [r2, #8]
 8002822:	e0a7      	b.n	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283a:	461a      	mov	r2, r3
 800283c:	2320      	movs	r3, #32
 800283e:	6093      	str	r3, [r2, #8]
 8002840:	e098      	b.n	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002848:	2b00      	cmp	r3, #0
 800284a:	f040 8093 	bne.w	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d90f      	bls.n	8002876 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	4413      	add	r3, r2
 8002868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800286c:	461a      	mov	r2, r3
 800286e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002872:	6093      	str	r3, [r2, #8]
 8002874:	e07e      	b.n	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	0159      	lsls	r1, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	440b      	add	r3, r1
 8002898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d114      	bne.n	80028d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028c0:	461a      	mov	r2, r3
 80028c2:	2101      	movs	r1, #1
 80028c4:	f002 fd1a 	bl	80052fc <USB_EP0_OutStart>
 80028c8:	e006      	b.n	80028d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	441a      	add	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f004 ffea 	bl	80078b8 <HAL_PCD_DataOutStageCallback>
 80028e4:	e046      	b.n	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	4a26      	ldr	r2, [pc, #152]	; (8002984 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d124      	bne.n	8002938 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002904:	461a      	mov	r2, r3
 8002906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290a:	6093      	str	r3, [r2, #8]
 800290c:	e032      	b.n	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	461a      	mov	r2, r3
 8002926:	2320      	movs	r3, #32
 8002928:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	4619      	mov	r1, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f004 ffc1 	bl	80078b8 <HAL_PCD_DataOutStageCallback>
 8002936:	e01d      	b.n	8002974 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d114      	bne.n	8002968 <PCD_EP_OutXfrComplete_int+0x1b0>
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d108      	bne.n	8002968 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002960:	461a      	mov	r2, r3
 8002962:	2100      	movs	r1, #0
 8002964:	f002 fcca 	bl	80052fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4619      	mov	r1, r3
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f004 ffa2 	bl	80078b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	4f54300a 	.word	0x4f54300a
 8002984:	4f54310a 	.word	0x4f54310a

08002988 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	333c      	adds	r3, #60	; 0x3c
 80029a0:	3304      	adds	r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <PCD_EP_OutSetupPacket_int+0x88>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d90e      	bls.n	80029dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d4:	461a      	mov	r2, r3
 80029d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f004 ff59 	bl	8007894 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <PCD_EP_OutSetupPacket_int+0x88>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d90c      	bls.n	8002a04 <PCD_EP_OutSetupPacket_int+0x7c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029fc:	461a      	mov	r2, r3
 80029fe:	2101      	movs	r1, #1
 8002a00:	f002 fc7c 	bl	80052fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	4f54300a 	.word	0x4f54300a

08002a14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	70fb      	strb	r3, [r7, #3]
 8002a20:	4613      	mov	r3, r2
 8002a22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a32:	883b      	ldrh	r3, [r7, #0]
 8002a34:	0419      	lsls	r1, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a40:	e028      	b.n	8002a94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e00d      	b.n	8002a72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	3340      	adds	r3, #64	; 0x40
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4413      	add	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d3ec      	bcc.n	8002a56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a7c:	883b      	ldrh	r3, [r7, #0]
 8002a7e:	0418      	lsls	r0, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	4302      	orrs	r2, r0
 8002a8c:	3340      	adds	r3, #64	; 0x40
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e267      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d075      	beq.n	8002be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d00c      	beq.n	8002b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b06:	4b85      	ldr	r3, [pc, #532]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d112      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b12:	4b82      	ldr	r3, [pc, #520]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1e:	d10b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d05b      	beq.n	8002be4 <HAL_RCC_OscConfig+0x108>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d157      	bne.n	8002be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e242      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d106      	bne.n	8002b50 <HAL_RCC_OscConfig+0x74>
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e01d      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x98>
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a6f      	ldr	r2, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0xb0>
 8002b74:	4b69      	ldr	r3, [pc, #420]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a68      	ldr	r2, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b94:	f7fe fa2e 	bl	8000ff4 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fa2a 	bl	8000ff4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e207      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b5b      	ldr	r3, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0xc0>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbc:	f7fe fa1a 	bl	8000ff4 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc4:	f7fe fa16 	bl	8000ff4 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	; 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1f3      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1f0      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xe8>
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d063      	beq.n	8002cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d11c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b44      	ldr	r3, [pc, #272]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d116      	bne.n	8002c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d001      	beq.n	8002c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e1c7      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4937      	ldr	r1, [pc, #220]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	e03a      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe f9cf 	bl	8000ff4 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe f9cb 	bl	8000ff4 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1a8      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4925      	ldr	r1, [pc, #148]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	600b      	str	r3, [r1, #0]
 8002c8c:	e015      	b.n	8002cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x244>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe f9ae 	bl	8000ff4 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9c:	f7fe f9aa 	bl	8000ff4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e187      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	4b1b      	ldr	r3, [pc, #108]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d036      	beq.n	8002d34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f98e 	bl	8000ff4 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cdc:	f7fe f98a 	bl	8000ff4 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e167      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x240>)
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x200>
 8002cfa:	e01b      	b.n	8002d34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_OscConfig+0x248>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe f977 	bl	8000ff4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d08:	e00e      	b.n	8002d28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7fe f973 	bl	8000ff4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d907      	bls.n	8002d28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e150      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	42470000 	.word	0x42470000
 8002d24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d28:	4b88      	ldr	r3, [pc, #544]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1ea      	bne.n	8002d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8097 	beq.w	8002e70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d46:	4b81      	ldr	r3, [pc, #516]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d10f      	bne.n	8002d72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	4b7d      	ldr	r3, [pc, #500]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a7c      	ldr	r2, [pc, #496]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d72:	4b77      	ldr	r3, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d118      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7e:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a73      	ldr	r2, [pc, #460]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d8a:	f7fe f933 	bl	8000ff4 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d92:	f7fe f92f 	bl	8000ff4 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e10c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da4:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x474>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f0      	beq.n	8002d92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x2ea>
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	4a63      	ldr	r2, [pc, #396]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc4:	e01c      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x30c>
 8002dce:	4b5f      	ldr	r3, [pc, #380]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a5e      	ldr	r2, [pc, #376]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dd4:	f043 0304 	orr.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dda:	4b5c      	ldr	r3, [pc, #368]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	4a5b      	ldr	r2, [pc, #364]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70
 8002de6:	e00b      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
 8002de8:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a57      	ldr	r2, [pc, #348]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	4a54      	ldr	r2, [pc, #336]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d015      	beq.n	8002e34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e08:	f7fe f8f4 	bl	8000ff4 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e10:	f7fe f8f0 	bl	8000ff4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e0cb      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0ee      	beq.n	8002e10 <HAL_RCC_OscConfig+0x334>
 8002e32:	e014      	b.n	8002e5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e34:	f7fe f8de 	bl	8000ff4 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fe f8da 	bl	8000ff4 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0b5      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e52:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1ee      	bne.n	8002e3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a1 	beq.w	8002fbc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e7a:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d05c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d141      	bne.n	8002f12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe f8ae 	bl	8000ff4 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9c:	f7fe f8aa 	bl	8000ff4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e087      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eae:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69da      	ldr	r2, [r3, #28]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	019b      	lsls	r3, r3, #6
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	041b      	lsls	r3, r3, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	061b      	lsls	r3, r3, #24
 8002ede:	491b      	ldr	r1, [pc, #108]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eea:	f7fe f883 	bl	8000ff4 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef2:	f7fe f87f 	bl	8000ff4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e05c      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x416>
 8002f10:	e054      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f12:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <HAL_RCC_OscConfig+0x478>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe f86c 	bl	8000ff4 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe f868 	bl	8000ff4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e045      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <HAL_RCC_OscConfig+0x470>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x444>
 8002f3e:	e03d      	b.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e038      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40007000 	.word	0x40007000
 8002f54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_OscConfig+0x4ec>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d028      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d121      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0cc      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b68      	ldr	r3, [pc, #416]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d90c      	bls.n	8003008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b65      	ldr	r3, [pc, #404]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b63      	ldr	r3, [pc, #396]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b8      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d020      	beq.n	8003056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800302a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d005      	beq.n	8003044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003038:	4b53      	ldr	r3, [pc, #332]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003044:	4b50      	ldr	r3, [pc, #320]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	494d      	ldr	r1, [pc, #308]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	4313      	orrs	r3, r2
 8003054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d044      	beq.n	80030ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d107      	bne.n	800307a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	4b47      	ldr	r3, [pc, #284]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d119      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e07f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d003      	beq.n	800308a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003086:	2b03      	cmp	r3, #3
 8003088:	d107      	bne.n	800309a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800308a:	4b3f      	ldr	r3, [pc, #252]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309a:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e067      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030aa:	4b37      	ldr	r3, [pc, #220]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0203 	bic.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4934      	ldr	r1, [pc, #208]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030bc:	f7fd ff9a 	bl	8000ff4 <HAL_GetTick>
 80030c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	e00a      	b.n	80030da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c4:	f7fd ff96 	bl	8000ff4 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e04f      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 020c 	and.w	r2, r3, #12
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1eb      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030ec:	4b25      	ldr	r3, [pc, #148]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d20c      	bcs.n	8003114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e032      	b.n	800317a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003120:	4b19      	ldr	r3, [pc, #100]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4916      	ldr	r1, [pc, #88]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	490e      	ldr	r1, [pc, #56]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	4313      	orrs	r3, r2
 8003150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003152:	f000 f821 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b0b      	ldr	r3, [pc, #44]	; (8003188 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	490a      	ldr	r1, [pc, #40]	; (800318c <HAL_RCC_ClockConfig+0x1c0>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c4>)
 800316c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_RCC_ClockConfig+0x1c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fd fefa 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023c00 	.word	0x40023c00
 8003188:	40023800 	.word	0x40023800
 800318c:	08008870 	.word	0x08008870
 8003190:	20000004 	.word	0x20000004
 8003194:	20000008 	.word	0x20000008

08003198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800319c:	b094      	sub	sp, #80	; 0x50
 800319e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	2300      	movs	r3, #0
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	2300      	movs	r3, #0
 80031aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b0:	4b79      	ldr	r3, [pc, #484]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d00d      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x40>
 80031bc:	2b08      	cmp	r3, #8
 80031be:	f200 80e1 	bhi.w	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_RCC_GetSysClockFreq+0x34>
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d003      	beq.n	80031d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031ca:	e0db      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031cc:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 80031ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031d0:	e0db      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031d2:	4b73      	ldr	r3, [pc, #460]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80031d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d6:	e0d8      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d8:	4b6f      	ldr	r3, [pc, #444]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	099b      	lsrs	r3, r3, #6
 80031f4:	2200      	movs	r2, #0
 80031f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003200:	633b      	str	r3, [r7, #48]	; 0x30
 8003202:	2300      	movs	r3, #0
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
 8003206:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4621      	mov	r1, r4
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	6139      	str	r1, [r7, #16]
 8003228:	4629      	mov	r1, r5
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800323c:	4659      	mov	r1, fp
 800323e:	018b      	lsls	r3, r1, #6
 8003240:	4651      	mov	r1, sl
 8003242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003246:	4651      	mov	r1, sl
 8003248:	018a      	lsls	r2, r1, #6
 800324a:	4651      	mov	r1, sl
 800324c:	ebb2 0801 	subs.w	r8, r2, r1
 8003250:	4659      	mov	r1, fp
 8003252:	eb63 0901 	sbc.w	r9, r3, r1
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800326a:	4690      	mov	r8, r2
 800326c:	4699      	mov	r9, r3
 800326e:	4623      	mov	r3, r4
 8003270:	eb18 0303 	adds.w	r3, r8, r3
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	462b      	mov	r3, r5
 8003278:	eb49 0303 	adc.w	r3, r9, r3
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800328a:	4629      	mov	r1, r5
 800328c:	024b      	lsls	r3, r1, #9
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003294:	4621      	mov	r1, r4
 8003296:	024a      	lsls	r2, r1, #9
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a8:	f7fc ffea 	bl	8000280 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b4:	e058      	b.n	8003368 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	2200      	movs	r2, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	4611      	mov	r1, r2
 80032c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032c6:	623b      	str	r3, [r7, #32]
 80032c8:	2300      	movs	r3, #0
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
 80032cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032d0:	4642      	mov	r2, r8
 80032d2:	464b      	mov	r3, r9
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	0159      	lsls	r1, r3, #5
 80032de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032e2:	0150      	lsls	r0, r2, #5
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4641      	mov	r1, r8
 80032ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003300:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003304:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003308:	ebb2 040a 	subs.w	r4, r2, sl
 800330c:	eb63 050b 	sbc.w	r5, r3, fp
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	00eb      	lsls	r3, r5, #3
 800331a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331e:	00e2      	lsls	r2, r4, #3
 8003320:	4614      	mov	r4, r2
 8003322:	461d      	mov	r5, r3
 8003324:	4643      	mov	r3, r8
 8003326:	18e3      	adds	r3, r4, r3
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	464b      	mov	r3, r9
 800332c:	eb45 0303 	adc.w	r3, r5, r3
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333e:	4629      	mov	r1, r5
 8003340:	028b      	lsls	r3, r1, #10
 8003342:	4621      	mov	r1, r4
 8003344:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003348:	4621      	mov	r1, r4
 800334a:	028a      	lsls	r2, r1, #10
 800334c:	4610      	mov	r0, r2
 800334e:	4619      	mov	r1, r3
 8003350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003352:	2200      	movs	r2, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	61fa      	str	r2, [r7, #28]
 8003358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335c:	f7fc ff90 	bl	8000280 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_GetSysClockFreq+0x200>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	3301      	adds	r3, #1
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800337a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003380:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003382:	e002      	b.n	800338a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetSysClockFreq+0x204>)
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800338a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800338c:	4618      	mov	r0, r3
 800338e:	3750      	adds	r7, #80	; 0x50
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	00f42400 	.word	0x00f42400
 80033a0:	007a1200 	.word	0x007a1200

080033a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000004 	.word	0x20000004

080033bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d035      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033e4:	4b62      	ldr	r3, [pc, #392]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033ea:	f7fd fe03 	bl	8000ff4 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033f2:	f7fd fdff 	bl	8000ff4 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0b0      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003404:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1f0      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	019a      	lsls	r2, r3, #6
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	071b      	lsls	r3, r3, #28
 800341c:	4955      	ldr	r1, [pc, #340]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003424:	4b52      	ldr	r3, [pc, #328]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003426:	2201      	movs	r2, #1
 8003428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800342a:	f7fd fde3 	bl	8000ff4 <HAL_GetTick>
 800342e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003432:	f7fd fddf 	bl	8000ff4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e090      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003444:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0f0      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8083 	beq.w	8003564 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b44      	ldr	r3, [pc, #272]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a43      	ldr	r2, [pc, #268]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003486:	f7fd fdb5 	bl	8000ff4 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fd fdb1 	bl	8000ff4 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e062      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034a0:	4b35      	ldr	r3, [pc, #212]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ac:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02f      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d028      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034d4:	4b29      	ldr	r3, [pc, #164]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034da:	4b28      	ldr	r3, [pc, #160]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d114      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80034f2:	f7fd fd7f 	bl	8000ff4 <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fd fd7b 	bl	8000ff4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e02a      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003524:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003528:	d10d      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800353a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353e:	490d      	ldr	r1, [pc, #52]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003540:	4313      	orrs	r3, r2
 8003542:	608b      	str	r3, [r1, #8]
 8003544:	e005      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800354c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003550:	6093      	str	r3, [r2, #8]
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003554:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800355e:	4905      	ldr	r1, [pc, #20]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	42470068 	.word	0x42470068
 8003574:	40023800 	.word	0x40023800
 8003578:	40007000 	.word	0x40007000
 800357c:	42470e40 	.word	0x42470e40

08003580 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e066      	b.n	8003664 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7f5b      	ldrb	r3, [r3, #29]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fd fbe6 	bl	8000d78 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	22ca      	movs	r2, #202	; 0xca
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2253      	movs	r2, #83	; 0x53
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fa49 	bl	8003a5a <RTC_EnterInitMode>
 80035c8:	4603      	mov	r3, r0
 80035ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d12c      	bne.n	800362c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80035e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68d2      	ldr	r2, [r2, #12]
 800360c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6919      	ldr	r1, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	041a      	lsls	r2, r3, #16
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa50 	bl	8003ac8 <RTC_ExitInitMode>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d113      	bne.n	800365a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	7f1b      	ldrb	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_RTC_SetTime+0x1c>
 8003684:	2302      	movs	r3, #2
 8003686:	e087      	b.n	8003798 <HAL_RTC_SetTime+0x12c>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2202      	movs	r2, #2
 8003692:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d126      	bne.n	80036e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fa2d 	bl	8003b12 <RTC_ByteToBcd2>
 80036b8:	4603      	mov	r3, r0
 80036ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	785b      	ldrb	r3, [r3, #1]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fa26 	bl	8003b12 <RTC_ByteToBcd2>
 80036c6:	4603      	mov	r3, r0
 80036c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80036ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	789b      	ldrb	r3, [r3, #2]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fa1e 	bl	8003b12 <RTC_ByteToBcd2>
 80036d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80036d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e018      	b.n	800371a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2200      	movs	r2, #0
 80036fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003708:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800370e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	78db      	ldrb	r3, [r3, #3]
 8003714:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	22ca      	movs	r2, #202	; 0xca
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2253      	movs	r2, #83	; 0x53
 8003728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f995 	bl	8003a5a <RTC_EnterInitMode>
 8003730:	4603      	mov	r3, r0
 8003732:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d120      	bne.n	800377c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003744:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003748:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003758:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6899      	ldr	r1, [r3, #8]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	431a      	orrs	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f9a8 	bl	8003ac8 <RTC_ExitInitMode>
 8003778:	4603      	mov	r3, r0
 800377a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	22ff      	movs	r2, #255	; 0xff
 800378e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	771a      	strb	r2, [r3, #28]

  return status;
 8003796:	7cfb      	ldrb	r3, [r7, #19]
}
 8003798:	4618      	mov	r0, r3
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}

080037a0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	0c1b      	lsrs	r3, r3, #16
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	0a1b      	lsrs	r3, r3, #8
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	0d9b      	lsrs	r3, r3, #22
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d11a      	bne.n	8003852 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f993 	bl	8003b4c <RTC_Bcd2ToByte>
 8003826:	4603      	mov	r3, r0
 8003828:	461a      	mov	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f98a 	bl	8003b4c <RTC_Bcd2ToByte>
 8003838:	4603      	mov	r3, r0
 800383a:	461a      	mov	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	789b      	ldrb	r3, [r3, #2]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f981 	bl	8003b4c <RTC_Bcd2ToByte>
 800384a:	4603      	mov	r3, r0
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	7f1b      	ldrb	r3, [r3, #28]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_RTC_SetDate+0x1c>
 8003874:	2302      	movs	r3, #2
 8003876:	e072      	b.n	800395e <HAL_RTC_SetDate+0x102>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2202      	movs	r2, #2
 8003882:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10e      	bne.n	80038a8 <HAL_RTC_SetDate+0x4c>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d008      	beq.n	80038a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	785b      	ldrb	r3, [r3, #1]
 800389a:	f023 0310 	bic.w	r3, r3, #16
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	330a      	adds	r3, #10
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11d      	bne.n	80038ea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	889b      	ldrh	r3, [r3, #4]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f92c 	bl	8003b12 <RTC_ByteToBcd2>
 80038ba:	4603      	mov	r3, r0
 80038bc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	785b      	ldrb	r3, [r3, #1]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f925 	bl	8003b12 <RTC_ByteToBcd2>
 80038c8:	4603      	mov	r3, r0
 80038ca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038cc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	789b      	ldrb	r3, [r3, #2]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f91d 	bl	8003b12 <RTC_ByteToBcd2>
 80038d8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038da:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	e00e      	b.n	8003908 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	889b      	ldrh	r3, [r3, #4]
 80038ee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	785b      	ldrb	r3, [r3, #1]
 80038f4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80038f6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80038fc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	22ca      	movs	r2, #202	; 0xca
 800390e:	625a      	str	r2, [r3, #36]	; 0x24
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2253      	movs	r2, #83	; 0x53
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f89e 	bl	8003a5a <RTC_EnterInitMode>
 800391e:	4603      	mov	r3, r0
 8003920:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10c      	bne.n	8003942 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003932:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003936:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f8c5 	bl	8003ac8 <RTC_ExitInitMode>
 800393e:	4603      	mov	r3, r0
 8003940:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003942:	7cfb      	ldrb	r3, [r7, #19]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_RTC_SetDate+0xf2>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	22ff      	movs	r2, #255	; 0xff
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	771a      	strb	r2, [r3, #28]

  return status;
 800395c:	7cfb      	ldrb	r3, [r7, #19]
}
 800395e:	4618      	mov	r0, r3
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003980:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003984:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint16_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b29b      	uxth	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	b29a      	uxth	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	809a      	strh	r2, [r3, #4]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	0a1b      	lsrs	r3, r3, #8
 8003998:	b2db      	uxtb	r3, r3
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	0b5b      	lsrs	r3, r3, #13
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11b      	bne.n	8003a00 <HAL_RTC_GetDate+0x9a>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint16_t)RTC_Bcd2ToByte(sDate->Year);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	889b      	ldrh	r3, [r3, #4]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f8bc 	bl	8003b4c <RTC_Bcd2ToByte>
 80039d4:	4603      	mov	r3, r0
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	809a      	strh	r2, [r3, #4]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f8b3 	bl	8003b4c <RTC_Bcd2ToByte>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f8aa 	bl	8003b4c <RTC_Bcd2ToByte>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a24:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a26:	f7fd fae5 	bl	8000ff4 <HAL_GetTick>
 8003a2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a2c:	e009      	b.n	8003a42 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a2e:	f7fd fae1 	bl	8000ff4 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3c:	d901      	bls.n	8003a42 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e007      	b.n	8003a52 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0ee      	beq.n	8003a2e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d122      	bne.n	8003abe <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a88:	f7fd fab4 	bl	8000ff4 <HAL_GetTick>
 8003a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003a8e:	e00c      	b.n	8003aaa <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a90:	f7fd fab0 	bl	8000ff4 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a9e:	d904      	bls.n	8003aaa <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <RTC_EnterInitMode+0x64>
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d1e8      	bne.n	8003a90 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10a      	bne.n	8003b08 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff89 	bl	8003a0a <HAL_RTC_WaitForSynchro>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2204      	movs	r2, #4
 8003b02:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b085      	sub	sp, #20
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003b20:	e005      	b.n	8003b2e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	3301      	adds	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	3b0a      	subs	r3, #10
 8003b2c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d8f6      	bhi.n	8003b22 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	4413      	add	r3, r2
 8003b76:	b2db      	uxtb	r3, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b84:	b084      	sub	sp, #16
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
 8003b8e:	f107 001c 	add.w	r0, r7, #28
 8003b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d122      	bne.n	8003be2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f001 fbee 	bl	80053b8 <USB_CoreReset>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	73fb      	strb	r3, [r7, #15]
 8003be0:	e01a      	b.n	8003c18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f001 fbe2 	bl	80053b8 <USB_CoreReset>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
 8003c0a:	e005      	b.n	8003c18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10b      	bne.n	8003c36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f043 0206 	orr.w	r2, r3, #6
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c42:	b004      	add	sp, #16
 8003c44:	4770      	bx	lr
	...

08003c48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d165      	bne.n	8003d28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4a41      	ldr	r2, [pc, #260]	; (8003d64 <USB_SetTurnaroundTime+0x11c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d906      	bls.n	8003c72 <USB_SetTurnaroundTime+0x2a>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4a40      	ldr	r2, [pc, #256]	; (8003d68 <USB_SetTurnaroundTime+0x120>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d202      	bcs.n	8003c72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	e062      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4a3c      	ldr	r2, [pc, #240]	; (8003d68 <USB_SetTurnaroundTime+0x120>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d306      	bcc.n	8003c88 <USB_SetTurnaroundTime+0x40>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	4a3b      	ldr	r2, [pc, #236]	; (8003d6c <USB_SetTurnaroundTime+0x124>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d202      	bcs.n	8003c88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003c82:	230e      	movs	r3, #14
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e057      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <USB_SetTurnaroundTime+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d306      	bcc.n	8003c9e <USB_SetTurnaroundTime+0x56>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4a37      	ldr	r2, [pc, #220]	; (8003d70 <USB_SetTurnaroundTime+0x128>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d202      	bcs.n	8003c9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003c98:	230d      	movs	r3, #13
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e04c      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <USB_SetTurnaroundTime+0x128>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d306      	bcc.n	8003cb4 <USB_SetTurnaroundTime+0x6c>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4a32      	ldr	r2, [pc, #200]	; (8003d74 <USB_SetTurnaroundTime+0x12c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d802      	bhi.n	8003cb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cae:	230c      	movs	r3, #12
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e041      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a2f      	ldr	r2, [pc, #188]	; (8003d74 <USB_SetTurnaroundTime+0x12c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d906      	bls.n	8003cca <USB_SetTurnaroundTime+0x82>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a2e      	ldr	r2, [pc, #184]	; (8003d78 <USB_SetTurnaroundTime+0x130>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d802      	bhi.n	8003cca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003cc4:	230b      	movs	r3, #11
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e036      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a2a      	ldr	r2, [pc, #168]	; (8003d78 <USB_SetTurnaroundTime+0x130>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d906      	bls.n	8003ce0 <USB_SetTurnaroundTime+0x98>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4a29      	ldr	r2, [pc, #164]	; (8003d7c <USB_SetTurnaroundTime+0x134>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d802      	bhi.n	8003ce0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003cda:	230a      	movs	r3, #10
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e02b      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <USB_SetTurnaroundTime+0x134>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d906      	bls.n	8003cf6 <USB_SetTurnaroundTime+0xae>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a25      	ldr	r2, [pc, #148]	; (8003d80 <USB_SetTurnaroundTime+0x138>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d202      	bcs.n	8003cf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003cf0:	2309      	movs	r3, #9
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e020      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <USB_SetTurnaroundTime+0x138>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d306      	bcc.n	8003d0c <USB_SetTurnaroundTime+0xc4>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a20      	ldr	r2, [pc, #128]	; (8003d84 <USB_SetTurnaroundTime+0x13c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d802      	bhi.n	8003d0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d06:	2308      	movs	r3, #8
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e015      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <USB_SetTurnaroundTime+0x13c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d906      	bls.n	8003d22 <USB_SetTurnaroundTime+0xda>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <USB_SetTurnaroundTime+0x140>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d202      	bcs.n	8003d22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d1c:	2307      	movs	r3, #7
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e00a      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d22:	2306      	movs	r3, #6
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e007      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d102      	bne.n	8003d34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d2e:	2309      	movs	r3, #9
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	e001      	b.n	8003d38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d34:	2309      	movs	r3, #9
 8003d36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	029b      	lsls	r3, r3, #10
 8003d4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	00d8acbf 	.word	0x00d8acbf
 8003d68:	00e4e1c0 	.word	0x00e4e1c0
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	01067380 	.word	0x01067380
 8003d74:	011a499f 	.word	0x011a499f
 8003d78:	01312cff 	.word	0x01312cff
 8003d7c:	014ca43f 	.word	0x014ca43f
 8003d80:	016e3600 	.word	0x016e3600
 8003d84:	01a6ab1f 	.word	0x01a6ab1f
 8003d88:	01e84800 	.word	0x01e84800

08003d8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f043 0201 	orr.w	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f023 0201 	bic.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d115      	bne.n	8003e1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f7fd f904 	bl	800100c <HAL_Delay>
      ms++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3301      	adds	r3, #1
 8003e08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f001 fa45 	bl	800529a <USB_GetMode>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d01e      	beq.n	8003e54 <USB_SetCurrentMode+0x84>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b31      	cmp	r3, #49	; 0x31
 8003e1a:	d9f0      	bls.n	8003dfe <USB_SetCurrentMode+0x2e>
 8003e1c:	e01a      	b.n	8003e54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d115      	bne.n	8003e50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e30:	2001      	movs	r0, #1
 8003e32:	f7fd f8eb 	bl	800100c <HAL_Delay>
      ms++;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f001 fa2c 	bl	800529a <USB_GetMode>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <USB_SetCurrentMode+0x84>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b31      	cmp	r3, #49	; 0x31
 8003e4c:	d9f0      	bls.n	8003e30 <USB_SetCurrentMode+0x60>
 8003e4e:	e001      	b.n	8003e54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e005      	b.n	8003e60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b32      	cmp	r3, #50	; 0x32
 8003e58:	d101      	bne.n	8003e5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e68:	b084      	sub	sp, #16
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b086      	sub	sp, #24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	e009      	b.n	8003e9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	3340      	adds	r3, #64	; 0x40
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	2200      	movs	r2, #0
 8003e94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0e      	cmp	r3, #14
 8003ea0:	d9f2      	bls.n	8003e88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d11c      	bne.n	8003ee2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
 8003ee0:	e00b      	b.n	8003efa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f00:	461a      	mov	r2, r3
 8003f02:	2300      	movs	r3, #0
 8003f04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f14:	461a      	mov	r2, r3
 8003f16:	680b      	ldr	r3, [r1, #0]
 8003f18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10c      	bne.n	8003f3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f26:	2100      	movs	r1, #0
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f965 	bl	80041f8 <USB_SetDevSpeed>
 8003f2e:	e008      	b.n	8003f42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f30:	2101      	movs	r1, #1
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f960 	bl	80041f8 <USB_SetDevSpeed>
 8003f38:	e003      	b.n	8003f42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f95b 	bl	80041f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f42:	2110      	movs	r1, #16
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8f3 	bl	8004130 <USB_FlushTxFifo>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f91f 	bl	8004198 <USB_FlushRxFifo>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	461a      	mov	r2, r3
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	e043      	b.n	8004016 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa4:	d118      	bne.n	8003fd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	461a      	mov	r2, r3
 8003fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e013      	b.n	8003fea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	e008      	b.n	8003fea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	461a      	mov	r2, r3
 800400a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800400e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	3301      	adds	r3, #1
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d3b7      	bcc.n	8003f8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e043      	b.n	80040ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800403a:	d118      	bne.n	800406e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10a      	bne.n	8004058 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404e:	461a      	mov	r2, r3
 8004050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e013      	b.n	8004080 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e008      	b.n	8004080 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	2300      	movs	r3, #0
 800407e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	2300      	movs	r3, #0
 8004090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	461a      	mov	r2, r3
 80040a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	3301      	adds	r3, #1
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d3b7      	bcc.n	8004024 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f043 0210 	orr.w	r2, r3, #16
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <USB_DevInit+0x2c4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	f043 0208 	orr.w	r2, r3, #8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	2b01      	cmp	r3, #1
 800410a:	d107      	bne.n	800411c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004114:	f043 0304 	orr.w	r3, r3, #4
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800411c:	7dfb      	ldrb	r3, [r7, #23]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004128:	b004      	add	sp, #16
 800412a:	4770      	bx	lr
 800412c:	803c3800 	.word	0x803c3800

08004130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4a13      	ldr	r2, [pc, #76]	; (8004194 <USB_FlushTxFifo+0x64>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d901      	bls.n	8004150 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e01b      	b.n	8004188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	daf2      	bge.n	800413e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	019b      	lsls	r3, r3, #6
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <USB_FlushTxFifo+0x64>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e006      	b.n	8004188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b20      	cmp	r3, #32
 8004184:	d0f0      	beq.n	8004168 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3714      	adds	r7, #20
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	00030d40 	.word	0x00030d40

08004198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	3301      	adds	r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <USB_FlushRxFifo+0x5c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d901      	bls.n	80041b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e018      	b.n	80041e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	daf2      	bge.n	80041a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2210      	movs	r2, #16
 80041c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <USB_FlushRxFifo+0x5c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e006      	b.n	80041e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b10      	cmp	r3, #16
 80041e4:	d0f0      	beq.n	80041c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	00030d40 	.word	0x00030d40

080041f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	68f9      	ldr	r1, [r7, #12]
 8004214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004218:	4313      	orrs	r3, r2
 800421a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0306 	and.w	r3, r3, #6
 8004242:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]
 800424e:	e00a      	b.n	8004266 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d002      	beq.n	800425c <USB_GetDevSpeed+0x32>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d102      	bne.n	8004262 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800425c:	2302      	movs	r3, #2
 800425e:	75fb      	strb	r3, [r7, #23]
 8004260:	e001      	b.n	8004266 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004262:	230f      	movs	r3, #15
 8004264:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d13a      	bne.n	8004306 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	2101      	movs	r1, #1
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042ae:	4313      	orrs	r3, r2
 80042b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d155      	bne.n	8004374 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	791b      	ldrb	r3, [r3, #4]
 80042e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	059b      	lsls	r3, r3, #22
 80042ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042ec:	4313      	orrs	r3, r2
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	e036      	b.n	8004374 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	2101      	movs	r1, #1
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11a      	bne.n	8004374 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800435a:	430b      	orrs	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	0151      	lsls	r1, r2, #5
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	440a      	add	r2, r1
 8004366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004372:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	785b      	ldrb	r3, [r3, #1]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d161      	bne.n	8004464 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b6:	d11f      	bne.n	80043f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	f003 030f 	and.w	r3, r3, #15
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	b29b      	uxth	r3, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004418:	4013      	ands	r3, r2
 800441a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	f003 030f 	and.w	r3, r3, #15
 800442c:	2101      	movs	r1, #1
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	b29b      	uxth	r3, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	68f9      	ldr	r1, [r7, #12]
 8004438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800443c:	4013      	ands	r3, r2
 800443e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	0159      	lsls	r1, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	440b      	add	r3, r1
 8004456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445a:	4619      	mov	r1, r3
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <USB_DeactivateEndpoint+0x1b0>)
 800445e:	4013      	ands	r3, r2
 8004460:	600b      	str	r3, [r1, #0]
 8004462:	e060      	b.n	8004526 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800447a:	d11f      	bne.n	80044bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	440a      	add	r2, r1
 8004492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004496:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800449a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2101      	movs	r1, #1
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	43db      	mvns	r3, r3
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044dc:	4013      	ands	r3, r2
 80044de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f303 	lsl.w	r3, r1, r3
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	43db      	mvns	r3, r3
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004500:	4013      	ands	r3, r2
 8004502:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	0159      	lsls	r1, r3, #5
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	440b      	add	r3, r1
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	4619      	mov	r1, r3
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <USB_DeactivateEndpoint+0x1b4>)
 8004522:	4013      	ands	r3, r2
 8004524:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	ec337800 	.word	0xec337800
 8004538:	eff37800 	.word	0xeff37800

0800453c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b01      	cmp	r3, #1
 800455a:	f040 815c 	bne.w	8004816 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d132      	bne.n	80045cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004580:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004584:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	0151      	lsls	r1, r2, #5
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	440a      	add	r2, r1
 80045c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c4:	0cdb      	lsrs	r3, r3, #19
 80045c6:	04db      	lsls	r3, r3, #19
 80045c8:	6113      	str	r3, [r2, #16]
 80045ca:	e074      	b.n	80046b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e6:	0cdb      	lsrs	r3, r3, #19
 80045e8:	04db      	lsls	r3, r3, #19
 80045ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004606:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800460a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800460e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800461c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6999      	ldr	r1, [r3, #24]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	440b      	add	r3, r1
 8004628:	1e59      	subs	r1, r3, #1
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004632:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004634:	4b9d      	ldr	r3, [pc, #628]	; (80048ac <USB_EPStartXfer+0x370>)
 8004636:	400b      	ands	r3, r1
 8004638:	69b9      	ldr	r1, [r7, #24]
 800463a:	0148      	lsls	r0, r1, #5
 800463c:	69f9      	ldr	r1, [r7, #28]
 800463e:	4401      	add	r1, r0
 8004640:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004644:	4313      	orrs	r3, r2
 8004646:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800465e:	69b9      	ldr	r1, [r7, #24]
 8004660:	0148      	lsls	r0, r1, #5
 8004662:	69f9      	ldr	r1, [r7, #28]
 8004664:	4401      	add	r1, r0
 8004666:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800466a:	4313      	orrs	r3, r2
 800466c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	791b      	ldrb	r3, [r3, #4]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d11f      	bne.n	80046b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	0151      	lsls	r1, r2, #5
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	440a      	add	r2, r1
 800468c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004690:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004694:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d14b      	bne.n	8004754 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d128      	bne.n	8004732 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d110      	bne.n	8004712 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	440a      	add	r2, r1
 8004706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e00f      	b.n	8004732 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004730:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e133      	b.n	80049bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	440a      	add	r2, r1
 800476a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004772:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	791b      	ldrb	r3, [r3, #4]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d015      	beq.n	80047a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 811b 	beq.w	80049bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	2101      	movs	r1, #1
 8004798:	fa01 f303 	lsl.w	r3, r1, r3
 800479c:	69f9      	ldr	r1, [r7, #28]
 800479e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a2:	4313      	orrs	r3, r2
 80047a4:	634b      	str	r3, [r1, #52]	; 0x34
 80047a6:	e109      	b.n	80049bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d110      	bne.n	80047da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	e00f      	b.n	80047fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	0151      	lsls	r1, r2, #5
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	440a      	add	r2, r1
 80047f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6919      	ldr	r1, [r3, #16]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	b298      	uxth	r0, r3
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4603      	mov	r3, r0
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fade 	bl	8004dd0 <USB_WritePacket>
 8004814:	e0d2      	b.n	80049bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004830:	0cdb      	lsrs	r3, r3, #19
 8004832:	04db      	lsls	r3, r3, #19
 8004834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004858:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d126      	bne.n	80048b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	0148      	lsls	r0, r1, #5
 800487c:	69f9      	ldr	r1, [r7, #28]
 800487e:	4401      	add	r1, r0
 8004880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004884:	4313      	orrs	r3, r2
 8004886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	015a      	lsls	r2, r3, #5
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	4413      	add	r3, r2
 8004890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	0151      	lsls	r1, r2, #5
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	440a      	add	r2, r1
 800489e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048a6:	6113      	str	r3, [r2, #16]
 80048a8:	e03a      	b.n	8004920 <USB_EPStartXfer+0x3e4>
 80048aa:	bf00      	nop
 80048ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	699a      	ldr	r2, [r3, #24]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	8afa      	ldrh	r2, [r7, #22]
 80048cc:	fb03 f202 	mul.w	r2, r3, r2
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	8afb      	ldrh	r3, [r7, #22]
 80048e4:	04d9      	lsls	r1, r3, #19
 80048e6:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <USB_EPStartXfer+0x48c>)
 80048e8:	400b      	ands	r3, r1
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	0148      	lsls	r0, r1, #5
 80048ee:	69f9      	ldr	r1, [r7, #28]
 80048f0:	4401      	add	r1, r0
 80048f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048f6:	4313      	orrs	r3, r2
 80048f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004910:	69b9      	ldr	r1, [r7, #24]
 8004912:	0148      	lsls	r0, r1, #5
 8004914:	69f9      	ldr	r1, [r7, #28]
 8004916:	4401      	add	r1, r0
 8004918:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800491c:	4313      	orrs	r3, r2
 800491e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10d      	bne.n	8004942 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d009      	beq.n	8004942 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6919      	ldr	r1, [r3, #16]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	460a      	mov	r2, r1
 8004940:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	791b      	ldrb	r3, [r3, #4]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d128      	bne.n	800499c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	2b00      	cmp	r3, #0
 8004958:	d110      	bne.n	800497c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e00f      	b.n	800499c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	0151      	lsls	r1, r2, #5
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	440a      	add	r2, r1
 8004992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	69fa      	ldr	r2, [r7, #28]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	1ff80000 	.word	0x1ff80000

080049cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	4613      	mov	r3, r2
 80049d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	f040 80ce 	bne.w	8004b8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d132      	bne.n	8004a5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	0151      	lsls	r1, r2, #5
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	440a      	add	r2, r1
 8004a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a54:	0cdb      	lsrs	r3, r3, #19
 8004a56:	04db      	lsls	r3, r3, #19
 8004a58:	6113      	str	r3, [r2, #16]
 8004a5a:	e04e      	b.n	8004afa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	0cdb      	lsrs	r3, r3, #19
 8004a78:	04db      	lsls	r3, r3, #19
 8004a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	015a      	lsls	r2, r3, #5
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	0151      	lsls	r1, r2, #5
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	440a      	add	r2, r1
 8004a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d903      	bls.n	8004ab4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ace:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aea:	6939      	ldr	r1, [r7, #16]
 8004aec:	0148      	lsls	r0, r1, #5
 8004aee:	6979      	ldr	r1, [r7, #20]
 8004af0:	4401      	add	r1, r0
 8004af2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004af6:	4313      	orrs	r3, r2
 8004af8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004afa:	79fb      	ldrb	r3, [r7, #7]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d11e      	bne.n	8004b3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b14:	461a      	mov	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	e097      	b.n	8004c6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 8083 	beq.w	8004c6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	2101      	movs	r1, #1
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b84:	4313      	orrs	r3, r2
 8004b86:	634b      	str	r3, [r1, #52]	; 0x34
 8004b88:	e071      	b.n	8004c6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	0cdb      	lsrs	r3, r3, #19
 8004ba6:	04db      	lsls	r3, r3, #19
 8004ba8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bcc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	68da      	ldr	r2, [r3, #12]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1c:	6939      	ldr	r1, [r7, #16]
 8004c1e:	0148      	lsls	r0, r1, #5
 8004c20:	6979      	ldr	r1, [r7, #20]
 8004c22:	4401      	add	r1, r0
 8004c24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d10d      	bne.n	8004c4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	6919      	ldr	r1, [r3, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	460a      	mov	r2, r1
 8004c4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	0151      	lsls	r1, r2, #5
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	440a      	add	r2, r1
 8004c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	785b      	ldrb	r3, [r3, #1]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d14a      	bne.n	8004d30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb2:	f040 8086 	bne.w	8004dc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	7812      	ldrb	r2, [r2, #0]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	7812      	ldrb	r2, [r2, #0]
 8004cee:	0151      	lsls	r1, r2, #5
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	440a      	add	r2, r1
 8004cf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d902      	bls.n	8004d14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
          break;
 8004d12:	e056      	b.n	8004dc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d2c:	d0e7      	beq.n	8004cfe <USB_EPStopXfer+0x82>
 8004d2e:	e048      	b.n	8004dc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d48:	d13b      	bne.n	8004dc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	7812      	ldrb	r2, [r2, #0]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3301      	adds	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d902      	bls.n	8004da8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	75fb      	strb	r3, [r7, #23]
          break;
 8004da6:	e00c      	b.n	8004dc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc0:	d0e7      	beq.n	8004d92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b089      	sub	sp, #36	; 0x24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	461a      	mov	r2, r3
 8004dde:	460b      	mov	r3, r1
 8004de0:	71fb      	strb	r3, [r7, #7]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004dee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d123      	bne.n	8004e3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004df6:	88bb      	ldrh	r3, [r7, #4]
 8004df8:	3303      	adds	r3, #3
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e018      	b.n	8004e36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	031a      	lsls	r2, r3, #12
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e10:	461a      	mov	r2, r3
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3301      	adds	r3, #1
 8004e22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	3301      	adds	r3, #1
 8004e28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d3e2      	bcc.n	8004e04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3724      	adds	r7, #36	; 0x24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b08b      	sub	sp, #44	; 0x2c
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	089b      	lsrs	r3, r3, #2
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e6a:	88fb      	ldrh	r3, [r7, #6]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	623b      	str	r3, [r7, #32]
 8004e76:	e014      	b.n	8004ea2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	3301      	adds	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	3301      	adds	r3, #1
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3301      	adds	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	6a3a      	ldr	r2, [r7, #32]
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d3e6      	bcc.n	8004e78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004eaa:	8bfb      	ldrh	r3, [r7, #30]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d01e      	beq.n	8004eee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f107 0310 	add.w	r3, r7, #16
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	701a      	strb	r2, [r3, #0]
      i++;
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	623b      	str	r3, [r7, #32]
      pDest++;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	3301      	adds	r3, #1
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ee2:	8bfb      	ldrh	r3, [r7, #30]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ee8:	8bfb      	ldrh	r3, [r7, #30]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1ea      	bne.n	8004ec4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	372c      	adds	r7, #44	; 0x2c
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d12c      	bne.n	8004f72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	db12      	blt.n	8004f50 <USB_EPSetStall+0x54>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00f      	beq.n	8004f50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	e02b      	b.n	8004fca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	db12      	blt.n	8004faa <USB_EPSetStall+0xae>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00f      	beq.n	8004faa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fa8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d128      	bne.n	8005046 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005012:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	791b      	ldrb	r3, [r3, #4]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d003      	beq.n	8005024 <USB_EPClearStall+0x4c>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	791b      	ldrb	r3, [r3, #4]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d138      	bne.n	8005096 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e027      	b.n	8005096 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005064:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d003      	beq.n	8005076 <USB_EPClearStall+0x9e>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	791b      	ldrb	r3, [r3, #4]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d10f      	bne.n	8005096 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	0151      	lsls	r1, r2, #5
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	440a      	add	r2, r1
 800508c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	460b      	mov	r3, r1
 80050ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80050d8:	68f9      	ldr	r1, [r7, #12]
 80050da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800511e:	f023 0302 	bic.w	r3, r3, #2
 8005122:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800514c:	f023 0303 	bic.w	r3, r3, #3
 8005150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005160:	f043 0302 	orr.w	r3, r3, #2
 8005164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4013      	ands	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	4013      	ands	r3, r2
 80051bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	0c1b      	lsrs	r3, r3, #16
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	b29b      	uxth	r3, r3
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
 800520a:	460b      	mov	r3, r1
 800520c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	4013      	ands	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005230:	68bb      	ldr	r3, [r7, #8]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800523e:	b480      	push	{r7}
 8005240:	b087      	sub	sp, #28
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	fa22 f303 	lsr.w	r3, r2, r3
 800526e:	01db      	lsls	r3, r3, #7
 8005270:	b2db      	uxtb	r3, r3
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	4313      	orrs	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005278:	78fb      	ldrb	r3, [r7, #3]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4013      	ands	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800528c:	68bb      	ldr	r3, [r7, #8]
}
 800528e:	4618      	mov	r0, r3
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f003 0301 	and.w	r3, r3, #1
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052d4:	f023 0307 	bic.w	r3, r3, #7
 80052d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	460b      	mov	r3, r1
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	333c      	adds	r3, #60	; 0x3c
 8005312:	3304      	adds	r3, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4a26      	ldr	r2, [pc, #152]	; (80053b4 <USB_EP0_OutStart+0xb8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d90a      	bls.n	8005336 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005330:	d101      	bne.n	8005336 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	e037      	b.n	80053a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005354:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005364:	f043 0318 	orr.w	r3, r3, #24
 8005368:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005378:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800537c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d10f      	bne.n	80053a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	371c      	adds	r7, #28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	4f54300a 	.word	0x4f54300a

080053b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a13      	ldr	r2, [pc, #76]	; (800541c <USB_CoreReset+0x64>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d901      	bls.n	80053d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e01b      	b.n	800540e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	daf2      	bge.n	80053c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f043 0201 	orr.w	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3301      	adds	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4a09      	ldr	r2, [pc, #36]	; (800541c <USB_CoreReset+0x64>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d901      	bls.n	8005400 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e006      	b.n	800540e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b01      	cmp	r3, #1
 800540a:	d0f0      	beq.n	80053ee <USB_CoreReset+0x36>

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	00030d40 	.word	0x00030d40

08005420 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800542c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005430:	f002 fcac 	bl	8007d8c <USBD_static_malloc>
 8005434:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	32b0      	adds	r2, #176	; 0xb0
 8005446:	2100      	movs	r1, #0
 8005448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800544c:	2302      	movs	r3, #2
 800544e:	e0d4      	b.n	80055fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005450:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005454:	2100      	movs	r1, #0
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f002 fcfc 	bl	8007e54 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	32b0      	adds	r2, #176	; 0xb0
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	32b0      	adds	r2, #176	; 0xb0
 8005476:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	7c1b      	ldrb	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d138      	bne.n	80054fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005488:	4b5e      	ldr	r3, [pc, #376]	; (8005604 <USBD_CDC_Init+0x1e4>)
 800548a:	7819      	ldrb	r1, [r3, #0]
 800548c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005490:	2202      	movs	r2, #2
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f002 fb57 	bl	8007b46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005498:	4b5a      	ldr	r3, [pc, #360]	; (8005604 <USBD_CDC_Init+0x1e4>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 020f 	and.w	r2, r3, #15
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3324      	adds	r3, #36	; 0x24
 80054ae:	2201      	movs	r2, #1
 80054b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80054b2:	4b55      	ldr	r3, [pc, #340]	; (8005608 <USBD_CDC_Init+0x1e8>)
 80054b4:	7819      	ldrb	r1, [r3, #0]
 80054b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ba:	2202      	movs	r2, #2
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f002 fb42 	bl	8007b46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80054c2:	4b51      	ldr	r3, [pc, #324]	; (8005608 <USBD_CDC_Init+0x1e8>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	f003 020f 	and.w	r2, r3, #15
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80054da:	2201      	movs	r2, #1
 80054dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80054de:	4b4b      	ldr	r3, [pc, #300]	; (800560c <USBD_CDC_Init+0x1ec>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f003 020f 	and.w	r2, r3, #15
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	3326      	adds	r3, #38	; 0x26
 80054f4:	2210      	movs	r2, #16
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e035      	b.n	8005566 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054fa:	4b42      	ldr	r3, [pc, #264]	; (8005604 <USBD_CDC_Init+0x1e4>)
 80054fc:	7819      	ldrb	r1, [r3, #0]
 80054fe:	2340      	movs	r3, #64	; 0x40
 8005500:	2202      	movs	r2, #2
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f002 fb1f 	bl	8007b46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005508:	4b3e      	ldr	r3, [pc, #248]	; (8005604 <USBD_CDC_Init+0x1e4>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	f003 020f 	and.w	r2, r3, #15
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	4613      	mov	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	3324      	adds	r3, #36	; 0x24
 800551e:	2201      	movs	r2, #1
 8005520:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005522:	4b39      	ldr	r3, [pc, #228]	; (8005608 <USBD_CDC_Init+0x1e8>)
 8005524:	7819      	ldrb	r1, [r3, #0]
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	2202      	movs	r2, #2
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f002 fb0b 	bl	8007b46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <USBD_CDC_Init+0x1e8>)
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f003 020f 	and.w	r2, r3, #15
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005548:	2201      	movs	r2, #1
 800554a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800554c:	4b2f      	ldr	r3, [pc, #188]	; (800560c <USBD_CDC_Init+0x1ec>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	f003 020f 	and.w	r2, r3, #15
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3326      	adds	r3, #38	; 0x26
 8005562:	2210      	movs	r2, #16
 8005564:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005566:	4b29      	ldr	r3, [pc, #164]	; (800560c <USBD_CDC_Init+0x1ec>)
 8005568:	7819      	ldrb	r1, [r3, #0]
 800556a:	2308      	movs	r3, #8
 800556c:	2203      	movs	r2, #3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f002 fae9 	bl	8007b46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005574:	4b25      	ldr	r3, [pc, #148]	; (800560c <USBD_CDC_Init+0x1ec>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f003 020f 	and.w	r2, r3, #15
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	2201      	movs	r2, #1
 800558c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	33b0      	adds	r3, #176	; 0xb0
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80055c4:	2302      	movs	r3, #2
 80055c6:	e018      	b.n	80055fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	7c1b      	ldrb	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055d0:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <USBD_CDC_Init+0x1e8>)
 80055d2:	7819      	ldrb	r1, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f002 fba0 	bl	8007d24 <USBD_LL_PrepareReceive>
 80055e4:	e008      	b.n	80055f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055e6:	4b08      	ldr	r3, [pc, #32]	; (8005608 <USBD_CDC_Init+0x1e8>)
 80055e8:	7819      	ldrb	r1, [r3, #0]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055f0:	2340      	movs	r3, #64	; 0x40
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f002 fb96 	bl	8007d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000097 	.word	0x20000097
 8005608:	20000098 	.word	0x20000098
 800560c:	20000099 	.word	0x20000099

08005610 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800561c:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <USBD_CDC_DeInit+0xf8>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f002 fab5 	bl	8007b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005628:	4b37      	ldr	r3, [pc, #220]	; (8005708 <USBD_CDC_DeInit+0xf8>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	3324      	adds	r3, #36	; 0x24
 800563e:	2200      	movs	r2, #0
 8005640:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005642:	4b32      	ldr	r3, [pc, #200]	; (800570c <USBD_CDC_DeInit+0xfc>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f002 faa2 	bl	8007b92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800564e:	4b2f      	ldr	r3, [pc, #188]	; (800570c <USBD_CDC_DeInit+0xfc>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	f003 020f 	and.w	r2, r3, #15
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4413      	add	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005666:	2200      	movs	r2, #0
 8005668:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800566a:	4b29      	ldr	r3, [pc, #164]	; (8005710 <USBD_CDC_DeInit+0x100>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	4619      	mov	r1, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 fa8e 	bl	8007b92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005676:	4b26      	ldr	r3, [pc, #152]	; (8005710 <USBD_CDC_DeInit+0x100>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	3324      	adds	r3, #36	; 0x24
 800568c:	2200      	movs	r2, #0
 800568e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <USBD_CDC_DeInit+0x100>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f003 020f 	and.w	r2, r3, #15
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	3326      	adds	r3, #38	; 0x26
 80056a6:	2200      	movs	r2, #0
 80056a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	32b0      	adds	r2, #176	; 0xb0
 80056b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d01f      	beq.n	80056fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	33b0      	adds	r3, #176	; 0xb0
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	32b0      	adds	r2, #176	; 0xb0
 80056da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056de:	4618      	mov	r0, r3
 80056e0:	f002 fb62 	bl	8007da8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	32b0      	adds	r2, #176	; 0xb0
 80056ee:	2100      	movs	r1, #0
 80056f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000097 	.word	0x20000097
 800570c:	20000098 	.word	0x20000098
 8005710:	20000099 	.word	0x20000099

08005714 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	32b0      	adds	r2, #176	; 0xb0
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005740:	2303      	movs	r3, #3
 8005742:	e0bf      	b.n	80058c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800574c:	2b00      	cmp	r3, #0
 800574e:	d050      	beq.n	80057f2 <USBD_CDC_Setup+0xde>
 8005750:	2b20      	cmp	r3, #32
 8005752:	f040 80af 	bne.w	80058b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	88db      	ldrh	r3, [r3, #6]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d03a      	beq.n	80057d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	b25b      	sxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	da1b      	bge.n	80057a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	33b0      	adds	r3, #176	; 0xb0
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800577e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	88d2      	ldrh	r2, [r2, #6]
 8005784:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	88db      	ldrh	r3, [r3, #6]
 800578a:	2b07      	cmp	r3, #7
 800578c:	bf28      	it	cs
 800578e:	2307      	movcs	r3, #7
 8005790:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	89fa      	ldrh	r2, [r7, #14]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 fd89 	bl	80072b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800579e:	e090      	b.n	80058c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	785a      	ldrb	r2, [r3, #1]
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	88db      	ldrh	r3, [r3, #6]
 80057ae:	2b3f      	cmp	r3, #63	; 0x3f
 80057b0:	d803      	bhi.n	80057ba <USBD_CDC_Setup+0xa6>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	88db      	ldrh	r3, [r3, #6]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	e000      	b.n	80057bc <USBD_CDC_Setup+0xa8>
 80057ba:	2240      	movs	r2, #64	; 0x40
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80057c2:	6939      	ldr	r1, [r7, #16]
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80057ca:	461a      	mov	r2, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 fd9b 	bl	8007308 <USBD_CtlPrepareRx>
      break;
 80057d2:	e076      	b.n	80058c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	33b0      	adds	r3, #176	; 0xb0
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	7850      	ldrb	r0, [r2, #1]
 80057ea:	2200      	movs	r2, #0
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	4798      	blx	r3
      break;
 80057f0:	e067      	b.n	80058c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b0b      	cmp	r3, #11
 80057f8:	d851      	bhi.n	800589e <USBD_CDC_Setup+0x18a>
 80057fa:	a201      	add	r2, pc, #4	; (adr r2, 8005800 <USBD_CDC_Setup+0xec>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	08005831 	.word	0x08005831
 8005804:	080058ad 	.word	0x080058ad
 8005808:	0800589f 	.word	0x0800589f
 800580c:	0800589f 	.word	0x0800589f
 8005810:	0800589f 	.word	0x0800589f
 8005814:	0800589f 	.word	0x0800589f
 8005818:	0800589f 	.word	0x0800589f
 800581c:	0800589f 	.word	0x0800589f
 8005820:	0800589f 	.word	0x0800589f
 8005824:	0800589f 	.word	0x0800589f
 8005828:	0800585b 	.word	0x0800585b
 800582c:	08005885 	.word	0x08005885
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d107      	bne.n	800584c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800583c:	f107 030a 	add.w	r3, r7, #10
 8005840:	2202      	movs	r2, #2
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f001 fd33 	bl	80072b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800584a:	e032      	b.n	80058b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fcbd 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005854:	2303      	movs	r3, #3
 8005856:	75fb      	strb	r3, [r7, #23]
          break;
 8005858:	e02b      	b.n	80058b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b03      	cmp	r3, #3
 8005864:	d107      	bne.n	8005876 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005866:	f107 030d 	add.w	r3, r7, #13
 800586a:	2201      	movs	r2, #1
 800586c:	4619      	mov	r1, r3
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fd1e 	bl	80072b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005874:	e01d      	b.n	80058b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f001 fca8 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 800587e:	2303      	movs	r3, #3
 8005880:	75fb      	strb	r3, [r7, #23]
          break;
 8005882:	e016      	b.n	80058b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b03      	cmp	r3, #3
 800588e:	d00f      	beq.n	80058b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005890:	6839      	ldr	r1, [r7, #0]
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f001 fc9b 	bl	80071ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005898:	2303      	movs	r3, #3
 800589a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800589c:	e008      	b.n	80058b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 fc94 	bl	80071ce <USBD_CtlError>
          ret = USBD_FAIL;
 80058a6:	2303      	movs	r3, #3
 80058a8:	75fb      	strb	r3, [r7, #23]
          break;
 80058aa:	e002      	b.n	80058b2 <USBD_CDC_Setup+0x19e>
          break;
 80058ac:	bf00      	nop
 80058ae:	e008      	b.n	80058c2 <USBD_CDC_Setup+0x1ae>
          break;
 80058b0:	bf00      	nop
      }
      break;
 80058b2:	e006      	b.n	80058c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f001 fc89 	bl	80071ce <USBD_CtlError>
      ret = USBD_FAIL;
 80058bc:	2303      	movs	r3, #3
 80058be:	75fb      	strb	r3, [r7, #23]
      break;
 80058c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80058de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	32b0      	adds	r2, #176	; 0xb0
 80058ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e065      	b.n	80059c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	32b0      	adds	r2, #176	; 0xb0
 8005900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005904:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	3318      	adds	r3, #24
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d02f      	beq.n	8005980 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	f003 020f 	and.w	r2, r3, #15
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	3318      	adds	r3, #24
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	f003 010f 	and.w	r1, r3, #15
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	460b      	mov	r3, r1
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	440b      	add	r3, r1
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4403      	add	r3, r0
 8005948:	3348      	adds	r3, #72	; 0x48
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005950:	fb01 f303 	mul.w	r3, r1, r3
 8005954:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005956:	2b00      	cmp	r3, #0
 8005958:	d112      	bne.n	8005980 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 020f 	and.w	r2, r3, #15
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	3318      	adds	r3, #24
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005972:	78f9      	ldrb	r1, [r7, #3]
 8005974:	2300      	movs	r3, #0
 8005976:	2200      	movs	r2, #0
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f002 f9b2 	bl	8007ce2 <USBD_LL_Transmit>
 800597e:	e01f      	b.n	80059c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	33b0      	adds	r3, #176	; 0xb0
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d010      	beq.n	80059c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	33b0      	adds	r3, #176	; 0xb0
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059bc:	78fa      	ldrb	r2, [r7, #3]
 80059be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	32b0      	adds	r2, #176	; 0xb0
 80059e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	32b0      	adds	r2, #176	; 0xb0
 80059f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e01a      	b.n	8005a32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f002 f9b0 	bl	8007d66 <USBD_LL_GetRxDataSize>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	33b0      	adds	r3, #176	; 0xb0
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	32b0      	adds	r2, #176	; 0xb0
 8005a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e025      	b.n	8005aa8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	33b0      	adds	r3, #176	; 0xb0
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01a      	beq.n	8005aa6 <USBD_CDC_EP0_RxReady+0x6c>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a76:	2bff      	cmp	r3, #255	; 0xff
 8005a78:	d015      	beq.n	8005aa6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	33b0      	adds	r3, #176	; 0xb0
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005a92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005a9a:	b292      	uxth	r2, r2
 8005a9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ab8:	2182      	movs	r1, #130	; 0x82
 8005aba:	4818      	ldr	r0, [pc, #96]	; (8005b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005abc:	f000 fd4f 	bl	800655e <USBD_GetEpDesc>
 8005ac0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	4815      	ldr	r0, [pc, #84]	; (8005b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ac6:	f000 fd4a 	bl	800655e <USBD_GetEpDesc>
 8005aca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005acc:	2181      	movs	r1, #129	; 0x81
 8005ace:	4813      	ldr	r0, [pc, #76]	; (8005b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ad0:	f000 fd45 	bl	800655e <USBD_GetEpDesc>
 8005ad4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2210      	movs	r2, #16
 8005ae0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d006      	beq.n	8005af6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af0:	711a      	strb	r2, [r3, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d006      	beq.n	8005b0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b04:	711a      	strb	r2, [r3, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2243      	movs	r2, #67	; 0x43
 8005b0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b10:	4b02      	ldr	r3, [pc, #8]	; (8005b1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000054 	.word	0x20000054

08005b20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b28:	2182      	movs	r1, #130	; 0x82
 8005b2a:	4818      	ldr	r0, [pc, #96]	; (8005b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b2c:	f000 fd17 	bl	800655e <USBD_GetEpDesc>
 8005b30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b32:	2101      	movs	r1, #1
 8005b34:	4815      	ldr	r0, [pc, #84]	; (8005b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b36:	f000 fd12 	bl	800655e <USBD_GetEpDesc>
 8005b3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b3c:	2181      	movs	r1, #129	; 0x81
 8005b3e:	4813      	ldr	r0, [pc, #76]	; (8005b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b40:	f000 fd0d 	bl	800655e <USBD_GetEpDesc>
 8005b44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	2210      	movs	r2, #16
 8005b50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d006      	beq.n	8005b66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	711a      	strb	r2, [r3, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f042 0202 	orr.w	r2, r2, #2
 8005b64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d006      	beq.n	8005b7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	711a      	strb	r2, [r3, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f042 0202 	orr.w	r2, r2, #2
 8005b78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2243      	movs	r2, #67	; 0x43
 8005b7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b80:	4b02      	ldr	r3, [pc, #8]	; (8005b8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000054 	.word	0x20000054

08005b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b98:	2182      	movs	r1, #130	; 0x82
 8005b9a:	4818      	ldr	r0, [pc, #96]	; (8005bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005b9c:	f000 fcdf 	bl	800655e <USBD_GetEpDesc>
 8005ba0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	4815      	ldr	r0, [pc, #84]	; (8005bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ba6:	f000 fcda 	bl	800655e <USBD_GetEpDesc>
 8005baa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bac:	2181      	movs	r1, #129	; 0x81
 8005bae:	4813      	ldr	r0, [pc, #76]	; (8005bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bb0:	f000 fcd5 	bl	800655e <USBD_GetEpDesc>
 8005bb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd0:	711a      	strb	r2, [r3, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d006      	beq.n	8005bea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005be4:	711a      	strb	r2, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2243      	movs	r2, #67	; 0x43
 8005bee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bf0:	4b02      	ldr	r3, [pc, #8]	; (8005bfc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	20000054 	.word	0x20000054

08005c00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	220a      	movs	r2, #10
 8005c0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c0e:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20000010 	.word	0x20000010

08005c20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e009      	b.n	8005c48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	33b0      	adds	r3, #176	; 0xb0
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	32b0      	adds	r2, #176	; 0xb0
 8005c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e008      	b.n	8005c8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	371c      	adds	r7, #28
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	32b0      	adds	r2, #176	; 0xb0
 8005cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e004      	b.n	8005cc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	32b0      	adds	r2, #176	; 0xb0
 8005ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005cec:	2301      	movs	r3, #1
 8005cee:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	32b0      	adds	r2, #176	; 0xb0
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e025      	b.n	8005d52 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d11f      	bne.n	8005d50 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <USBD_CDC_TransmitPacket+0x88>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f003 020f 	and.w	r2, r3, #15
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4403      	add	r3, r0
 8005d32:	3318      	adds	r3, #24
 8005d34:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <USBD_CDC_TransmitPacket+0x88>)
 8005d38:	7819      	ldrb	r1, [r3, #0]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 ffcb 	bl	8007ce2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000097 	.word	0x20000097

08005d60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	32b0      	adds	r2, #176	; 0xb0
 8005d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d76:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	32b0      	adds	r2, #176	; 0xb0
 8005d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d101      	bne.n	8005d8e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e018      	b.n	8005dc0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	7c1b      	ldrb	r3, [r3, #16]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d96:	4b0c      	ldr	r3, [pc, #48]	; (8005dc8 <USBD_CDC_ReceivePacket+0x68>)
 8005d98:	7819      	ldrb	r1, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 ffbd 	bl	8007d24 <USBD_LL_PrepareReceive>
 8005daa:	e008      	b.n	8005dbe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <USBD_CDC_ReceivePacket+0x68>)
 8005dae:	7819      	ldrb	r1, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005db6:	2340      	movs	r3, #64	; 0x40
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f001 ffb3 	bl	8007d24 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	20000098 	.word	0x20000098

08005dcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e01f      	b.n	8005e24 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	79fa      	ldrb	r2, [r7, #7]
 8005e16:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 fe2d 	bl	8007a78 <USBD_LL_Init>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d101      	bne.n	8005e44 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e025      	b.n	8005e90 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	32ae      	adds	r2, #174	; 0xae
 8005e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00f      	beq.n	8005e80 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	32ae      	adds	r2, #174	; 0xae
 8005e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	f107 020e 	add.w	r2, r7, #14
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	4602      	mov	r2, r0
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 fe35 	bl	8007b10 <USBD_LL_Start>
 8005ea6:	4603      	mov	r3, r0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	4611      	mov	r1, r2
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	4798      	blx	r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b084      	sub	sp, #16
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	4611      	mov	r1, r2
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f24:	2303      	movs	r3, #3
 8005f26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 f908 	bl	800715a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d01a      	beq.n	8005fa4 <USBD_LL_SetupStage+0x72>
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d822      	bhi.n	8005fb8 <USBD_LL_SetupStage+0x86>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <USBD_LL_SetupStage+0x4a>
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d00a      	beq.n	8005f90 <USBD_LL_SetupStage+0x5e>
 8005f7a:	e01d      	b.n	8005fb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fb5f 	bl	8006648 <USBD_StdDevReq>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8e:	e020      	b.n	8005fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fbc7 	bl	800672c <USBD_StdItfReq>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa2:	e016      	b.n	8005fd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fc29 	bl	8006804 <USBD_StdEPReq>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb6:	e00c      	b.n	8005fd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fe02 	bl	8007bd0 <USBD_LL_StallEP>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	bf00      	nop
  }

  return ret;
 8005fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005fee:	7afb      	ldrb	r3, [r7, #11]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d16e      	bne.n	80060d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005ffa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006002:	2b03      	cmp	r3, #3
 8006004:	f040 8098 	bne.w	8006138 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	689a      	ldr	r2, [r3, #8]
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	429a      	cmp	r2, r3
 8006012:	d913      	bls.n	800603c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	1ad2      	subs	r2, r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	68da      	ldr	r2, [r3, #12]
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	4293      	cmp	r3, r2
 800602c:	bf28      	it	cs
 800602e:	4613      	movcs	r3, r2
 8006030:	461a      	mov	r2, r3
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f001 f984 	bl	8007342 <USBD_CtlContinueRx>
 800603a:	e07d      	b.n	8006138 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2b02      	cmp	r3, #2
 8006048:	d014      	beq.n	8006074 <USBD_LL_DataOutStage+0x98>
 800604a:	2b02      	cmp	r3, #2
 800604c:	d81d      	bhi.n	800608a <USBD_LL_DataOutStage+0xae>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <USBD_LL_DataOutStage+0x7c>
 8006052:	2b01      	cmp	r3, #1
 8006054:	d003      	beq.n	800605e <USBD_LL_DataOutStage+0x82>
 8006056:	e018      	b.n	800608a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	75bb      	strb	r3, [r7, #22]
            break;
 800605c:	e018      	b.n	8006090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006064:	b2db      	uxtb	r3, r3
 8006066:	4619      	mov	r1, r3
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 fa5e 	bl	800652a <USBD_CoreFindIF>
 800606e:	4603      	mov	r3, r0
 8006070:	75bb      	strb	r3, [r7, #22]
            break;
 8006072:	e00d      	b.n	8006090 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4619      	mov	r1, r3
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 fa60 	bl	8006544 <USBD_CoreFindEP>
 8006084:	4603      	mov	r3, r0
 8006086:	75bb      	strb	r3, [r7, #22]
            break;
 8006088:	e002      	b.n	8006090 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	75bb      	strb	r3, [r7, #22]
            break;
 800608e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006090:	7dbb      	ldrb	r3, [r7, #22]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d119      	bne.n	80060ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d113      	bne.n	80060ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060a2:	7dba      	ldrb	r2, [r7, #22]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	32ae      	adds	r2, #174	; 0xae
 80060a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060b2:	7dba      	ldrb	r2, [r7, #22]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80060ba:	7dba      	ldrb	r2, [r7, #22]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	32ae      	adds	r2, #174	; 0xae
 80060c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f001 f94a 	bl	8007364 <USBD_CtlSendStatus>
 80060d0:	e032      	b.n	8006138 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80060d2:	7afb      	ldrb	r3, [r7, #11]
 80060d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	4619      	mov	r1, r3
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 fa31 	bl	8006544 <USBD_CoreFindEP>
 80060e2:	4603      	mov	r3, r0
 80060e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80060e6:	7dbb      	ldrb	r3, [r7, #22]
 80060e8:	2bff      	cmp	r3, #255	; 0xff
 80060ea:	d025      	beq.n	8006138 <USBD_LL_DataOutStage+0x15c>
 80060ec:	7dbb      	ldrb	r3, [r7, #22]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d122      	bne.n	8006138 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d117      	bne.n	800612e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80060fe:	7dba      	ldrb	r2, [r7, #22]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	32ae      	adds	r2, #174	; 0xae
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00f      	beq.n	800612e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800610e:	7dba      	ldrb	r2, [r7, #22]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006116:	7dba      	ldrb	r2, [r7, #22]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	32ae      	adds	r2, #174	; 0xae
 800611c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	7afa      	ldrb	r2, [r7, #11]
 8006124:	4611      	mov	r1, r2
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	4798      	blx	r3
 800612a:	4603      	mov	r3, r0
 800612c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	e000      	b.n	800613a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b086      	sub	sp, #24
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	460b      	mov	r3, r1
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d16f      	bne.n	8006236 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	3314      	adds	r3, #20
 800615a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006162:	2b02      	cmp	r3, #2
 8006164:	d15a      	bne.n	800621c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	429a      	cmp	r2, r3
 8006170:	d914      	bls.n	800619c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	1ad2      	subs	r2, r2, r3
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	461a      	mov	r2, r3
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f001 f8ac 	bl	80072e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800618e:	2300      	movs	r3, #0
 8006190:	2200      	movs	r2, #0
 8006192:	2100      	movs	r1, #0
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f001 fdc5 	bl	8007d24 <USBD_LL_PrepareReceive>
 800619a:	e03f      	b.n	800621c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d11c      	bne.n	80061e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d316      	bcc.n	80061e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061be:	429a      	cmp	r2, r3
 80061c0:	d20f      	bcs.n	80061e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061c2:	2200      	movs	r2, #0
 80061c4:	2100      	movs	r1, #0
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f001 f88d 	bl	80072e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061d4:	2300      	movs	r3, #0
 80061d6:	2200      	movs	r2, #0
 80061d8:	2100      	movs	r1, #0
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f001 fda2 	bl	8007d24 <USBD_LL_PrepareReceive>
 80061e0:	e01c      	b.n	800621c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d10f      	bne.n	800620e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 fcdd 	bl	8007bd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f001 f8b7 	bl	800738a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d03a      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fe42 	bl	8005eb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006234:	e032      	b.n	800629c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800623c:	b2db      	uxtb	r3, r3
 800623e:	4619      	mov	r1, r3
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 f97f 	bl	8006544 <USBD_CoreFindEP>
 8006246:	4603      	mov	r3, r0
 8006248:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800624a:	7dfb      	ldrb	r3, [r7, #23]
 800624c:	2bff      	cmp	r3, #255	; 0xff
 800624e:	d025      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d122      	bne.n	800629c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b03      	cmp	r3, #3
 8006260:	d11c      	bne.n	800629c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006262:	7dfa      	ldrb	r2, [r7, #23]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	32ae      	adds	r2, #174	; 0xae
 8006268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d014      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006272:	7dfa      	ldrb	r2, [r7, #23]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800627a:	7dfa      	ldrb	r2, [r7, #23]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	32ae      	adds	r2, #174	; 0xae
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	7afa      	ldrb	r2, [r7, #11]
 8006288:	4611      	mov	r1, r2
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	4798      	blx	r3
 800628e:	4603      	mov	r3, r0
 8006290:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006292:	7dbb      	ldrb	r3, [r7, #22]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006298:	7dbb      	ldrb	r3, [r7, #22]
 800629a:	e000      	b.n	800629e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d014      	beq.n	800630c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00e      	beq.n	800630c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6852      	ldr	r2, [r2, #4]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	4611      	mov	r1, r2
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006308:	2303      	movs	r3, #3
 800630a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800630c:	2340      	movs	r3, #64	; 0x40
 800630e:	2200      	movs	r2, #0
 8006310:	2100      	movs	r1, #0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f001 fc17 	bl	8007b46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2240      	movs	r2, #64	; 0x40
 8006324:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006328:	2340      	movs	r3, #64	; 0x40
 800632a:	2200      	movs	r2, #0
 800632c:	2180      	movs	r1, #128	; 0x80
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fc09 	bl	8007b46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2240      	movs	r2, #64	; 0x40
 800633e:	621a      	str	r2, [r3, #32]

  return ret;
 8006340:	7bfb      	ldrb	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006378:	b2da      	uxtb	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2204      	movs	r2, #4
 8006384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d106      	bne.n	80063b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d110      	bne.n	80063fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ea:	69db      	ldr	r3, [r3, #28]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	32ae      	adds	r2, #174	; 0xae
 800641c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	e01c      	b.n	8006462 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b03      	cmp	r3, #3
 8006432:	d115      	bne.n	8006460 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	32ae      	adds	r2, #174	; 0xae
 800643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	32ae      	adds	r2, #174	; 0xae
 8006452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	4611      	mov	r1, r2
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	460b      	mov	r3, r1
 8006474:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	32ae      	adds	r2, #174	; 0xae
 8006480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006488:	2303      	movs	r3, #3
 800648a:	e01c      	b.n	80064c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b03      	cmp	r3, #3
 8006496:	d115      	bne.n	80064c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	32ae      	adds	r2, #174	; 0xae
 80064a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	32ae      	adds	r2, #174	; 0xae
 80064b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	4611      	mov	r1, r2
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00e      	beq.n	8006520 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6852      	ldr	r2, [r2, #4]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	4611      	mov	r1, r2
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	4798      	blx	r3
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d001      	beq.n	8006520 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800651c:	2303      	movs	r3, #3
 800651e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006520:	7bfb      	ldrb	r3, [r7, #15]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800652a:	b480      	push	{r7}
 800652c:	b083      	sub	sp, #12
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	460b      	mov	r3, r1
 8006534:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006536:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	460b      	mov	r3, r1
 800654e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006550:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	885b      	ldrh	r3, [r3, #2]
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	429a      	cmp	r2, r3
 8006584:	d920      	bls.n	80065c8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800658e:	e013      	b.n	80065b8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006590:	f107 030a 	add.w	r3, r7, #10
 8006594:	4619      	mov	r1, r3
 8006596:	6978      	ldr	r0, [r7, #20]
 8006598:	f000 f81b 	bl	80065d2 <USBD_GetNextDesc>
 800659c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	d108      	bne.n	80065b8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	789b      	ldrb	r3, [r3, #2]
 80065ae:	78fa      	ldrb	r2, [r7, #3]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d008      	beq.n	80065c6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	885b      	ldrh	r3, [r3, #2]
 80065bc:	b29a      	uxth	r2, r3
 80065be:	897b      	ldrh	r3, [r7, #10]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d8e5      	bhi.n	8006590 <USBD_GetEpDesc+0x32>
 80065c4:	e000      	b.n	80065c8 <USBD_GetEpDesc+0x6a>
          break;
 80065c6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80065c8:	693b      	ldr	r3, [r7, #16]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	881a      	ldrh	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80065fe:	68fb      	ldr	r3, [r7, #12]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	3301      	adds	r3, #1
 8006622:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800662a:	8a3b      	ldrh	r3, [r7, #16]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	b21a      	sxth	r2, r3
 8006630:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006634:	4313      	orrs	r3, r2
 8006636:	b21b      	sxth	r3, r3
 8006638:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800663a:	89fb      	ldrh	r3, [r7, #14]
}
 800663c:	4618      	mov	r0, r3
 800663e:	371c      	adds	r7, #28
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800665e:	2b40      	cmp	r3, #64	; 0x40
 8006660:	d005      	beq.n	800666e <USBD_StdDevReq+0x26>
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d857      	bhi.n	8006716 <USBD_StdDevReq+0xce>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00f      	beq.n	800668a <USBD_StdDevReq+0x42>
 800666a:	2b20      	cmp	r3, #32
 800666c:	d153      	bne.n	8006716 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	32ae      	adds	r2, #174	; 0xae
 8006678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]
      break;
 8006688:	e04a      	b.n	8006720 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b09      	cmp	r3, #9
 8006690:	d83b      	bhi.n	800670a <USBD_StdDevReq+0xc2>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <USBD_StdDevReq+0x50>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006701 	.word	0x08006701
 80066a0:	0800670b 	.word	0x0800670b
 80066a4:	080066f7 	.word	0x080066f7
 80066a8:	0800670b 	.word	0x0800670b
 80066ac:	080066cb 	.word	0x080066cb
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	0800670b 	.word	0x0800670b
 80066b8:	080066e3 	.word	0x080066e3
 80066bc:	080066d5 	.word	0x080066d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa3c 	bl	8006b40 <USBD_GetDescriptor>
          break;
 80066c8:	e024      	b.n	8006714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fba1 	bl	8006e14 <USBD_SetAddress>
          break;
 80066d2:	e01f      	b.n	8006714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fbe0 	bl	8006e9c <USBD_SetConfig>
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
          break;
 80066e0:	e018      	b.n	8006714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc83 	bl	8006ff0 <USBD_GetConfig>
          break;
 80066ea:	e013      	b.n	8006714 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fcb4 	bl	800705c <USBD_GetStatus>
          break;
 80066f4:	e00e      	b.n	8006714 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fce3 	bl	80070c4 <USBD_SetFeature>
          break;
 80066fe:	e009      	b.n	8006714 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fd07 	bl	8007116 <USBD_ClrFeature>
          break;
 8006708:	e004      	b.n	8006714 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fd5e 	bl	80071ce <USBD_CtlError>
          break;
 8006712:	bf00      	nop
      }
      break;
 8006714:	e004      	b.n	8006720 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fd58 	bl	80071ce <USBD_CtlError>
      break;
 800671e:	bf00      	nop
  }

  return ret;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop

0800672c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d005      	beq.n	8006752 <USBD_StdItfReq+0x26>
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d852      	bhi.n	80067f0 <USBD_StdItfReq+0xc4>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <USBD_StdItfReq+0x26>
 800674e:	2b20      	cmp	r3, #32
 8006750:	d14e      	bne.n	80067f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006758:	b2db      	uxtb	r3, r3
 800675a:	3b01      	subs	r3, #1
 800675c:	2b02      	cmp	r3, #2
 800675e:	d840      	bhi.n	80067e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	889b      	ldrh	r3, [r3, #4]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b01      	cmp	r3, #1
 8006768:	d836      	bhi.n	80067d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	889b      	ldrh	r3, [r3, #4]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fed9 	bl	800652a <USBD_CoreFindIF>
 8006778:	4603      	mov	r3, r0
 800677a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	2bff      	cmp	r3, #255	; 0xff
 8006780:	d01d      	beq.n	80067be <USBD_StdItfReq+0x92>
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d11a      	bne.n	80067be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006788:	7bba      	ldrb	r2, [r7, #14]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	32ae      	adds	r2, #174	; 0xae
 800678e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00f      	beq.n	80067b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006798:	7bba      	ldrb	r2, [r7, #14]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067a0:	7bba      	ldrb	r2, [r7, #14]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	32ae      	adds	r2, #174	; 0xae
 80067a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
 80067b2:	4603      	mov	r3, r0
 80067b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067b6:	e004      	b.n	80067c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067bc:	e001      	b.n	80067c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80067be:	2303      	movs	r3, #3
 80067c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d110      	bne.n	80067ec <USBD_StdItfReq+0xc0>
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fdc7 	bl	8007364 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067d6:	e009      	b.n	80067ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fcf7 	bl	80071ce <USBD_CtlError>
          break;
 80067e0:	e004      	b.n	80067ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fcf2 	bl	80071ce <USBD_CtlError>
          break;
 80067ea:	e000      	b.n	80067ee <USBD_StdItfReq+0xc2>
          break;
 80067ec:	bf00      	nop
      }
      break;
 80067ee:	e004      	b.n	80067fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fceb 	bl	80071ce <USBD_CtlError>
      break;
 80067f8:	bf00      	nop
  }

  return ret;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	889b      	ldrh	r3, [r3, #4]
 8006816:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d007      	beq.n	8006834 <USBD_StdEPReq+0x30>
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	f200 817f 	bhi.w	8006b28 <USBD_StdEPReq+0x324>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d02a      	beq.n	8006884 <USBD_StdEPReq+0x80>
 800682e:	2b20      	cmp	r3, #32
 8006830:	f040 817a 	bne.w	8006b28 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff fe83 	bl	8006544 <USBD_CoreFindEP>
 800683e:	4603      	mov	r3, r0
 8006840:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006842:	7b7b      	ldrb	r3, [r7, #13]
 8006844:	2bff      	cmp	r3, #255	; 0xff
 8006846:	f000 8174 	beq.w	8006b32 <USBD_StdEPReq+0x32e>
 800684a:	7b7b      	ldrb	r3, [r7, #13]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 8170 	bne.w	8006b32 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006852:	7b7a      	ldrb	r2, [r7, #13]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800685a:	7b7a      	ldrb	r2, [r7, #13]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	32ae      	adds	r2, #174	; 0xae
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 8163 	beq.w	8006b32 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800686c:	7b7a      	ldrb	r2, [r7, #13]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	32ae      	adds	r2, #174	; 0xae
 8006872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
 800687e:	4603      	mov	r3, r0
 8006880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006882:	e156      	b.n	8006b32 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	2b03      	cmp	r3, #3
 800688a:	d008      	beq.n	800689e <USBD_StdEPReq+0x9a>
 800688c:	2b03      	cmp	r3, #3
 800688e:	f300 8145 	bgt.w	8006b1c <USBD_StdEPReq+0x318>
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 809b 	beq.w	80069ce <USBD_StdEPReq+0x1ca>
 8006898:	2b01      	cmp	r3, #1
 800689a:	d03c      	beq.n	8006916 <USBD_StdEPReq+0x112>
 800689c:	e13e      	b.n	8006b1c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d002      	beq.n	80068b0 <USBD_StdEPReq+0xac>
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d016      	beq.n	80068dc <USBD_StdEPReq+0xd8>
 80068ae:	e02c      	b.n	800690a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068b0:	7bbb      	ldrb	r3, [r7, #14]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00d      	beq.n	80068d2 <USBD_StdEPReq+0xce>
 80068b6:	7bbb      	ldrb	r3, [r7, #14]
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d00a      	beq.n	80068d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 f985 	bl	8007bd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068c6:	2180      	movs	r1, #128	; 0x80
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 f981 	bl	8007bd0 <USBD_LL_StallEP>
 80068ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068d0:	e020      	b.n	8006914 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80068d2:	6839      	ldr	r1, [r7, #0]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fc7a 	bl	80071ce <USBD_CtlError>
              break;
 80068da:	e01b      	b.n	8006914 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	885b      	ldrh	r3, [r3, #2]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10e      	bne.n	8006902 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00b      	beq.n	8006902 <USBD_StdEPReq+0xfe>
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	d008      	beq.n	8006902 <USBD_StdEPReq+0xfe>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	88db      	ldrh	r3, [r3, #6]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 f967 	bl	8007bd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fd2e 	bl	8007364 <USBD_CtlSendStatus>

              break;
 8006908:	e004      	b.n	8006914 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc5e 	bl	80071ce <USBD_CtlError>
              break;
 8006912:	bf00      	nop
          }
          break;
 8006914:	e107      	b.n	8006b26 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d002      	beq.n	8006928 <USBD_StdEPReq+0x124>
 8006922:	2b03      	cmp	r3, #3
 8006924:	d016      	beq.n	8006954 <USBD_StdEPReq+0x150>
 8006926:	e04b      	b.n	80069c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00d      	beq.n	800694a <USBD_StdEPReq+0x146>
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d00a      	beq.n	800694a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006934:	7bbb      	ldrb	r3, [r7, #14]
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 f949 	bl	8007bd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800693e:	2180      	movs	r1, #128	; 0x80
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 f945 	bl	8007bd0 <USBD_LL_StallEP>
 8006946:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006948:	e040      	b.n	80069cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fc3e 	bl	80071ce <USBD_CtlError>
              break;
 8006952:	e03b      	b.n	80069cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	885b      	ldrh	r3, [r3, #2]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d136      	bne.n	80069ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006966:	7bbb      	ldrb	r3, [r7, #14]
 8006968:	4619      	mov	r1, r3
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f001 f94f 	bl	8007c0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fcf7 	bl	8007364 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fde2 	bl	8006544 <USBD_CoreFindEP>
 8006980:	4603      	mov	r3, r0
 8006982:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006984:	7b7b      	ldrb	r3, [r7, #13]
 8006986:	2bff      	cmp	r3, #255	; 0xff
 8006988:	d01f      	beq.n	80069ca <USBD_StdEPReq+0x1c6>
 800698a:	7b7b      	ldrb	r3, [r7, #13]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d11c      	bne.n	80069ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006990:	7b7a      	ldrb	r2, [r7, #13]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006998:	7b7a      	ldrb	r2, [r7, #13]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	32ae      	adds	r2, #174	; 0xae
 800699e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d010      	beq.n	80069ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069a8:	7b7a      	ldrb	r2, [r7, #13]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32ae      	adds	r2, #174	; 0xae
 80069ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80069be:	e004      	b.n	80069ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fc03 	bl	80071ce <USBD_CtlError>
              break;
 80069c8:	e000      	b.n	80069cc <USBD_StdEPReq+0x1c8>
              break;
 80069ca:	bf00      	nop
          }
          break;
 80069cc:	e0ab      	b.n	8006b26 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d002      	beq.n	80069e0 <USBD_StdEPReq+0x1dc>
 80069da:	2b03      	cmp	r3, #3
 80069dc:	d032      	beq.n	8006a44 <USBD_StdEPReq+0x240>
 80069de:	e097      	b.n	8006b10 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <USBD_StdEPReq+0x1f2>
 80069e6:	7bbb      	ldrb	r3, [r7, #14]
 80069e8:	2b80      	cmp	r3, #128	; 0x80
 80069ea:	d004      	beq.n	80069f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fbed 	bl	80071ce <USBD_CtlError>
                break;
 80069f4:	e091      	b.n	8006b1a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	da0b      	bge.n	8006a16 <USBD_StdEPReq+0x212>
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	3310      	adds	r3, #16
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	4413      	add	r3, r2
 8006a12:	3304      	adds	r3, #4
 8006a14:	e00b      	b.n	8006a2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fc37 	bl	80072b0 <USBD_CtlSendData>
              break;
 8006a42:	e06a      	b.n	8006b1a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	da11      	bge.n	8006a70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a4c:	7bbb      	ldrb	r3, [r7, #14]
 8006a4e:	f003 020f 	and.w	r2, r3, #15
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	4613      	mov	r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3324      	adds	r3, #36	; 0x24
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d117      	bne.n	8006a96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fbb0 	bl	80071ce <USBD_CtlError>
                  break;
 8006a6e:	e054      	b.n	8006b1a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	f003 020f 	and.w	r2, r3, #15
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a86:	881b      	ldrh	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fb9d 	bl	80071ce <USBD_CtlError>
                  break;
 8006a94:	e041      	b.n	8006b1a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da0b      	bge.n	8006ab6 <USBD_StdEPReq+0x2b2>
 8006a9e:	7bbb      	ldrb	r3, [r7, #14]
 8006aa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	3310      	adds	r3, #16
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	e00b      	b.n	8006ace <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ab6:	7bbb      	ldrb	r3, [r7, #14]
 8006ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	4413      	add	r3, r2
 8006acc:	3304      	adds	r3, #4
 8006ace:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <USBD_StdEPReq+0x2d8>
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d103      	bne.n	8006ae4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	e00e      	b.n	8006b02 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ae4:	7bbb      	ldrb	r3, [r7, #14]
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 f8af 	bl	8007c4c <USBD_LL_IsStallEP>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2202      	movs	r2, #2
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fbd1 	bl	80072b0 <USBD_CtlSendData>
              break;
 8006b0e:	e004      	b.n	8006b1a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fb5b 	bl	80071ce <USBD_CtlError>
              break;
 8006b18:	bf00      	nop
          }
          break;
 8006b1a:	e004      	b.n	8006b26 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b1c:	6839      	ldr	r1, [r7, #0]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fb55 	bl	80071ce <USBD_CtlError>
          break;
 8006b24:	bf00      	nop
      }
      break;
 8006b26:	e005      	b.n	8006b34 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fb4f 	bl	80071ce <USBD_CtlError>
      break;
 8006b30:	e000      	b.n	8006b34 <USBD_StdEPReq+0x330>
      break;
 8006b32:	bf00      	nop
  }

  return ret;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	885b      	ldrh	r3, [r3, #2]
 8006b5a:	0a1b      	lsrs	r3, r3, #8
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	2b06      	cmp	r3, #6
 8006b62:	f200 8128 	bhi.w	8006db6 <USBD_GetDescriptor+0x276>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <USBD_GetDescriptor+0x2c>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006ba1 	.word	0x08006ba1
 8006b74:	08006be1 	.word	0x08006be1
 8006b78:	08006db7 	.word	0x08006db7
 8006b7c:	08006db7 	.word	0x08006db7
 8006b80:	08006d57 	.word	0x08006d57
 8006b84:	08006d83 	.word	0x08006d83
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	7c12      	ldrb	r2, [r2, #16]
 8006b94:	f107 0108 	add.w	r1, r7, #8
 8006b98:	4610      	mov	r0, r2
 8006b9a:	4798      	blx	r3
 8006b9c:	60f8      	str	r0, [r7, #12]
      break;
 8006b9e:	e112      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	7c1b      	ldrb	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10d      	bne.n	8006bc4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb0:	f107 0208 	add.w	r2, r7, #8
 8006bb4:	4610      	mov	r0, r2
 8006bb6:	4798      	blx	r3
 8006bb8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bc2:	e100      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	f107 0208 	add.w	r2, r7, #8
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	2202      	movs	r2, #2
 8006bdc:	701a      	strb	r2, [r3, #0]
      break;
 8006bde:	e0f2      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	885b      	ldrh	r3, [r3, #2]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b05      	cmp	r3, #5
 8006be8:	f200 80ac 	bhi.w	8006d44 <USBD_GetDescriptor+0x204>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <USBD_GetDescriptor+0xb4>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c0d 	.word	0x08006c0d
 8006bf8:	08006c41 	.word	0x08006c41
 8006bfc:	08006c75 	.word	0x08006c75
 8006c00:	08006ca9 	.word	0x08006ca9
 8006c04:	08006cdd 	.word	0x08006cdd
 8006c08:	08006d11 	.word	0x08006d11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00b      	beq.n	8006c30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	7c12      	ldrb	r2, [r2, #16]
 8006c24:	f107 0108 	add.w	r1, r7, #8
 8006c28:	4610      	mov	r0, r2
 8006c2a:	4798      	blx	r3
 8006c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c2e:	e091      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 facb 	bl	80071ce <USBD_CtlError>
            err++;
 8006c38:	7afb      	ldrb	r3, [r7, #11]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c3e:	e089      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00b      	beq.n	8006c64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	7c12      	ldrb	r2, [r2, #16]
 8006c58:	f107 0108 	add.w	r1, r7, #8
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c62:	e077      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fab1 	bl	80071ce <USBD_CtlError>
            err++;
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	72fb      	strb	r3, [r7, #11]
          break;
 8006c72:	e06f      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00b      	beq.n	8006c98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	7c12      	ldrb	r2, [r2, #16]
 8006c8c:	f107 0108 	add.w	r1, r7, #8
 8006c90:	4610      	mov	r0, r2
 8006c92:	4798      	blx	r3
 8006c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c96:	e05d      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa97 	bl	80071ce <USBD_CtlError>
            err++;
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ca6:	e055      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	7c12      	ldrb	r2, [r2, #16]
 8006cc0:	f107 0108 	add.w	r1, r7, #8
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4798      	blx	r3
 8006cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cca:	e043      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa7d 	bl	80071ce <USBD_CtlError>
            err++;
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cda:	e03b      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	7c12      	ldrb	r2, [r2, #16]
 8006cf4:	f107 0108 	add.w	r1, r7, #8
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	4798      	blx	r3
 8006cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cfe:	e029      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa63 	bl	80071ce <USBD_CtlError>
            err++;
 8006d08:	7afb      	ldrb	r3, [r7, #11]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d0e:	e021      	b.n	8006d54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	7c12      	ldrb	r2, [r2, #16]
 8006d28:	f107 0108 	add.w	r1, r7, #8
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d32:	e00f      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fa49 	bl	80071ce <USBD_CtlError>
            err++;
 8006d3c:	7afb      	ldrb	r3, [r7, #11]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	72fb      	strb	r3, [r7, #11]
          break;
 8006d42:	e007      	b.n	8006d54 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fa41 	bl	80071ce <USBD_CtlError>
          err++;
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006d52:	bf00      	nop
      }
      break;
 8006d54:	e037      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	7c1b      	ldrb	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d109      	bne.n	8006d72 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	f107 0208 	add.w	r2, r7, #8
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	4798      	blx	r3
 8006d6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d70:	e029      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fa2a 	bl	80071ce <USBD_CtlError>
        err++;
 8006d7a:	7afb      	ldrb	r3, [r7, #11]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d80:	e021      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7c1b      	ldrb	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10d      	bne.n	8006da6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	f107 0208 	add.w	r2, r7, #8
 8006d96:	4610      	mov	r0, r2
 8006d98:	4798      	blx	r3
 8006d9a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	2207      	movs	r2, #7
 8006da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006da4:	e00f      	b.n	8006dc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fa10 	bl	80071ce <USBD_CtlError>
        err++;
 8006dae:	7afb      	ldrb	r3, [r7, #11]
 8006db0:	3301      	adds	r3, #1
 8006db2:	72fb      	strb	r3, [r7, #11]
      break;
 8006db4:	e007      	b.n	8006dc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 fa08 	bl	80071ce <USBD_CtlError>
      err++;
 8006dbe:	7afb      	ldrb	r3, [r7, #11]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8006dc4:	bf00      	nop
  }

  if (err != 0U)
 8006dc6:	7afb      	ldrb	r3, [r7, #11]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11e      	bne.n	8006e0a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	88db      	ldrh	r3, [r3, #6]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d016      	beq.n	8006e02 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006dd4:	893b      	ldrh	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00e      	beq.n	8006df8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	88da      	ldrh	r2, [r3, #6]
 8006dde:	893b      	ldrh	r3, [r7, #8]
 8006de0:	4293      	cmp	r3, r2
 8006de2:	bf28      	it	cs
 8006de4:	4613      	movcs	r3, r2
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006dea:	893b      	ldrh	r3, [r7, #8]
 8006dec:	461a      	mov	r2, r3
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fa5d 	bl	80072b0 <USBD_CtlSendData>
 8006df6:	e009      	b.n	8006e0c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f9e7 	bl	80071ce <USBD_CtlError>
 8006e00:	e004      	b.n	8006e0c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 faae 	bl	8007364 <USBD_CtlSendStatus>
 8006e08:	e000      	b.n	8006e0c <USBD_GetDescriptor+0x2cc>
    return;
 8006e0a:	bf00      	nop
  }
}
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop

08006e14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	889b      	ldrh	r3, [r3, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d131      	bne.n	8006e8a <USBD_SetAddress+0x76>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	88db      	ldrh	r3, [r3, #6]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d12d      	bne.n	8006e8a <USBD_SetAddress+0x76>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	885b      	ldrh	r3, [r3, #2]
 8006e32:	2b7f      	cmp	r3, #127	; 0x7f
 8006e34:	d829      	bhi.n	8006e8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d104      	bne.n	8006e58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f9bc 	bl	80071ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e56:	e01d      	b.n	8006e94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	7bfa      	ldrb	r2, [r7, #15]
 8006e5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 ff1d 	bl	8007ca4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa7a 	bl	8007364 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e7e:	e009      	b.n	8006e94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e88:	e004      	b.n	8006e94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f99e 	bl	80071ce <USBD_CtlError>
  }
}
 8006e92:	bf00      	nop
 8006e94:	bf00      	nop
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	885b      	ldrh	r3, [r3, #2]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	4b4e      	ldr	r3, [pc, #312]	; (8006fec <USBD_SetConfig+0x150>)
 8006eb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006eb4:	4b4d      	ldr	r3, [pc, #308]	; (8006fec <USBD_SetConfig+0x150>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d905      	bls.n	8006ec8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f985 	bl	80071ce <USBD_CtlError>
    return USBD_FAIL;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e08c      	b.n	8006fe2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d002      	beq.n	8006eda <USBD_SetConfig+0x3e>
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d029      	beq.n	8006f2c <USBD_SetConfig+0x90>
 8006ed8:	e075      	b.n	8006fc6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006eda:	4b44      	ldr	r3, [pc, #272]	; (8006fec <USBD_SetConfig+0x150>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d020      	beq.n	8006f24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006ee2:	4b42      	ldr	r3, [pc, #264]	; (8006fec <USBD_SetConfig+0x150>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006eec:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <USBD_SetConfig+0x150>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe ffe7 	bl	8005ec6 <USBD_SetClassConfig>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f962 	bl	80071ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2202      	movs	r2, #2
 8006f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f12:	e065      	b.n	8006fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fa25 	bl	8007364 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f22:	e05d      	b.n	8006fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 fa1d 	bl	8007364 <USBD_CtlSendStatus>
      break;
 8006f2a:	e059      	b.n	8006fe0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f2c:	4b2f      	ldr	r3, [pc, #188]	; (8006fec <USBD_SetConfig+0x150>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d112      	bne.n	8006f5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f3c:	4b2b      	ldr	r3, [pc, #172]	; (8006fec <USBD_SetConfig+0x150>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f46:	4b29      	ldr	r3, [pc, #164]	; (8006fec <USBD_SetConfig+0x150>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fe ffd6 	bl	8005efe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa06 	bl	8007364 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f58:	e042      	b.n	8006fe0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f5a:	4b24      	ldr	r3, [pc, #144]	; (8006fec <USBD_SetConfig+0x150>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d02a      	beq.n	8006fbe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fe ffc4 	bl	8005efe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f76:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <USBD_SetConfig+0x150>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f80:	4b1a      	ldr	r3, [pc, #104]	; (8006fec <USBD_SetConfig+0x150>)
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fe ff9d 	bl	8005ec6 <USBD_SetClassConfig>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f918 	bl	80071ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fe ffa9 	bl	8005efe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fb4:	e014      	b.n	8006fe0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f9d4 	bl	8007364 <USBD_CtlSendStatus>
      break;
 8006fbc:	e010      	b.n	8006fe0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f9d0 	bl	8007364 <USBD_CtlSendStatus>
      break;
 8006fc4:	e00c      	b.n	8006fe0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 f900 	bl	80071ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fce:	4b07      	ldr	r3, [pc, #28]	; (8006fec <USBD_SetConfig+0x150>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f7fe ff92 	bl	8005efe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8006fde:	bf00      	nop
  }

  return ret;
 8006fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000248 	.word	0x20000248

08006ff0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d004      	beq.n	800700c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f8e2 	bl	80071ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800700a:	e023      	b.n	8007054 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	dc02      	bgt.n	800701e <USBD_GetConfig+0x2e>
 8007018:	2b00      	cmp	r3, #0
 800701a:	dc03      	bgt.n	8007024 <USBD_GetConfig+0x34>
 800701c:	e015      	b.n	800704a <USBD_GetConfig+0x5a>
 800701e:	2b03      	cmp	r3, #3
 8007020:	d00b      	beq.n	800703a <USBD_GetConfig+0x4a>
 8007022:	e012      	b.n	800704a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3308      	adds	r3, #8
 800702e:	2201      	movs	r2, #1
 8007030:	4619      	mov	r1, r3
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f93c 	bl	80072b0 <USBD_CtlSendData>
        break;
 8007038:	e00c      	b.n	8007054 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3304      	adds	r3, #4
 800703e:	2201      	movs	r2, #1
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f934 	bl	80072b0 <USBD_CtlSendData>
        break;
 8007048:	e004      	b.n	8007054 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8be 	bl	80071ce <USBD_CtlError>
        break;
 8007052:	bf00      	nop
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706c:	b2db      	uxtb	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	2b02      	cmp	r3, #2
 8007072:	d81e      	bhi.n	80070b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	88db      	ldrh	r3, [r3, #6]
 8007078:	2b02      	cmp	r3, #2
 800707a:	d004      	beq.n	8007086 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f8a5 	bl	80071ce <USBD_CtlError>
        break;
 8007084:	e01a      	b.n	80070bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007092:	2b00      	cmp	r3, #0
 8007094:	d005      	beq.n	80070a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f043 0202 	orr.w	r2, r3, #2
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	330c      	adds	r3, #12
 80070a6:	2202      	movs	r2, #2
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f900 	bl	80072b0 <USBD_CtlSendData>
      break;
 80070b0:	e004      	b.n	80070bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f88a 	bl	80071ce <USBD_CtlError>
      break;
 80070ba:	bf00      	nop
  }
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	885b      	ldrh	r3, [r3, #2]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d107      	bne.n	80070e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f940 	bl	8007364 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80070e4:	e013      	b.n	800710e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d10b      	bne.n	8007106 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	889b      	ldrh	r3, [r3, #4]
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f930 	bl	8007364 <USBD_CtlSendStatus>
}
 8007104:	e003      	b.n	800710e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f860 	bl	80071ce <USBD_CtlError>
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007126:	b2db      	uxtb	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	2b02      	cmp	r3, #2
 800712c:	d80b      	bhi.n	8007146 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	885b      	ldrh	r3, [r3, #2]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10c      	bne.n	8007150 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f910 	bl	8007364 <USBD_CtlSendStatus>
      }
      break;
 8007144:	e004      	b.n	8007150 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f840 	bl	80071ce <USBD_CtlError>
      break;
 800714e:	e000      	b.n	8007152 <USBD_ClrFeature+0x3c>
      break;
 8007150:	bf00      	nop
  }
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	781a      	ldrb	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	781a      	ldrb	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fa41 	bl	800660c <SWAPBYTE>
 800718a:	4603      	mov	r3, r0
 800718c:	461a      	mov	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3301      	adds	r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff fa34 	bl	800660c <SWAPBYTE>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3301      	adds	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff fa27 	bl	800660c <SWAPBYTE>
 80071be:	4603      	mov	r3, r0
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	80da      	strh	r2, [r3, #6]
}
 80071c6:	bf00      	nop
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b082      	sub	sp, #8
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fcf8 	bl	8007bd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80071e0:	2100      	movs	r1, #0
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fcf4 	bl	8007bd0 <USBD_LL_StallEP>
}
 80071e8:	bf00      	nop
 80071ea:	3708      	adds	r7, #8
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d036      	beq.n	8007274 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800720a:	6938      	ldr	r0, [r7, #16]
 800720c:	f000 f836 	bl	800727c <USBD_GetLen>
 8007210:	4603      	mov	r3, r0
 8007212:	3301      	adds	r3, #1
 8007214:	b29b      	uxth	r3, r3
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	4413      	add	r3, r2
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7812      	ldrb	r2, [r2, #0]
 8007228:	701a      	strb	r2, [r3, #0]
  idx++;
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	3301      	adds	r3, #1
 800722e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	4413      	add	r3, r2
 8007236:	2203      	movs	r2, #3
 8007238:	701a      	strb	r2, [r3, #0]
  idx++;
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	3301      	adds	r3, #1
 800723e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007240:	e013      	b.n	800726a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	4413      	add	r3, r2
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	7812      	ldrb	r2, [r2, #0]
 800724c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	3301      	adds	r3, #1
 8007252:	613b      	str	r3, [r7, #16]
    idx++;
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	3301      	adds	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	4413      	add	r3, r2
 8007260:	2200      	movs	r2, #0
 8007262:	701a      	strb	r2, [r3, #0]
    idx++;
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	3301      	adds	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e7      	bne.n	8007242 <USBD_GetString+0x52>
 8007272:	e000      	b.n	8007276 <USBD_GetString+0x86>
    return;
 8007274:	bf00      	nop
  }
}
 8007276:	3718      	adds	r7, #24
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800728c:	e005      	b.n	800729a <USBD_GetLen+0x1e>
  {
    len++;
 800728e:	7bfb      	ldrb	r3, [r7, #15]
 8007290:	3301      	adds	r3, #1
 8007292:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	3301      	adds	r3, #1
 8007298:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1f5      	bne.n	800728e <USBD_GetLen+0x12>
  }

  return len;
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2202      	movs	r2, #2
 80072c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	2100      	movs	r1, #0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 fd03 	bl	8007ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	2100      	movs	r1, #0
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 fcf2 	bl	8007ce2 <USBD_LL_Transmit>

  return USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2203      	movs	r2, #3
 8007318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	2100      	movs	r1, #0
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 fcf6 	bl	8007d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	2100      	movs	r1, #0
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 fce5 	bl	8007d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2204      	movs	r2, #4
 8007370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007374:	2300      	movs	r3, #0
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fcb1 	bl	8007ce2 <USBD_LL_Transmit>

  return USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2205      	movs	r2, #5
 8007396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800739a:	2300      	movs	r3, #0
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 fcbf 	bl	8007d24 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073b4:	2200      	movs	r2, #0
 80073b6:	4912      	ldr	r1, [pc, #72]	; (8007400 <MX_USB_DEVICE_Init+0x50>)
 80073b8:	4812      	ldr	r0, [pc, #72]	; (8007404 <MX_USB_DEVICE_Init+0x54>)
 80073ba:	f7fe fd07 	bl	8005dcc <USBD_Init>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073c4:	f7f9 fa3e 	bl	8000844 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073c8:	490f      	ldr	r1, [pc, #60]	; (8007408 <MX_USB_DEVICE_Init+0x58>)
 80073ca:	480e      	ldr	r0, [pc, #56]	; (8007404 <MX_USB_DEVICE_Init+0x54>)
 80073cc:	f7fe fd2e 	bl	8005e2c <USBD_RegisterClass>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80073d6:	f7f9 fa35 	bl	8000844 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80073da:	490c      	ldr	r1, [pc, #48]	; (800740c <MX_USB_DEVICE_Init+0x5c>)
 80073dc:	4809      	ldr	r0, [pc, #36]	; (8007404 <MX_USB_DEVICE_Init+0x54>)
 80073de:	f7fe fc1f 	bl	8005c20 <USBD_CDC_RegisterInterface>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80073e8:	f7f9 fa2c 	bl	8000844 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80073ec:	4805      	ldr	r0, [pc, #20]	; (8007404 <MX_USB_DEVICE_Init+0x54>)
 80073ee:	f7fe fd53 	bl	8005e98 <USBD_Start>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80073f8:	f7f9 fa24 	bl	8000844 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80073fc:	bf00      	nop
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	200000b0 	.word	0x200000b0
 8007404:	2000024c 	.word	0x2000024c
 8007408:	2000001c 	.word	0x2000001c
 800740c:	2000009c 	.word	0x2000009c

08007410 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007414:	2200      	movs	r2, #0
 8007416:	4905      	ldr	r1, [pc, #20]	; (800742c <CDC_Init_FS+0x1c>)
 8007418:	4805      	ldr	r0, [pc, #20]	; (8007430 <CDC_Init_FS+0x20>)
 800741a:	f7fe fc1b 	bl	8005c54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800741e:	4905      	ldr	r1, [pc, #20]	; (8007434 <CDC_Init_FS+0x24>)
 8007420:	4803      	ldr	r0, [pc, #12]	; (8007430 <CDC_Init_FS+0x20>)
 8007422:	f7fe fc39 	bl	8005c98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007426:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007428:	4618      	mov	r0, r3
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000d28 	.word	0x20000d28
 8007430:	2000024c 	.word	0x2000024c
 8007434:	20000528 	.word	0x20000528

08007438 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800743c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800743e:	4618      	mov	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	6039      	str	r1, [r7, #0]
 8007452:	71fb      	strb	r3, [r7, #7]
 8007454:	4613      	mov	r3, r2
 8007456:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b23      	cmp	r3, #35	; 0x23
 800745c:	d84a      	bhi.n	80074f4 <CDC_Control_FS+0xac>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <CDC_Control_FS+0x1c>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	080074f5 	.word	0x080074f5
 8007468:	080074f5 	.word	0x080074f5
 800746c:	080074f5 	.word	0x080074f5
 8007470:	080074f5 	.word	0x080074f5
 8007474:	080074f5 	.word	0x080074f5
 8007478:	080074f5 	.word	0x080074f5
 800747c:	080074f5 	.word	0x080074f5
 8007480:	080074f5 	.word	0x080074f5
 8007484:	080074f5 	.word	0x080074f5
 8007488:	080074f5 	.word	0x080074f5
 800748c:	080074f5 	.word	0x080074f5
 8007490:	080074f5 	.word	0x080074f5
 8007494:	080074f5 	.word	0x080074f5
 8007498:	080074f5 	.word	0x080074f5
 800749c:	080074f5 	.word	0x080074f5
 80074a0:	080074f5 	.word	0x080074f5
 80074a4:	080074f5 	.word	0x080074f5
 80074a8:	080074f5 	.word	0x080074f5
 80074ac:	080074f5 	.word	0x080074f5
 80074b0:	080074f5 	.word	0x080074f5
 80074b4:	080074f5 	.word	0x080074f5
 80074b8:	080074f5 	.word	0x080074f5
 80074bc:	080074f5 	.word	0x080074f5
 80074c0:	080074f5 	.word	0x080074f5
 80074c4:	080074f5 	.word	0x080074f5
 80074c8:	080074f5 	.word	0x080074f5
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074f5 	.word	0x080074f5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	080074f5 	.word	0x080074f5
 80074dc:	080074f5 	.word	0x080074f5
 80074e0:	080074f5 	.word	0x080074f5
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	080074f5 	.word	0x080074f5
 80074ec:	080074f5 	.word	0x080074f5
 80074f0:	080074f5 	.word	0x080074f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80074f4:	bf00      	nop
  }

  return (USBD_OK);
 80074f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	4810      	ldr	r0, [pc, #64]	; (8007554 <CDC_Receive_FS+0x50>)
 8007512:	f7fe fbc1 	bl	8005c98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007516:	480f      	ldr	r0, [pc, #60]	; (8007554 <CDC_Receive_FS+0x50>)
 8007518:	f7fe fc22 	bl	8005d60 <USBD_CDC_ReceivePacket>
  uint8_t len=(uint8_t)*Len;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	73fb      	strb	r3, [r7, #15]
  memset(buffer,'\0',64);
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	2100      	movs	r1, #0
 8007526:	480c      	ldr	r0, [pc, #48]	; (8007558 <CDC_Receive_FS+0x54>)
 8007528:	f000 fc94 	bl	8007e54 <memset>
  memcpy(buffer,Buf,len);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	461a      	mov	r2, r3
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4809      	ldr	r0, [pc, #36]	; (8007558 <CDC_Receive_FS+0x54>)
 8007534:	f000 fcc2 	bl	8007ebc <memcpy>
  memset(Buf,'\0',len);
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	461a      	mov	r2, r3
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fc88 	bl	8007e54 <memset>
  parseData(buffer);
 8007544:	4804      	ldr	r0, [pc, #16]	; (8007558 <CDC_Receive_FS+0x54>)
 8007546:	f7f9 fb85 	bl	8000c54 <parseData>
  return (USBD_OK);
 800754a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	2000024c 	.word	0x2000024c
 8007558:	200001f0 	.word	0x200001f0

0800755c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	460b      	mov	r3, r1
 8007566:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <CDC_Transmit_FS+0x48>)
 800756e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007572:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800757e:	2301      	movs	r3, #1
 8007580:	e00b      	b.n	800759a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007582:	887b      	ldrh	r3, [r7, #2]
 8007584:	461a      	mov	r2, r3
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4806      	ldr	r0, [pc, #24]	; (80075a4 <CDC_Transmit_FS+0x48>)
 800758a:	f7fe fb63 	bl	8005c54 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800758e:	4805      	ldr	r0, [pc, #20]	; (80075a4 <CDC_Transmit_FS+0x48>)
 8007590:	f7fe fba0 	bl	8005cd4 <USBD_CDC_TransmitPacket>
 8007594:	4603      	mov	r3, r0
 8007596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	2000024c 	.word	0x2000024c

080075a8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2212      	movs	r2, #18
 80075dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075de:	4b03      	ldr	r3, [pc, #12]	; (80075ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	200000cc 	.word	0x200000cc

080075f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	4603      	mov	r3, r0
 80075f8:	6039      	str	r1, [r7, #0]
 80075fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2204      	movs	r2, #4
 8007600:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007602:	4b03      	ldr	r3, [pc, #12]	; (8007610 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	200000e0 	.word	0x200000e0

08007614 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4907      	ldr	r1, [pc, #28]	; (8007648 <USBD_FS_ProductStrDescriptor+0x34>)
 800762a:	4808      	ldr	r0, [pc, #32]	; (800764c <USBD_FS_ProductStrDescriptor+0x38>)
 800762c:	f7ff fde0 	bl	80071f0 <USBD_GetString>
 8007630:	e004      	b.n	800763c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4904      	ldr	r1, [pc, #16]	; (8007648 <USBD_FS_ProductStrDescriptor+0x34>)
 8007636:	4805      	ldr	r0, [pc, #20]	; (800764c <USBD_FS_ProductStrDescriptor+0x38>)
 8007638:	f7ff fdda 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800763c:	4b02      	ldr	r3, [pc, #8]	; (8007648 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20001528 	.word	0x20001528
 800764c:	08008828 	.word	0x08008828

08007650 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	6039      	str	r1, [r7, #0]
 800765a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	4904      	ldr	r1, [pc, #16]	; (8007670 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007660:	4804      	ldr	r0, [pc, #16]	; (8007674 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007662:	f7ff fdc5 	bl	80071f0 <USBD_GetString>
  return USBD_StrDesc;
 8007666:	4b02      	ldr	r3, [pc, #8]	; (8007670 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20001528 	.word	0x20001528
 8007674:	08008840 	.word	0x08008840

08007678 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	221a      	movs	r2, #26
 8007688:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800768a:	f000 f843 	bl	8007714 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800768e:	4b02      	ldr	r3, [pc, #8]	; (8007698 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007690:	4618      	mov	r0, r3
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	200000e4 	.word	0x200000e4

0800769c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d105      	bne.n	80076ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	4907      	ldr	r1, [pc, #28]	; (80076d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076b2:	4808      	ldr	r0, [pc, #32]	; (80076d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076b4:	f7ff fd9c 	bl	80071f0 <USBD_GetString>
 80076b8:	e004      	b.n	80076c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	4904      	ldr	r1, [pc, #16]	; (80076d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076be:	4805      	ldr	r0, [pc, #20]	; (80076d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076c0:	f7ff fd96 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	20001528 	.word	0x20001528
 80076d4:	08008854 	.word	0x08008854

080076d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	4907      	ldr	r1, [pc, #28]	; (800770c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076ee:	4808      	ldr	r0, [pc, #32]	; (8007710 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076f0:	f7ff fd7e 	bl	80071f0 <USBD_GetString>
 80076f4:	e004      	b.n	8007700 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	4904      	ldr	r1, [pc, #16]	; (800770c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076fa:	4805      	ldr	r0, [pc, #20]	; (8007710 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076fc:	f7ff fd78 	bl	80071f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007700:	4b02      	ldr	r3, [pc, #8]	; (800770c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20001528 	.word	0x20001528
 8007710:	08008860 	.word	0x08008860

08007714 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800771a:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <Get_SerialNum+0x44>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007720:	4b0e      	ldr	r3, [pc, #56]	; (800775c <Get_SerialNum+0x48>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007726:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <Get_SerialNum+0x4c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4413      	add	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d009      	beq.n	800774e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800773a:	2208      	movs	r2, #8
 800773c:	4909      	ldr	r1, [pc, #36]	; (8007764 <Get_SerialNum+0x50>)
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f000 f814 	bl	800776c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007744:	2204      	movs	r2, #4
 8007746:	4908      	ldr	r1, [pc, #32]	; (8007768 <Get_SerialNum+0x54>)
 8007748:	68b8      	ldr	r0, [r7, #8]
 800774a:	f000 f80f 	bl	800776c <IntToUnicode>
  }
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	1fff7a10 	.word	0x1fff7a10
 800775c:	1fff7a14 	.word	0x1fff7a14
 8007760:	1fff7a18 	.word	0x1fff7a18
 8007764:	200000e6 	.word	0x200000e6
 8007768:	200000f6 	.word	0x200000f6

0800776c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800776c:	b480      	push	{r7}
 800776e:	b087      	sub	sp, #28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]
 8007782:	e027      	b.n	80077d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	0f1b      	lsrs	r3, r3, #28
 8007788:	2b09      	cmp	r3, #9
 800778a:	d80b      	bhi.n	80077a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	0f1b      	lsrs	r3, r3, #28
 8007790:	b2da      	uxtb	r2, r3
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4619      	mov	r1, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	440b      	add	r3, r1
 800779c:	3230      	adds	r2, #48	; 0x30
 800779e:	b2d2      	uxtb	r2, r2
 80077a0:	701a      	strb	r2, [r3, #0]
 80077a2:	e00a      	b.n	80077ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	0f1b      	lsrs	r3, r3, #28
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	4619      	mov	r1, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	440b      	add	r3, r1
 80077b4:	3237      	adds	r2, #55	; 0x37
 80077b6:	b2d2      	uxtb	r2, r2
 80077b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	3301      	adds	r3, #1
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	4413      	add	r3, r2
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	3301      	adds	r3, #1
 80077d2:	75fb      	strb	r3, [r7, #23]
 80077d4:	7dfa      	ldrb	r2, [r7, #23]
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d3d3      	bcc.n	8007784 <IntToUnicode+0x18>
  }
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
	...

080077ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077f4:	f107 0314 	add.w	r3, r7, #20
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	605a      	str	r2, [r3, #4]
 80077fe:	609a      	str	r2, [r3, #8]
 8007800:	60da      	str	r2, [r3, #12]
 8007802:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800780c:	d13a      	bne.n	8007884 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	4b1e      	ldr	r3, [pc, #120]	; (800788c <HAL_PCD_MspInit+0xa0>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	4a1d      	ldr	r2, [pc, #116]	; (800788c <HAL_PCD_MspInit+0xa0>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	6313      	str	r3, [r2, #48]	; 0x30
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <HAL_PCD_MspInit+0xa0>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	613b      	str	r3, [r7, #16]
 8007828:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800782a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800782e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007830:	2302      	movs	r3, #2
 8007832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007838:	2303      	movs	r3, #3
 800783a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800783c:	230a      	movs	r3, #10
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007840:	f107 0314 	add.w	r3, r7, #20
 8007844:	4619      	mov	r1, r3
 8007846:	4812      	ldr	r0, [pc, #72]	; (8007890 <HAL_PCD_MspInit+0xa4>)
 8007848:	f7f9 fd16 	bl	8001278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800784c:	4b0f      	ldr	r3, [pc, #60]	; (800788c <HAL_PCD_MspInit+0xa0>)
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	4a0e      	ldr	r2, [pc, #56]	; (800788c <HAL_PCD_MspInit+0xa0>)
 8007852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007856:	6353      	str	r3, [r2, #52]	; 0x34
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <HAL_PCD_MspInit+0xa0>)
 800785e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <HAL_PCD_MspInit+0xa0>)
 8007862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007866:	6453      	str	r3, [r2, #68]	; 0x44
 8007868:	4b08      	ldr	r3, [pc, #32]	; (800788c <HAL_PCD_MspInit+0xa0>)
 800786a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007874:	2200      	movs	r2, #0
 8007876:	2100      	movs	r1, #0
 8007878:	2043      	movs	r0, #67	; 0x43
 800787a:	f7f9 fcc6 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800787e:	2043      	movs	r0, #67	; 0x43
 8007880:	f7f9 fcdf 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007884:	bf00      	nop
 8007886:	3728      	adds	r7, #40	; 0x28
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	40023800 	.word	0x40023800
 8007890:	40020000 	.word	0x40020000

08007894 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7fe fb41 	bl	8005f32 <USBD_LL_SetupStage>
}
 80078b0:	bf00      	nop
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80078ca:	78fa      	ldrb	r2, [r7, #3]
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	440b      	add	r3, r1
 80078d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	4619      	mov	r1, r3
 80078e2:	f7fe fb7b 	bl	8005fdc <USBD_LL_DataOutStage>
}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4613      	mov	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	334c      	adds	r3, #76	; 0x4c
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	4619      	mov	r1, r3
 8007916:	f7fe fc14 	bl	8006142 <USBD_LL_DataInStage>
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe fd48 	bl	80063c6 <USBD_LL_SOF>
}
 8007936:	bf00      	nop
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
 8007956:	e008      	b.n	800796a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d102      	bne.n	8007966 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
 8007964:	e001      	b.n	800796a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007966:	f7f8 ff6d 	bl	8000844 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007970:	7bfa      	ldrb	r2, [r7, #15]
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe fce8 	bl	800634a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007980:	4618      	mov	r0, r3
 8007982:	f7fe fc90 	bl	80062a6 <USBD_LL_Reset>
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fce3 	bl	800636a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6812      	ldr	r2, [r2, #0]
 80079b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079b6:	f043 0301 	orr.w	r3, r3, #1
 80079ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079c4:	4b04      	ldr	r3, [pc, #16]	; (80079d8 <HAL_PCD_SuspendCallback+0x48>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	4a03      	ldr	r2, [pc, #12]	; (80079d8 <HAL_PCD_SuspendCallback+0x48>)
 80079ca:	f043 0306 	orr.w	r3, r3, #6
 80079ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079d0:	bf00      	nop
 80079d2:	3708      	adds	r7, #8
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	e000ed00 	.word	0xe000ed00

080079dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b082      	sub	sp, #8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fcd3 	bl	8006396 <USBD_LL_Resume>
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a0a:	78fa      	ldrb	r2, [r7, #3]
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fd2b 	bl	800646a <USBD_LL_IsoOUTIncomplete>
}
 8007a14:	bf00      	nop
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a2e:	78fa      	ldrb	r2, [r7, #3]
 8007a30:	4611      	mov	r1, r2
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fce7 	bl	8006406 <USBD_LL_IsoINIncomplete>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fe fd3d 	bl	80064ce <USBD_LL_DevConnected>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fd3a 	bl	80064e4 <USBD_LL_DevDisconnected>
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d13c      	bne.n	8007b02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a88:	4a20      	ldr	r2, [pc, #128]	; (8007b0c <USBD_LL_Init+0x94>)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <USBD_LL_Init+0x94>)
 8007a94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007a98:	4b1c      	ldr	r3, [pc, #112]	; (8007b0c <USBD_LL_Init+0x94>)
 8007a9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007a9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007aa0:	4b1a      	ldr	r3, [pc, #104]	; (8007b0c <USBD_LL_Init+0x94>)
 8007aa2:	2204      	movs	r2, #4
 8007aa4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <USBD_LL_Init+0x94>)
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007aac:	4b17      	ldr	r3, [pc, #92]	; (8007b0c <USBD_LL_Init+0x94>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ab2:	4b16      	ldr	r3, [pc, #88]	; (8007b0c <USBD_LL_Init+0x94>)
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ab8:	4b14      	ldr	r3, [pc, #80]	; (8007b0c <USBD_LL_Init+0x94>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <USBD_LL_Init+0x94>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ac4:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <USBD_LL_Init+0x94>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007aca:	4b10      	ldr	r3, [pc, #64]	; (8007b0c <USBD_LL_Init+0x94>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ad0:	4b0e      	ldr	r3, [pc, #56]	; (8007b0c <USBD_LL_Init+0x94>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ad6:	480d      	ldr	r0, [pc, #52]	; (8007b0c <USBD_LL_Init+0x94>)
 8007ad8:	f7f9 fd82 	bl	80015e0 <HAL_PCD_Init>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ae2:	f7f8 feaf 	bl	8000844 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ae6:	2180      	movs	r1, #128	; 0x80
 8007ae8:	4808      	ldr	r0, [pc, #32]	; (8007b0c <USBD_LL_Init+0x94>)
 8007aea:	f7fa ffda 	bl	8002aa2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007aee:	2240      	movs	r2, #64	; 0x40
 8007af0:	2100      	movs	r1, #0
 8007af2:	4806      	ldr	r0, [pc, #24]	; (8007b0c <USBD_LL_Init+0x94>)
 8007af4:	f7fa ff8e 	bl	8002a14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007af8:	2280      	movs	r2, #128	; 0x80
 8007afa:	2101      	movs	r1, #1
 8007afc:	4803      	ldr	r0, [pc, #12]	; (8007b0c <USBD_LL_Init+0x94>)
 8007afe:	f7fa ff89 	bl	8002a14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b02:	2300      	movs	r3, #0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20001728 	.word	0x20001728

08007b10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7f9 fe77 	bl	800181a <HAL_PCD_Start>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 f942 	bl	8007dbc <USBD_Get_USB_Status>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	4608      	mov	r0, r1
 8007b50:	4611      	mov	r1, r2
 8007b52:	461a      	mov	r2, r3
 8007b54:	4603      	mov	r3, r0
 8007b56:	70fb      	strb	r3, [r7, #3]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70bb      	strb	r3, [r7, #2]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007b6e:	78bb      	ldrb	r3, [r7, #2]
 8007b70:	883a      	ldrh	r2, [r7, #0]
 8007b72:	78f9      	ldrb	r1, [r7, #3]
 8007b74:	f7fa fb48 	bl	8002208 <HAL_PCD_EP_Open>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 f91c 	bl	8007dbc <USBD_Get_USB_Status>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}

08007b92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b084      	sub	sp, #16
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bac:	78fa      	ldrb	r2, [r7, #3]
 8007bae:	4611      	mov	r1, r2
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fa fb91 	bl	80022d8 <HAL_PCD_EP_Close>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 f8fd 	bl	8007dbc <USBD_Get_USB_Status>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fa fc69 	bl	80024c6 <HAL_PCD_EP_SetStall>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f8de 	bl	8007dbc <USBD_Get_USB_Status>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	460b      	mov	r3, r1
 8007c18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fa fcae 	bl	800258e <HAL_PCD_EP_ClrStall>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f8bf 	bl	8007dbc <USBD_Get_USB_Status>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	da0b      	bge.n	8007c80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c6e:	68f9      	ldr	r1, [r7, #12]
 8007c70:	4613      	mov	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	333e      	adds	r3, #62	; 0x3e
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	e00b      	b.n	8007c98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007c96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cbe:	78fa      	ldrb	r2, [r7, #3]
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fa fa7b 	bl	80021be <HAL_PCD_SetAddress>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f000 f874 	bl	8007dbc <USBD_Get_USB_Status>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b086      	sub	sp, #24
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d00:	7af9      	ldrb	r1, [r7, #11]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	f7fa fb94 	bl	8002432 <HAL_PCD_EP_Transmit>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f000 f853 	bl	8007dbc <USBD_Get_USB_Status>
 8007d16:	4603      	mov	r3, r0
 8007d18:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d1a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	460b      	mov	r3, r1
 8007d32:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d42:	7af9      	ldrb	r1, [r7, #11]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	f7fa fb10 	bl	800236c <HAL_PCD_EP_Receive>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f832 	bl	8007dbc <USBD_Get_USB_Status>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d78:	78fa      	ldrb	r2, [r7, #3]
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fa fb40 	bl	8002402 <HAL_PCD_EP_GetRxCount>
 8007d82:	4603      	mov	r3, r0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007d94:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <USBD_static_malloc+0x18>)
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20001c34 	.word	0x20001c34

08007da8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]

}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	2b03      	cmp	r3, #3
 8007dce:	d817      	bhi.n	8007e00 <USBD_Get_USB_Status+0x44>
 8007dd0:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <USBD_Get_USB_Status+0x1c>)
 8007dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd6:	bf00      	nop
 8007dd8:	08007de9 	.word	0x08007de9
 8007ddc:	08007def 	.word	0x08007def
 8007de0:	08007df5 	.word	0x08007df5
 8007de4:	08007dfb 	.word	0x08007dfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]
    break;
 8007dec:	e00b      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	73fb      	strb	r3, [r7, #15]
    break;
 8007df2:	e008      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007df4:	2301      	movs	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
    break;
 8007df8:	e005      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfe:	e002      	b.n	8007e06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e00:	2303      	movs	r3, #3
 8007e02:	73fb      	strb	r3, [r7, #15]
    break;
 8007e04:	bf00      	nop
  }
  return usb_status;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <siprintf>:
 8007e14:	b40e      	push	{r1, r2, r3}
 8007e16:	b500      	push	{lr}
 8007e18:	b09c      	sub	sp, #112	; 0x70
 8007e1a:	ab1d      	add	r3, sp, #116	; 0x74
 8007e1c:	9002      	str	r0, [sp, #8]
 8007e1e:	9006      	str	r0, [sp, #24]
 8007e20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e24:	4809      	ldr	r0, [pc, #36]	; (8007e4c <siprintf+0x38>)
 8007e26:	9107      	str	r1, [sp, #28]
 8007e28:	9104      	str	r1, [sp, #16]
 8007e2a:	4909      	ldr	r1, [pc, #36]	; (8007e50 <siprintf+0x3c>)
 8007e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e30:	9105      	str	r1, [sp, #20]
 8007e32:	6800      	ldr	r0, [r0, #0]
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	a902      	add	r1, sp, #8
 8007e38:	f000 f9a0 	bl	800817c <_svfiprintf_r>
 8007e3c:	9b02      	ldr	r3, [sp, #8]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	b01c      	add	sp, #112	; 0x70
 8007e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e48:	b003      	add	sp, #12
 8007e4a:	4770      	bx	lr
 8007e4c:	2000014c 	.word	0x2000014c
 8007e50:	ffff0208 	.word	0xffff0208

08007e54 <memset>:
 8007e54:	4402      	add	r2, r0
 8007e56:	4603      	mov	r3, r0
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d100      	bne.n	8007e5e <memset+0xa>
 8007e5c:	4770      	bx	lr
 8007e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e62:	e7f9      	b.n	8007e58 <memset+0x4>

08007e64 <__errno>:
 8007e64:	4b01      	ldr	r3, [pc, #4]	; (8007e6c <__errno+0x8>)
 8007e66:	6818      	ldr	r0, [r3, #0]
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	2000014c 	.word	0x2000014c

08007e70 <__libc_init_array>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	4d0d      	ldr	r5, [pc, #52]	; (8007ea8 <__libc_init_array+0x38>)
 8007e74:	4c0d      	ldr	r4, [pc, #52]	; (8007eac <__libc_init_array+0x3c>)
 8007e76:	1b64      	subs	r4, r4, r5
 8007e78:	10a4      	asrs	r4, r4, #2
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	d109      	bne.n	8007e94 <__libc_init_array+0x24>
 8007e80:	4d0b      	ldr	r5, [pc, #44]	; (8007eb0 <__libc_init_array+0x40>)
 8007e82:	4c0c      	ldr	r4, [pc, #48]	; (8007eb4 <__libc_init_array+0x44>)
 8007e84:	f000 fc6a 	bl	800875c <_init>
 8007e88:	1b64      	subs	r4, r4, r5
 8007e8a:	10a4      	asrs	r4, r4, #2
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	42a6      	cmp	r6, r4
 8007e90:	d105      	bne.n	8007e9e <__libc_init_array+0x2e>
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e98:	4798      	blx	r3
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7ee      	b.n	8007e7c <__libc_init_array+0xc>
 8007e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea2:	4798      	blx	r3
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	e7f2      	b.n	8007e8e <__libc_init_array+0x1e>
 8007ea8:	080088bc 	.word	0x080088bc
 8007eac:	080088bc 	.word	0x080088bc
 8007eb0:	080088bc 	.word	0x080088bc
 8007eb4:	080088c0 	.word	0x080088c0

08007eb8 <__retarget_lock_acquire_recursive>:
 8007eb8:	4770      	bx	lr

08007eba <__retarget_lock_release_recursive>:
 8007eba:	4770      	bx	lr

08007ebc <memcpy>:
 8007ebc:	440a      	add	r2, r1
 8007ebe:	4291      	cmp	r1, r2
 8007ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ec4:	d100      	bne.n	8007ec8 <memcpy+0xc>
 8007ec6:	4770      	bx	lr
 8007ec8:	b510      	push	{r4, lr}
 8007eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ed2:	4291      	cmp	r1, r2
 8007ed4:	d1f9      	bne.n	8007eca <memcpy+0xe>
 8007ed6:	bd10      	pop	{r4, pc}

08007ed8 <_free_r>:
 8007ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007eda:	2900      	cmp	r1, #0
 8007edc:	d044      	beq.n	8007f68 <_free_r+0x90>
 8007ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ee2:	9001      	str	r0, [sp, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8007eea:	bfb8      	it	lt
 8007eec:	18e4      	addlt	r4, r4, r3
 8007eee:	f000 f8df 	bl	80080b0 <__malloc_lock>
 8007ef2:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <_free_r+0x94>)
 8007ef4:	9801      	ldr	r0, [sp, #4]
 8007ef6:	6813      	ldr	r3, [r2, #0]
 8007ef8:	b933      	cbnz	r3, 8007f08 <_free_r+0x30>
 8007efa:	6063      	str	r3, [r4, #4]
 8007efc:	6014      	str	r4, [r2, #0]
 8007efe:	b003      	add	sp, #12
 8007f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f04:	f000 b8da 	b.w	80080bc <__malloc_unlock>
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d908      	bls.n	8007f1e <_free_r+0x46>
 8007f0c:	6825      	ldr	r5, [r4, #0]
 8007f0e:	1961      	adds	r1, r4, r5
 8007f10:	428b      	cmp	r3, r1
 8007f12:	bf01      	itttt	eq
 8007f14:	6819      	ldreq	r1, [r3, #0]
 8007f16:	685b      	ldreq	r3, [r3, #4]
 8007f18:	1949      	addeq	r1, r1, r5
 8007f1a:	6021      	streq	r1, [r4, #0]
 8007f1c:	e7ed      	b.n	8007efa <_free_r+0x22>
 8007f1e:	461a      	mov	r2, r3
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	b10b      	cbz	r3, 8007f28 <_free_r+0x50>
 8007f24:	42a3      	cmp	r3, r4
 8007f26:	d9fa      	bls.n	8007f1e <_free_r+0x46>
 8007f28:	6811      	ldr	r1, [r2, #0]
 8007f2a:	1855      	adds	r5, r2, r1
 8007f2c:	42a5      	cmp	r5, r4
 8007f2e:	d10b      	bne.n	8007f48 <_free_r+0x70>
 8007f30:	6824      	ldr	r4, [r4, #0]
 8007f32:	4421      	add	r1, r4
 8007f34:	1854      	adds	r4, r2, r1
 8007f36:	42a3      	cmp	r3, r4
 8007f38:	6011      	str	r1, [r2, #0]
 8007f3a:	d1e0      	bne.n	8007efe <_free_r+0x26>
 8007f3c:	681c      	ldr	r4, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	6053      	str	r3, [r2, #4]
 8007f42:	440c      	add	r4, r1
 8007f44:	6014      	str	r4, [r2, #0]
 8007f46:	e7da      	b.n	8007efe <_free_r+0x26>
 8007f48:	d902      	bls.n	8007f50 <_free_r+0x78>
 8007f4a:	230c      	movs	r3, #12
 8007f4c:	6003      	str	r3, [r0, #0]
 8007f4e:	e7d6      	b.n	8007efe <_free_r+0x26>
 8007f50:	6825      	ldr	r5, [r4, #0]
 8007f52:	1961      	adds	r1, r4, r5
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf04      	itt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	6063      	str	r3, [r4, #4]
 8007f5e:	bf04      	itt	eq
 8007f60:	1949      	addeq	r1, r1, r5
 8007f62:	6021      	streq	r1, [r4, #0]
 8007f64:	6054      	str	r4, [r2, #4]
 8007f66:	e7ca      	b.n	8007efe <_free_r+0x26>
 8007f68:	b003      	add	sp, #12
 8007f6a:	bd30      	pop	{r4, r5, pc}
 8007f6c:	20001f94 	.word	0x20001f94

08007f70 <sbrk_aligned>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	4e0e      	ldr	r6, [pc, #56]	; (8007fac <sbrk_aligned+0x3c>)
 8007f74:	460c      	mov	r4, r1
 8007f76:	6831      	ldr	r1, [r6, #0]
 8007f78:	4605      	mov	r5, r0
 8007f7a:	b911      	cbnz	r1, 8007f82 <sbrk_aligned+0x12>
 8007f7c:	f000 fba6 	bl	80086cc <_sbrk_r>
 8007f80:	6030      	str	r0, [r6, #0]
 8007f82:	4621      	mov	r1, r4
 8007f84:	4628      	mov	r0, r5
 8007f86:	f000 fba1 	bl	80086cc <_sbrk_r>
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	d00a      	beq.n	8007fa4 <sbrk_aligned+0x34>
 8007f8e:	1cc4      	adds	r4, r0, #3
 8007f90:	f024 0403 	bic.w	r4, r4, #3
 8007f94:	42a0      	cmp	r0, r4
 8007f96:	d007      	beq.n	8007fa8 <sbrk_aligned+0x38>
 8007f98:	1a21      	subs	r1, r4, r0
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 fb96 	bl	80086cc <_sbrk_r>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d101      	bne.n	8007fa8 <sbrk_aligned+0x38>
 8007fa4:	f04f 34ff 	mov.w	r4, #4294967295
 8007fa8:	4620      	mov	r0, r4
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	20001f98 	.word	0x20001f98

08007fb0 <_malloc_r>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	1ccd      	adds	r5, r1, #3
 8007fb6:	f025 0503 	bic.w	r5, r5, #3
 8007fba:	3508      	adds	r5, #8
 8007fbc:	2d0c      	cmp	r5, #12
 8007fbe:	bf38      	it	cc
 8007fc0:	250c      	movcc	r5, #12
 8007fc2:	2d00      	cmp	r5, #0
 8007fc4:	4607      	mov	r7, r0
 8007fc6:	db01      	blt.n	8007fcc <_malloc_r+0x1c>
 8007fc8:	42a9      	cmp	r1, r5
 8007fca:	d905      	bls.n	8007fd8 <_malloc_r+0x28>
 8007fcc:	230c      	movs	r3, #12
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	2600      	movs	r6, #0
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080ac <_malloc_r+0xfc>
 8007fdc:	f000 f868 	bl	80080b0 <__malloc_lock>
 8007fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fe4:	461c      	mov	r4, r3
 8007fe6:	bb5c      	cbnz	r4, 8008040 <_malloc_r+0x90>
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4638      	mov	r0, r7
 8007fec:	f7ff ffc0 	bl	8007f70 <sbrk_aligned>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	4604      	mov	r4, r0
 8007ff4:	d155      	bne.n	80080a2 <_malloc_r+0xf2>
 8007ff6:	f8d8 4000 	ldr.w	r4, [r8]
 8007ffa:	4626      	mov	r6, r4
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	d145      	bne.n	800808c <_malloc_r+0xdc>
 8008000:	2c00      	cmp	r4, #0
 8008002:	d048      	beq.n	8008096 <_malloc_r+0xe6>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	4631      	mov	r1, r6
 8008008:	4638      	mov	r0, r7
 800800a:	eb04 0903 	add.w	r9, r4, r3
 800800e:	f000 fb5d 	bl	80086cc <_sbrk_r>
 8008012:	4581      	cmp	r9, r0
 8008014:	d13f      	bne.n	8008096 <_malloc_r+0xe6>
 8008016:	6821      	ldr	r1, [r4, #0]
 8008018:	1a6d      	subs	r5, r5, r1
 800801a:	4629      	mov	r1, r5
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff ffa7 	bl	8007f70 <sbrk_aligned>
 8008022:	3001      	adds	r0, #1
 8008024:	d037      	beq.n	8008096 <_malloc_r+0xe6>
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	442b      	add	r3, r5
 800802a:	6023      	str	r3, [r4, #0]
 800802c:	f8d8 3000 	ldr.w	r3, [r8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d038      	beq.n	80080a6 <_malloc_r+0xf6>
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	42a2      	cmp	r2, r4
 8008038:	d12b      	bne.n	8008092 <_malloc_r+0xe2>
 800803a:	2200      	movs	r2, #0
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	e00f      	b.n	8008060 <_malloc_r+0xb0>
 8008040:	6822      	ldr	r2, [r4, #0]
 8008042:	1b52      	subs	r2, r2, r5
 8008044:	d41f      	bmi.n	8008086 <_malloc_r+0xd6>
 8008046:	2a0b      	cmp	r2, #11
 8008048:	d917      	bls.n	800807a <_malloc_r+0xca>
 800804a:	1961      	adds	r1, r4, r5
 800804c:	42a3      	cmp	r3, r4
 800804e:	6025      	str	r5, [r4, #0]
 8008050:	bf18      	it	ne
 8008052:	6059      	strne	r1, [r3, #4]
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	bf08      	it	eq
 8008058:	f8c8 1000 	streq.w	r1, [r8]
 800805c:	5162      	str	r2, [r4, r5]
 800805e:	604b      	str	r3, [r1, #4]
 8008060:	4638      	mov	r0, r7
 8008062:	f104 060b 	add.w	r6, r4, #11
 8008066:	f000 f829 	bl	80080bc <__malloc_unlock>
 800806a:	f026 0607 	bic.w	r6, r6, #7
 800806e:	1d23      	adds	r3, r4, #4
 8008070:	1af2      	subs	r2, r6, r3
 8008072:	d0ae      	beq.n	8007fd2 <_malloc_r+0x22>
 8008074:	1b9b      	subs	r3, r3, r6
 8008076:	50a3      	str	r3, [r4, r2]
 8008078:	e7ab      	b.n	8007fd2 <_malloc_r+0x22>
 800807a:	42a3      	cmp	r3, r4
 800807c:	6862      	ldr	r2, [r4, #4]
 800807e:	d1dd      	bne.n	800803c <_malloc_r+0x8c>
 8008080:	f8c8 2000 	str.w	r2, [r8]
 8008084:	e7ec      	b.n	8008060 <_malloc_r+0xb0>
 8008086:	4623      	mov	r3, r4
 8008088:	6864      	ldr	r4, [r4, #4]
 800808a:	e7ac      	b.n	8007fe6 <_malloc_r+0x36>
 800808c:	4634      	mov	r4, r6
 800808e:	6876      	ldr	r6, [r6, #4]
 8008090:	e7b4      	b.n	8007ffc <_malloc_r+0x4c>
 8008092:	4613      	mov	r3, r2
 8008094:	e7cc      	b.n	8008030 <_malloc_r+0x80>
 8008096:	230c      	movs	r3, #12
 8008098:	603b      	str	r3, [r7, #0]
 800809a:	4638      	mov	r0, r7
 800809c:	f000 f80e 	bl	80080bc <__malloc_unlock>
 80080a0:	e797      	b.n	8007fd2 <_malloc_r+0x22>
 80080a2:	6025      	str	r5, [r4, #0]
 80080a4:	e7dc      	b.n	8008060 <_malloc_r+0xb0>
 80080a6:	605b      	str	r3, [r3, #4]
 80080a8:	deff      	udf	#255	; 0xff
 80080aa:	bf00      	nop
 80080ac:	20001f94 	.word	0x20001f94

080080b0 <__malloc_lock>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__malloc_lock+0x8>)
 80080b2:	f7ff bf01 	b.w	8007eb8 <__retarget_lock_acquire_recursive>
 80080b6:	bf00      	nop
 80080b8:	20001f90 	.word	0x20001f90

080080bc <__malloc_unlock>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__malloc_unlock+0x8>)
 80080be:	f7ff befc 	b.w	8007eba <__retarget_lock_release_recursive>
 80080c2:	bf00      	nop
 80080c4:	20001f90 	.word	0x20001f90

080080c8 <__ssputs_r>:
 80080c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	688e      	ldr	r6, [r1, #8]
 80080ce:	461f      	mov	r7, r3
 80080d0:	42be      	cmp	r6, r7
 80080d2:	680b      	ldr	r3, [r1, #0]
 80080d4:	4682      	mov	sl, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	4690      	mov	r8, r2
 80080da:	d82c      	bhi.n	8008136 <__ssputs_r+0x6e>
 80080dc:	898a      	ldrh	r2, [r1, #12]
 80080de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80080e2:	d026      	beq.n	8008132 <__ssputs_r+0x6a>
 80080e4:	6965      	ldr	r5, [r4, #20]
 80080e6:	6909      	ldr	r1, [r1, #16]
 80080e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080ec:	eba3 0901 	sub.w	r9, r3, r1
 80080f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080f4:	1c7b      	adds	r3, r7, #1
 80080f6:	444b      	add	r3, r9
 80080f8:	106d      	asrs	r5, r5, #1
 80080fa:	429d      	cmp	r5, r3
 80080fc:	bf38      	it	cc
 80080fe:	461d      	movcc	r5, r3
 8008100:	0553      	lsls	r3, r2, #21
 8008102:	d527      	bpl.n	8008154 <__ssputs_r+0x8c>
 8008104:	4629      	mov	r1, r5
 8008106:	f7ff ff53 	bl	8007fb0 <_malloc_r>
 800810a:	4606      	mov	r6, r0
 800810c:	b360      	cbz	r0, 8008168 <__ssputs_r+0xa0>
 800810e:	6921      	ldr	r1, [r4, #16]
 8008110:	464a      	mov	r2, r9
 8008112:	f7ff fed3 	bl	8007ebc <memcpy>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800811c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	6126      	str	r6, [r4, #16]
 8008124:	6165      	str	r5, [r4, #20]
 8008126:	444e      	add	r6, r9
 8008128:	eba5 0509 	sub.w	r5, r5, r9
 800812c:	6026      	str	r6, [r4, #0]
 800812e:	60a5      	str	r5, [r4, #8]
 8008130:	463e      	mov	r6, r7
 8008132:	42be      	cmp	r6, r7
 8008134:	d900      	bls.n	8008138 <__ssputs_r+0x70>
 8008136:	463e      	mov	r6, r7
 8008138:	6820      	ldr	r0, [r4, #0]
 800813a:	4632      	mov	r2, r6
 800813c:	4641      	mov	r1, r8
 800813e:	f000 faab 	bl	8008698 <memmove>
 8008142:	68a3      	ldr	r3, [r4, #8]
 8008144:	1b9b      	subs	r3, r3, r6
 8008146:	60a3      	str	r3, [r4, #8]
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	4433      	add	r3, r6
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	2000      	movs	r0, #0
 8008150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008154:	462a      	mov	r2, r5
 8008156:	f000 fac9 	bl	80086ec <_realloc_r>
 800815a:	4606      	mov	r6, r0
 800815c:	2800      	cmp	r0, #0
 800815e:	d1e0      	bne.n	8008122 <__ssputs_r+0x5a>
 8008160:	6921      	ldr	r1, [r4, #16]
 8008162:	4650      	mov	r0, sl
 8008164:	f7ff feb8 	bl	8007ed8 <_free_r>
 8008168:	230c      	movs	r3, #12
 800816a:	f8ca 3000 	str.w	r3, [sl]
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	f04f 30ff 	mov.w	r0, #4294967295
 800817a:	e7e9      	b.n	8008150 <__ssputs_r+0x88>

0800817c <_svfiprintf_r>:
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	4698      	mov	r8, r3
 8008182:	898b      	ldrh	r3, [r1, #12]
 8008184:	061b      	lsls	r3, r3, #24
 8008186:	b09d      	sub	sp, #116	; 0x74
 8008188:	4607      	mov	r7, r0
 800818a:	460d      	mov	r5, r1
 800818c:	4614      	mov	r4, r2
 800818e:	d50e      	bpl.n	80081ae <_svfiprintf_r+0x32>
 8008190:	690b      	ldr	r3, [r1, #16]
 8008192:	b963      	cbnz	r3, 80081ae <_svfiprintf_r+0x32>
 8008194:	2140      	movs	r1, #64	; 0x40
 8008196:	f7ff ff0b 	bl	8007fb0 <_malloc_r>
 800819a:	6028      	str	r0, [r5, #0]
 800819c:	6128      	str	r0, [r5, #16]
 800819e:	b920      	cbnz	r0, 80081aa <_svfiprintf_r+0x2e>
 80081a0:	230c      	movs	r3, #12
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	e0d0      	b.n	800834c <_svfiprintf_r+0x1d0>
 80081aa:	2340      	movs	r3, #64	; 0x40
 80081ac:	616b      	str	r3, [r5, #20]
 80081ae:	2300      	movs	r3, #0
 80081b0:	9309      	str	r3, [sp, #36]	; 0x24
 80081b2:	2320      	movs	r3, #32
 80081b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80081bc:	2330      	movs	r3, #48	; 0x30
 80081be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008364 <_svfiprintf_r+0x1e8>
 80081c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081c6:	f04f 0901 	mov.w	r9, #1
 80081ca:	4623      	mov	r3, r4
 80081cc:	469a      	mov	sl, r3
 80081ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d2:	b10a      	cbz	r2, 80081d8 <_svfiprintf_r+0x5c>
 80081d4:	2a25      	cmp	r2, #37	; 0x25
 80081d6:	d1f9      	bne.n	80081cc <_svfiprintf_r+0x50>
 80081d8:	ebba 0b04 	subs.w	fp, sl, r4
 80081dc:	d00b      	beq.n	80081f6 <_svfiprintf_r+0x7a>
 80081de:	465b      	mov	r3, fp
 80081e0:	4622      	mov	r2, r4
 80081e2:	4629      	mov	r1, r5
 80081e4:	4638      	mov	r0, r7
 80081e6:	f7ff ff6f 	bl	80080c8 <__ssputs_r>
 80081ea:	3001      	adds	r0, #1
 80081ec:	f000 80a9 	beq.w	8008342 <_svfiprintf_r+0x1c6>
 80081f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081f2:	445a      	add	r2, fp
 80081f4:	9209      	str	r2, [sp, #36]	; 0x24
 80081f6:	f89a 3000 	ldrb.w	r3, [sl]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f000 80a1 	beq.w	8008342 <_svfiprintf_r+0x1c6>
 8008200:	2300      	movs	r3, #0
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800820a:	f10a 0a01 	add.w	sl, sl, #1
 800820e:	9304      	str	r3, [sp, #16]
 8008210:	9307      	str	r3, [sp, #28]
 8008212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008216:	931a      	str	r3, [sp, #104]	; 0x68
 8008218:	4654      	mov	r4, sl
 800821a:	2205      	movs	r2, #5
 800821c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008220:	4850      	ldr	r0, [pc, #320]	; (8008364 <_svfiprintf_r+0x1e8>)
 8008222:	f7f7 ffdd 	bl	80001e0 <memchr>
 8008226:	9a04      	ldr	r2, [sp, #16]
 8008228:	b9d8      	cbnz	r0, 8008262 <_svfiprintf_r+0xe6>
 800822a:	06d0      	lsls	r0, r2, #27
 800822c:	bf44      	itt	mi
 800822e:	2320      	movmi	r3, #32
 8008230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008234:	0711      	lsls	r1, r2, #28
 8008236:	bf44      	itt	mi
 8008238:	232b      	movmi	r3, #43	; 0x2b
 800823a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800823e:	f89a 3000 	ldrb.w	r3, [sl]
 8008242:	2b2a      	cmp	r3, #42	; 0x2a
 8008244:	d015      	beq.n	8008272 <_svfiprintf_r+0xf6>
 8008246:	9a07      	ldr	r2, [sp, #28]
 8008248:	4654      	mov	r4, sl
 800824a:	2000      	movs	r0, #0
 800824c:	f04f 0c0a 	mov.w	ip, #10
 8008250:	4621      	mov	r1, r4
 8008252:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008256:	3b30      	subs	r3, #48	; 0x30
 8008258:	2b09      	cmp	r3, #9
 800825a:	d94d      	bls.n	80082f8 <_svfiprintf_r+0x17c>
 800825c:	b1b0      	cbz	r0, 800828c <_svfiprintf_r+0x110>
 800825e:	9207      	str	r2, [sp, #28]
 8008260:	e014      	b.n	800828c <_svfiprintf_r+0x110>
 8008262:	eba0 0308 	sub.w	r3, r0, r8
 8008266:	fa09 f303 	lsl.w	r3, r9, r3
 800826a:	4313      	orrs	r3, r2
 800826c:	9304      	str	r3, [sp, #16]
 800826e:	46a2      	mov	sl, r4
 8008270:	e7d2      	b.n	8008218 <_svfiprintf_r+0x9c>
 8008272:	9b03      	ldr	r3, [sp, #12]
 8008274:	1d19      	adds	r1, r3, #4
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	9103      	str	r1, [sp, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	bfbb      	ittet	lt
 800827e:	425b      	neglt	r3, r3
 8008280:	f042 0202 	orrlt.w	r2, r2, #2
 8008284:	9307      	strge	r3, [sp, #28]
 8008286:	9307      	strlt	r3, [sp, #28]
 8008288:	bfb8      	it	lt
 800828a:	9204      	strlt	r2, [sp, #16]
 800828c:	7823      	ldrb	r3, [r4, #0]
 800828e:	2b2e      	cmp	r3, #46	; 0x2e
 8008290:	d10c      	bne.n	80082ac <_svfiprintf_r+0x130>
 8008292:	7863      	ldrb	r3, [r4, #1]
 8008294:	2b2a      	cmp	r3, #42	; 0x2a
 8008296:	d134      	bne.n	8008302 <_svfiprintf_r+0x186>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	1d1a      	adds	r2, r3, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	9203      	str	r2, [sp, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfb8      	it	lt
 80082a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80082a8:	3402      	adds	r4, #2
 80082aa:	9305      	str	r3, [sp, #20]
 80082ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008374 <_svfiprintf_r+0x1f8>
 80082b0:	7821      	ldrb	r1, [r4, #0]
 80082b2:	2203      	movs	r2, #3
 80082b4:	4650      	mov	r0, sl
 80082b6:	f7f7 ff93 	bl	80001e0 <memchr>
 80082ba:	b138      	cbz	r0, 80082cc <_svfiprintf_r+0x150>
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	eba0 000a 	sub.w	r0, r0, sl
 80082c2:	2240      	movs	r2, #64	; 0x40
 80082c4:	4082      	lsls	r2, r0
 80082c6:	4313      	orrs	r3, r2
 80082c8:	3401      	adds	r4, #1
 80082ca:	9304      	str	r3, [sp, #16]
 80082cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d0:	4825      	ldr	r0, [pc, #148]	; (8008368 <_svfiprintf_r+0x1ec>)
 80082d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082d6:	2206      	movs	r2, #6
 80082d8:	f7f7 ff82 	bl	80001e0 <memchr>
 80082dc:	2800      	cmp	r0, #0
 80082de:	d038      	beq.n	8008352 <_svfiprintf_r+0x1d6>
 80082e0:	4b22      	ldr	r3, [pc, #136]	; (800836c <_svfiprintf_r+0x1f0>)
 80082e2:	bb1b      	cbnz	r3, 800832c <_svfiprintf_r+0x1b0>
 80082e4:	9b03      	ldr	r3, [sp, #12]
 80082e6:	3307      	adds	r3, #7
 80082e8:	f023 0307 	bic.w	r3, r3, #7
 80082ec:	3308      	adds	r3, #8
 80082ee:	9303      	str	r3, [sp, #12]
 80082f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082f2:	4433      	add	r3, r6
 80082f4:	9309      	str	r3, [sp, #36]	; 0x24
 80082f6:	e768      	b.n	80081ca <_svfiprintf_r+0x4e>
 80082f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082fc:	460c      	mov	r4, r1
 80082fe:	2001      	movs	r0, #1
 8008300:	e7a6      	b.n	8008250 <_svfiprintf_r+0xd4>
 8008302:	2300      	movs	r3, #0
 8008304:	3401      	adds	r4, #1
 8008306:	9305      	str	r3, [sp, #20]
 8008308:	4619      	mov	r1, r3
 800830a:	f04f 0c0a 	mov.w	ip, #10
 800830e:	4620      	mov	r0, r4
 8008310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008314:	3a30      	subs	r2, #48	; 0x30
 8008316:	2a09      	cmp	r2, #9
 8008318:	d903      	bls.n	8008322 <_svfiprintf_r+0x1a6>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0c6      	beq.n	80082ac <_svfiprintf_r+0x130>
 800831e:	9105      	str	r1, [sp, #20]
 8008320:	e7c4      	b.n	80082ac <_svfiprintf_r+0x130>
 8008322:	fb0c 2101 	mla	r1, ip, r1, r2
 8008326:	4604      	mov	r4, r0
 8008328:	2301      	movs	r3, #1
 800832a:	e7f0      	b.n	800830e <_svfiprintf_r+0x192>
 800832c:	ab03      	add	r3, sp, #12
 800832e:	9300      	str	r3, [sp, #0]
 8008330:	462a      	mov	r2, r5
 8008332:	4b0f      	ldr	r3, [pc, #60]	; (8008370 <_svfiprintf_r+0x1f4>)
 8008334:	a904      	add	r1, sp, #16
 8008336:	4638      	mov	r0, r7
 8008338:	f3af 8000 	nop.w
 800833c:	1c42      	adds	r2, r0, #1
 800833e:	4606      	mov	r6, r0
 8008340:	d1d6      	bne.n	80082f0 <_svfiprintf_r+0x174>
 8008342:	89ab      	ldrh	r3, [r5, #12]
 8008344:	065b      	lsls	r3, r3, #25
 8008346:	f53f af2d 	bmi.w	80081a4 <_svfiprintf_r+0x28>
 800834a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800834c:	b01d      	add	sp, #116	; 0x74
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	ab03      	add	r3, sp, #12
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	462a      	mov	r2, r5
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <_svfiprintf_r+0x1f4>)
 800835a:	a904      	add	r1, sp, #16
 800835c:	4638      	mov	r0, r7
 800835e:	f000 f879 	bl	8008454 <_printf_i>
 8008362:	e7eb      	b.n	800833c <_svfiprintf_r+0x1c0>
 8008364:	08008880 	.word	0x08008880
 8008368:	0800888a 	.word	0x0800888a
 800836c:	00000000 	.word	0x00000000
 8008370:	080080c9 	.word	0x080080c9
 8008374:	08008886 	.word	0x08008886

08008378 <_printf_common>:
 8008378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800837c:	4616      	mov	r6, r2
 800837e:	4699      	mov	r9, r3
 8008380:	688a      	ldr	r2, [r1, #8]
 8008382:	690b      	ldr	r3, [r1, #16]
 8008384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008388:	4293      	cmp	r3, r2
 800838a:	bfb8      	it	lt
 800838c:	4613      	movlt	r3, r2
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008394:	4607      	mov	r7, r0
 8008396:	460c      	mov	r4, r1
 8008398:	b10a      	cbz	r2, 800839e <_printf_common+0x26>
 800839a:	3301      	adds	r3, #1
 800839c:	6033      	str	r3, [r6, #0]
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	0699      	lsls	r1, r3, #26
 80083a2:	bf42      	ittt	mi
 80083a4:	6833      	ldrmi	r3, [r6, #0]
 80083a6:	3302      	addmi	r3, #2
 80083a8:	6033      	strmi	r3, [r6, #0]
 80083aa:	6825      	ldr	r5, [r4, #0]
 80083ac:	f015 0506 	ands.w	r5, r5, #6
 80083b0:	d106      	bne.n	80083c0 <_printf_common+0x48>
 80083b2:	f104 0a19 	add.w	sl, r4, #25
 80083b6:	68e3      	ldr	r3, [r4, #12]
 80083b8:	6832      	ldr	r2, [r6, #0]
 80083ba:	1a9b      	subs	r3, r3, r2
 80083bc:	42ab      	cmp	r3, r5
 80083be:	dc26      	bgt.n	800840e <_printf_common+0x96>
 80083c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083c4:	1e13      	subs	r3, r2, #0
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	bf18      	it	ne
 80083ca:	2301      	movne	r3, #1
 80083cc:	0692      	lsls	r2, r2, #26
 80083ce:	d42b      	bmi.n	8008428 <_printf_common+0xb0>
 80083d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083d4:	4649      	mov	r1, r9
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c0      	blx	r8
 80083da:	3001      	adds	r0, #1
 80083dc:	d01e      	beq.n	800841c <_printf_common+0xa4>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	6922      	ldr	r2, [r4, #16]
 80083e2:	f003 0306 	and.w	r3, r3, #6
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	bf02      	ittt	eq
 80083ea:	68e5      	ldreq	r5, [r4, #12]
 80083ec:	6833      	ldreq	r3, [r6, #0]
 80083ee:	1aed      	subeq	r5, r5, r3
 80083f0:	68a3      	ldr	r3, [r4, #8]
 80083f2:	bf0c      	ite	eq
 80083f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083f8:	2500      	movne	r5, #0
 80083fa:	4293      	cmp	r3, r2
 80083fc:	bfc4      	itt	gt
 80083fe:	1a9b      	subgt	r3, r3, r2
 8008400:	18ed      	addgt	r5, r5, r3
 8008402:	2600      	movs	r6, #0
 8008404:	341a      	adds	r4, #26
 8008406:	42b5      	cmp	r5, r6
 8008408:	d11a      	bne.n	8008440 <_printf_common+0xc8>
 800840a:	2000      	movs	r0, #0
 800840c:	e008      	b.n	8008420 <_printf_common+0xa8>
 800840e:	2301      	movs	r3, #1
 8008410:	4652      	mov	r2, sl
 8008412:	4649      	mov	r1, r9
 8008414:	4638      	mov	r0, r7
 8008416:	47c0      	blx	r8
 8008418:	3001      	adds	r0, #1
 800841a:	d103      	bne.n	8008424 <_printf_common+0xac>
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008424:	3501      	adds	r5, #1
 8008426:	e7c6      	b.n	80083b6 <_printf_common+0x3e>
 8008428:	18e1      	adds	r1, r4, r3
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	2030      	movs	r0, #48	; 0x30
 800842e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008432:	4422      	add	r2, r4
 8008434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800843c:	3302      	adds	r3, #2
 800843e:	e7c7      	b.n	80083d0 <_printf_common+0x58>
 8008440:	2301      	movs	r3, #1
 8008442:	4622      	mov	r2, r4
 8008444:	4649      	mov	r1, r9
 8008446:	4638      	mov	r0, r7
 8008448:	47c0      	blx	r8
 800844a:	3001      	adds	r0, #1
 800844c:	d0e6      	beq.n	800841c <_printf_common+0xa4>
 800844e:	3601      	adds	r6, #1
 8008450:	e7d9      	b.n	8008406 <_printf_common+0x8e>
	...

08008454 <_printf_i>:
 8008454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	7e0f      	ldrb	r7, [r1, #24]
 800845a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800845c:	2f78      	cmp	r7, #120	; 0x78
 800845e:	4691      	mov	r9, r2
 8008460:	4680      	mov	r8, r0
 8008462:	460c      	mov	r4, r1
 8008464:	469a      	mov	sl, r3
 8008466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800846a:	d807      	bhi.n	800847c <_printf_i+0x28>
 800846c:	2f62      	cmp	r7, #98	; 0x62
 800846e:	d80a      	bhi.n	8008486 <_printf_i+0x32>
 8008470:	2f00      	cmp	r7, #0
 8008472:	f000 80d4 	beq.w	800861e <_printf_i+0x1ca>
 8008476:	2f58      	cmp	r7, #88	; 0x58
 8008478:	f000 80c0 	beq.w	80085fc <_printf_i+0x1a8>
 800847c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008484:	e03a      	b.n	80084fc <_printf_i+0xa8>
 8008486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800848a:	2b15      	cmp	r3, #21
 800848c:	d8f6      	bhi.n	800847c <_printf_i+0x28>
 800848e:	a101      	add	r1, pc, #4	; (adr r1, 8008494 <_printf_i+0x40>)
 8008490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008494:	080084ed 	.word	0x080084ed
 8008498:	08008501 	.word	0x08008501
 800849c:	0800847d 	.word	0x0800847d
 80084a0:	0800847d 	.word	0x0800847d
 80084a4:	0800847d 	.word	0x0800847d
 80084a8:	0800847d 	.word	0x0800847d
 80084ac:	08008501 	.word	0x08008501
 80084b0:	0800847d 	.word	0x0800847d
 80084b4:	0800847d 	.word	0x0800847d
 80084b8:	0800847d 	.word	0x0800847d
 80084bc:	0800847d 	.word	0x0800847d
 80084c0:	08008605 	.word	0x08008605
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	080085bf 	.word	0x080085bf
 80084cc:	0800847d 	.word	0x0800847d
 80084d0:	0800847d 	.word	0x0800847d
 80084d4:	08008627 	.word	0x08008627
 80084d8:	0800847d 	.word	0x0800847d
 80084dc:	0800852d 	.word	0x0800852d
 80084e0:	0800847d 	.word	0x0800847d
 80084e4:	0800847d 	.word	0x0800847d
 80084e8:	080085c7 	.word	0x080085c7
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	1d1a      	adds	r2, r3, #4
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	602a      	str	r2, [r5, #0]
 80084f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084fc:	2301      	movs	r3, #1
 80084fe:	e09f      	b.n	8008640 <_printf_i+0x1ec>
 8008500:	6820      	ldr	r0, [r4, #0]
 8008502:	682b      	ldr	r3, [r5, #0]
 8008504:	0607      	lsls	r7, r0, #24
 8008506:	f103 0104 	add.w	r1, r3, #4
 800850a:	6029      	str	r1, [r5, #0]
 800850c:	d501      	bpl.n	8008512 <_printf_i+0xbe>
 800850e:	681e      	ldr	r6, [r3, #0]
 8008510:	e003      	b.n	800851a <_printf_i+0xc6>
 8008512:	0646      	lsls	r6, r0, #25
 8008514:	d5fb      	bpl.n	800850e <_printf_i+0xba>
 8008516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800851a:	2e00      	cmp	r6, #0
 800851c:	da03      	bge.n	8008526 <_printf_i+0xd2>
 800851e:	232d      	movs	r3, #45	; 0x2d
 8008520:	4276      	negs	r6, r6
 8008522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008526:	485a      	ldr	r0, [pc, #360]	; (8008690 <_printf_i+0x23c>)
 8008528:	230a      	movs	r3, #10
 800852a:	e012      	b.n	8008552 <_printf_i+0xfe>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	6820      	ldr	r0, [r4, #0]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	6029      	str	r1, [r5, #0]
 8008534:	0605      	lsls	r5, r0, #24
 8008536:	d501      	bpl.n	800853c <_printf_i+0xe8>
 8008538:	681e      	ldr	r6, [r3, #0]
 800853a:	e002      	b.n	8008542 <_printf_i+0xee>
 800853c:	0641      	lsls	r1, r0, #25
 800853e:	d5fb      	bpl.n	8008538 <_printf_i+0xe4>
 8008540:	881e      	ldrh	r6, [r3, #0]
 8008542:	4853      	ldr	r0, [pc, #332]	; (8008690 <_printf_i+0x23c>)
 8008544:	2f6f      	cmp	r7, #111	; 0x6f
 8008546:	bf0c      	ite	eq
 8008548:	2308      	moveq	r3, #8
 800854a:	230a      	movne	r3, #10
 800854c:	2100      	movs	r1, #0
 800854e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008552:	6865      	ldr	r5, [r4, #4]
 8008554:	60a5      	str	r5, [r4, #8]
 8008556:	2d00      	cmp	r5, #0
 8008558:	bfa2      	ittt	ge
 800855a:	6821      	ldrge	r1, [r4, #0]
 800855c:	f021 0104 	bicge.w	r1, r1, #4
 8008560:	6021      	strge	r1, [r4, #0]
 8008562:	b90e      	cbnz	r6, 8008568 <_printf_i+0x114>
 8008564:	2d00      	cmp	r5, #0
 8008566:	d04b      	beq.n	8008600 <_printf_i+0x1ac>
 8008568:	4615      	mov	r5, r2
 800856a:	fbb6 f1f3 	udiv	r1, r6, r3
 800856e:	fb03 6711 	mls	r7, r3, r1, r6
 8008572:	5dc7      	ldrb	r7, [r0, r7]
 8008574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008578:	4637      	mov	r7, r6
 800857a:	42bb      	cmp	r3, r7
 800857c:	460e      	mov	r6, r1
 800857e:	d9f4      	bls.n	800856a <_printf_i+0x116>
 8008580:	2b08      	cmp	r3, #8
 8008582:	d10b      	bne.n	800859c <_printf_i+0x148>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	07de      	lsls	r6, r3, #31
 8008588:	d508      	bpl.n	800859c <_printf_i+0x148>
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	6861      	ldr	r1, [r4, #4]
 800858e:	4299      	cmp	r1, r3
 8008590:	bfde      	ittt	le
 8008592:	2330      	movle	r3, #48	; 0x30
 8008594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800859c:	1b52      	subs	r2, r2, r5
 800859e:	6122      	str	r2, [r4, #16]
 80085a0:	f8cd a000 	str.w	sl, [sp]
 80085a4:	464b      	mov	r3, r9
 80085a6:	aa03      	add	r2, sp, #12
 80085a8:	4621      	mov	r1, r4
 80085aa:	4640      	mov	r0, r8
 80085ac:	f7ff fee4 	bl	8008378 <_printf_common>
 80085b0:	3001      	adds	r0, #1
 80085b2:	d14a      	bne.n	800864a <_printf_i+0x1f6>
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	b004      	add	sp, #16
 80085ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	f043 0320 	orr.w	r3, r3, #32
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	4833      	ldr	r0, [pc, #204]	; (8008694 <_printf_i+0x240>)
 80085c8:	2778      	movs	r7, #120	; 0x78
 80085ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	6829      	ldr	r1, [r5, #0]
 80085d2:	061f      	lsls	r7, r3, #24
 80085d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80085d8:	d402      	bmi.n	80085e0 <_printf_i+0x18c>
 80085da:	065f      	lsls	r7, r3, #25
 80085dc:	bf48      	it	mi
 80085de:	b2b6      	uxthmi	r6, r6
 80085e0:	07df      	lsls	r7, r3, #31
 80085e2:	bf48      	it	mi
 80085e4:	f043 0320 	orrmi.w	r3, r3, #32
 80085e8:	6029      	str	r1, [r5, #0]
 80085ea:	bf48      	it	mi
 80085ec:	6023      	strmi	r3, [r4, #0]
 80085ee:	b91e      	cbnz	r6, 80085f8 <_printf_i+0x1a4>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f023 0320 	bic.w	r3, r3, #32
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	2310      	movs	r3, #16
 80085fa:	e7a7      	b.n	800854c <_printf_i+0xf8>
 80085fc:	4824      	ldr	r0, [pc, #144]	; (8008690 <_printf_i+0x23c>)
 80085fe:	e7e4      	b.n	80085ca <_printf_i+0x176>
 8008600:	4615      	mov	r5, r2
 8008602:	e7bd      	b.n	8008580 <_printf_i+0x12c>
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	6826      	ldr	r6, [r4, #0]
 8008608:	6961      	ldr	r1, [r4, #20]
 800860a:	1d18      	adds	r0, r3, #4
 800860c:	6028      	str	r0, [r5, #0]
 800860e:	0635      	lsls	r5, r6, #24
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	d501      	bpl.n	8008618 <_printf_i+0x1c4>
 8008614:	6019      	str	r1, [r3, #0]
 8008616:	e002      	b.n	800861e <_printf_i+0x1ca>
 8008618:	0670      	lsls	r0, r6, #25
 800861a:	d5fb      	bpl.n	8008614 <_printf_i+0x1c0>
 800861c:	8019      	strh	r1, [r3, #0]
 800861e:	2300      	movs	r3, #0
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	4615      	mov	r5, r2
 8008624:	e7bc      	b.n	80085a0 <_printf_i+0x14c>
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	602a      	str	r2, [r5, #0]
 800862c:	681d      	ldr	r5, [r3, #0]
 800862e:	6862      	ldr	r2, [r4, #4]
 8008630:	2100      	movs	r1, #0
 8008632:	4628      	mov	r0, r5
 8008634:	f7f7 fdd4 	bl	80001e0 <memchr>
 8008638:	b108      	cbz	r0, 800863e <_printf_i+0x1ea>
 800863a:	1b40      	subs	r0, r0, r5
 800863c:	6060      	str	r0, [r4, #4]
 800863e:	6863      	ldr	r3, [r4, #4]
 8008640:	6123      	str	r3, [r4, #16]
 8008642:	2300      	movs	r3, #0
 8008644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008648:	e7aa      	b.n	80085a0 <_printf_i+0x14c>
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	462a      	mov	r2, r5
 800864e:	4649      	mov	r1, r9
 8008650:	4640      	mov	r0, r8
 8008652:	47d0      	blx	sl
 8008654:	3001      	adds	r0, #1
 8008656:	d0ad      	beq.n	80085b4 <_printf_i+0x160>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	079b      	lsls	r3, r3, #30
 800865c:	d413      	bmi.n	8008686 <_printf_i+0x232>
 800865e:	68e0      	ldr	r0, [r4, #12]
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	4298      	cmp	r0, r3
 8008664:	bfb8      	it	lt
 8008666:	4618      	movlt	r0, r3
 8008668:	e7a6      	b.n	80085b8 <_printf_i+0x164>
 800866a:	2301      	movs	r3, #1
 800866c:	4632      	mov	r2, r6
 800866e:	4649      	mov	r1, r9
 8008670:	4640      	mov	r0, r8
 8008672:	47d0      	blx	sl
 8008674:	3001      	adds	r0, #1
 8008676:	d09d      	beq.n	80085b4 <_printf_i+0x160>
 8008678:	3501      	adds	r5, #1
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	9903      	ldr	r1, [sp, #12]
 800867e:	1a5b      	subs	r3, r3, r1
 8008680:	42ab      	cmp	r3, r5
 8008682:	dcf2      	bgt.n	800866a <_printf_i+0x216>
 8008684:	e7eb      	b.n	800865e <_printf_i+0x20a>
 8008686:	2500      	movs	r5, #0
 8008688:	f104 0619 	add.w	r6, r4, #25
 800868c:	e7f5      	b.n	800867a <_printf_i+0x226>
 800868e:	bf00      	nop
 8008690:	08008891 	.word	0x08008891
 8008694:	080088a2 	.word	0x080088a2

08008698 <memmove>:
 8008698:	4288      	cmp	r0, r1
 800869a:	b510      	push	{r4, lr}
 800869c:	eb01 0402 	add.w	r4, r1, r2
 80086a0:	d902      	bls.n	80086a8 <memmove+0x10>
 80086a2:	4284      	cmp	r4, r0
 80086a4:	4623      	mov	r3, r4
 80086a6:	d807      	bhi.n	80086b8 <memmove+0x20>
 80086a8:	1e43      	subs	r3, r0, #1
 80086aa:	42a1      	cmp	r1, r4
 80086ac:	d008      	beq.n	80086c0 <memmove+0x28>
 80086ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086b6:	e7f8      	b.n	80086aa <memmove+0x12>
 80086b8:	4402      	add	r2, r0
 80086ba:	4601      	mov	r1, r0
 80086bc:	428a      	cmp	r2, r1
 80086be:	d100      	bne.n	80086c2 <memmove+0x2a>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ca:	e7f7      	b.n	80086bc <memmove+0x24>

080086cc <_sbrk_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d06      	ldr	r5, [pc, #24]	; (80086e8 <_sbrk_r+0x1c>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	602b      	str	r3, [r5, #0]
 80086d8:	f7f8 fbb4 	bl	8000e44 <_sbrk>
 80086dc:	1c43      	adds	r3, r0, #1
 80086de:	d102      	bne.n	80086e6 <_sbrk_r+0x1a>
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	b103      	cbz	r3, 80086e6 <_sbrk_r+0x1a>
 80086e4:	6023      	str	r3, [r4, #0]
 80086e6:	bd38      	pop	{r3, r4, r5, pc}
 80086e8:	20001f8c 	.word	0x20001f8c

080086ec <_realloc_r>:
 80086ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f0:	4680      	mov	r8, r0
 80086f2:	4614      	mov	r4, r2
 80086f4:	460e      	mov	r6, r1
 80086f6:	b921      	cbnz	r1, 8008702 <_realloc_r+0x16>
 80086f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086fc:	4611      	mov	r1, r2
 80086fe:	f7ff bc57 	b.w	8007fb0 <_malloc_r>
 8008702:	b92a      	cbnz	r2, 8008710 <_realloc_r+0x24>
 8008704:	f7ff fbe8 	bl	8007ed8 <_free_r>
 8008708:	4625      	mov	r5, r4
 800870a:	4628      	mov	r0, r5
 800870c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008710:	f000 f81b 	bl	800874a <_malloc_usable_size_r>
 8008714:	4284      	cmp	r4, r0
 8008716:	4607      	mov	r7, r0
 8008718:	d802      	bhi.n	8008720 <_realloc_r+0x34>
 800871a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800871e:	d812      	bhi.n	8008746 <_realloc_r+0x5a>
 8008720:	4621      	mov	r1, r4
 8008722:	4640      	mov	r0, r8
 8008724:	f7ff fc44 	bl	8007fb0 <_malloc_r>
 8008728:	4605      	mov	r5, r0
 800872a:	2800      	cmp	r0, #0
 800872c:	d0ed      	beq.n	800870a <_realloc_r+0x1e>
 800872e:	42bc      	cmp	r4, r7
 8008730:	4622      	mov	r2, r4
 8008732:	4631      	mov	r1, r6
 8008734:	bf28      	it	cs
 8008736:	463a      	movcs	r2, r7
 8008738:	f7ff fbc0 	bl	8007ebc <memcpy>
 800873c:	4631      	mov	r1, r6
 800873e:	4640      	mov	r0, r8
 8008740:	f7ff fbca 	bl	8007ed8 <_free_r>
 8008744:	e7e1      	b.n	800870a <_realloc_r+0x1e>
 8008746:	4635      	mov	r5, r6
 8008748:	e7df      	b.n	800870a <_realloc_r+0x1e>

0800874a <_malloc_usable_size_r>:
 800874a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800874e:	1f18      	subs	r0, r3, #4
 8008750:	2b00      	cmp	r3, #0
 8008752:	bfbc      	itt	lt
 8008754:	580b      	ldrlt	r3, [r1, r0]
 8008756:	18c0      	addlt	r0, r0, r3
 8008758:	4770      	bx	lr
	...

0800875c <_init>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	bf00      	nop
 8008760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008762:	bc08      	pop	{r3}
 8008764:	469e      	mov	lr, r3
 8008766:	4770      	bx	lr

08008768 <_fini>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr
